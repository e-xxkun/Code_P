// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_commands.proto

#include "controller_commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mac_5fprimitives_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_dl_dci_mac_5fprimitives_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mac_5fprimitives_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_rlc_pdu_mac_5fprimitives_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mac_5fprimitives_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ul_dci_mac_5fprimitives_2eproto;
namespace protocol {
class flex_dl_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_data> _instance;
} _flex_dl_data_default_instance_;
class flex_ul_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ul_data> _instance;
} _flex_ul_data_default_instance_;
class flex_dl_rarDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_rar> _instance;
} _flex_dl_rar_default_instance_;
class flex_dl_broadcastDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_broadcast> _instance;
} _flex_dl_broadcast_default_instance_;
class flex_pdcch_ofdm_sym_countDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_pdcch_ofdm_sym_count> _instance;
} _flex_pdcch_ofdm_sym_count_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_dl_broadcast_controller_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_broadcast_default_instance_;
    new (ptr) ::protocol::flex_dl_broadcast();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_broadcast::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_dl_broadcast_controller_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_dl_broadcast_controller_5fcommands_2eproto}, {
      &scc_info_flex_dl_dci_mac_5fprimitives_2eproto.base,}};

static void InitDefaultsscc_info_flex_dl_data_controller_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_data_default_instance_;
    new (ptr) ::protocol::flex_dl_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_dl_data_controller_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_dl_data_controller_5fcommands_2eproto}, {
      &scc_info_flex_dl_dci_mac_5fprimitives_2eproto.base,
      &scc_info_flex_rlc_pdu_mac_5fprimitives_2eproto.base,}};

static void InitDefaultsscc_info_flex_dl_rar_controller_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_rar_default_instance_;
    new (ptr) ::protocol::flex_dl_rar();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_rar::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_dl_rar_controller_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_dl_rar_controller_5fcommands_2eproto}, {
      &scc_info_flex_dl_dci_mac_5fprimitives_2eproto.base,}};

static void InitDefaultsscc_info_flex_pdcch_ofdm_sym_count_controller_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_pdcch_ofdm_sym_count_default_instance_;
    new (ptr) ::protocol::flex_pdcch_ofdm_sym_count();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_pdcch_ofdm_sym_count::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_pdcch_ofdm_sym_count_controller_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_pdcch_ofdm_sym_count_controller_5fcommands_2eproto}, {}};

static void InitDefaultsscc_info_flex_ul_data_controller_5fcommands_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ul_data_default_instance_;
    new (ptr) ::protocol::flex_ul_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ul_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ul_data_controller_5fcommands_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_ul_data_controller_5fcommands_2eproto}, {
      &scc_info_flex_ul_dci_mac_5fprimitives_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_controller_5fcommands_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_controller_5fcommands_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_controller_5fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_controller_5fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, dl_dci_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, ce_bitmap_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, rlc_pdu_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, serv_cell_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_data, act_deact_ce_),
  1,
  0,
  ~0u,
  ~0u,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_data, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_data, ul_dci_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_rar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_rar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_rar, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_rar, grant_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_rar, rar_dci_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_rar, carrier_index_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_broadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_broadcast, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_broadcast, index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_broadcast, broad_dci_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_broadcast, carrier_index_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcch_ofdm_sym_count, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcch_ofdm_sym_count, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcch_ofdm_sym_count, carrier_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcch_ofdm_sym_count, num_pdcch_ofdm_symbols_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::protocol::flex_dl_data)},
  { 17, 24, sizeof(::protocol::flex_ul_data)},
  { 26, 35, sizeof(::protocol::flex_dl_rar)},
  { 39, 48, sizeof(::protocol::flex_dl_broadcast)},
  { 52, 59, sizeof(::protocol::flex_pdcch_ofdm_sym_count)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ul_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_rar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_broadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_pdcch_ofdm_sym_count_default_instance_),
};

const char descriptor_table_protodef_controller_5fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031controller_commands.proto\022\010protocol\032\024m"
  "ac_primitives.proto\"\256\001\n\014flex_dl_data\022\014\n\004"
  "rnti\030\001 \001(\r\022%\n\006dl_dci\030\002 \001(\0132\025.protocol.fl"
  "ex_dl_dci\022\021\n\tce_bitmap\030\003 \003(\r\022\'\n\007rlc_pdu\030"
  "\004 \003(\0132\026.protocol.flex_rlc_pdu\022\027\n\017serv_ce"
  "ll_index\030\005 \001(\r\022\024\n\014act_deact_ce\030\006 \001(\r\"C\n\014"
  "flex_ul_data\022\014\n\004rnti\030\001 \001(\r\022%\n\006ul_dci\030\002 \001"
  "(\0132\025.protocol.flex_ul_dci\"i\n\013flex_dl_rar"
  "\022\014\n\004rnti\030\001 \001(\r\022\r\n\005grant\030\002 \001(\r\022&\n\007rar_dci"
  "\030\003 \001(\0132\025.protocol.flex_dl_dci\022\025\n\rcarrier"
  "_index\030\004 \001(\r\"q\n\021flex_dl_broadcast\022\014\n\004typ"
  "e\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022(\n\tbroad_dci\030\003 \001("
  "\0132\025.protocol.flex_dl_dci\022\025\n\rcarrier_inde"
  "x\030\004 \001(\r\"R\n\031flex_pdcch_ofdm_sym_count\022\025\n\r"
  "carrier_index\030\001 \001(\r\022\036\n\026num_pdcch_ofdm_sy"
  "mbols\030\002 \001(\r*3\n\023flex_broadcast_type\022\r\n\tFL"
  "BT_BCCH\020\000\022\r\n\tFLBT_PCCH\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_controller_5fcommands_2eproto_deps[1] = {
  &::descriptor_table_mac_5fprimitives_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_controller_5fcommands_2eproto_sccs[5] = {
  &scc_info_flex_dl_broadcast_controller_5fcommands_2eproto.base,
  &scc_info_flex_dl_data_controller_5fcommands_2eproto.base,
  &scc_info_flex_dl_rar_controller_5fcommands_2eproto.base,
  &scc_info_flex_pdcch_ofdm_sym_count_controller_5fcommands_2eproto.base,
  &scc_info_flex_ul_data_controller_5fcommands_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_controller_5fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controller_5fcommands_2eproto = {
  false, false, descriptor_table_protodef_controller_5fcommands_2eproto, "controller_commands.proto", 664,
  &descriptor_table_controller_5fcommands_2eproto_once, descriptor_table_controller_5fcommands_2eproto_sccs, descriptor_table_controller_5fcommands_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_controller_5fcommands_2eproto::offsets,
  file_level_metadata_controller_5fcommands_2eproto, 5, file_level_enum_descriptors_controller_5fcommands_2eproto, file_level_service_descriptors_controller_5fcommands_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_controller_5fcommands_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_controller_5fcommands_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_broadcast_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_controller_5fcommands_2eproto);
  return file_level_enum_descriptors_controller_5fcommands_2eproto[0];
}
bool flex_broadcast_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void flex_dl_data::InitAsDefaultInstance() {
  ::protocol::_flex_dl_data_default_instance_._instance.get_mutable()->dl_dci_ = const_cast< ::protocol::flex_dl_dci*>(
      ::protocol::flex_dl_dci::internal_default_instance());
}
class flex_dl_data::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_data>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protocol::flex_dl_dci& dl_dci(const flex_dl_data* msg);
  static void set_has_dl_dci(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serv_cell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_act_deact_ce(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::protocol::flex_dl_dci&
flex_dl_data::_Internal::dl_dci(const flex_dl_data* msg) {
  return *msg->dl_dci_;
}
void flex_dl_data::clear_dl_dci() {
  if (dl_dci_ != nullptr) dl_dci_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_data::clear_rlc_pdu() {
  rlc_pdu_.Clear();
}
flex_dl_data::flex_dl_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ce_bitmap_(arena),
  rlc_pdu_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_data)
}
flex_dl_data::flex_dl_data(const flex_dl_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ce_bitmap_(from.ce_bitmap_),
      rlc_pdu_(from.rlc_pdu_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dl_dci()) {
    dl_dci_ = new ::protocol::flex_dl_dci(*from.dl_dci_);
  } else {
    dl_dci_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&act_deact_ce_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(act_deact_ce_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_data)
}

void flex_dl_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_dl_data_controller_5fcommands_2eproto.base);
  ::memset(&dl_dci_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&act_deact_ce_) -
      reinterpret_cast<char*>(&dl_dci_)) + sizeof(act_deact_ce_));
}

flex_dl_data::~flex_dl_data() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dl_dci_;
}

void flex_dl_data::ArenaDtor(void* object) {
  flex_dl_data* _this = reinterpret_cast< flex_dl_data* >(object);
  (void)_this;
}
void flex_dl_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_data& flex_dl_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_data_controller_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_data::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ce_bitmap_.Clear();
  rlc_pdu_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(dl_dci_ != nullptr);
    dl_dci_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&act_deact_ce_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(act_deact_ce_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_dl_dci dl_dci = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl_dci(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ce_bitmap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ce_bitmap(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ce_bitmap(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rlc_pdu(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 serv_cell_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_serv_cell_index(&has_bits);
          serv_cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 act_deact_ce = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_act_deact_ce(&has_bits);
          act_deact_ce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional .protocol.flex_dl_dci dl_dci = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dl_dci(this), target, stream);
  }

  // repeated uint32 ce_bitmap = 3;
  for (int i = 0, n = this->_internal_ce_bitmap_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ce_bitmap(i), target);
  }

  // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rlc_pdu_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_rlc_pdu(i), target, stream);
  }

  // optional uint32 serv_cell_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_serv_cell_index(), target);
  }

  // optional uint32 act_deact_ce = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_act_deact_ce(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_data)
  return target;
}

size_t flex_dl_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ce_bitmap = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ce_bitmap_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ce_bitmap_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
  total_size += 1UL * this->_internal_rlc_pdu_size();
  for (const auto& msg : this->rlc_pdu_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protocol.flex_dl_dci dl_dci = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dl_dci_);
    }

    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 serv_cell_index = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_serv_cell_index());
    }

    // optional uint32 act_deact_ce = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_act_deact_ce());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_data)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_data)
    MergeFrom(*source);
  }
}

void flex_dl_data::MergeFrom(const flex_dl_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ce_bitmap_.MergeFrom(from.ce_bitmap_);
  rlc_pdu_.MergeFrom(from.rlc_pdu_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dl_dci()->::protocol::flex_dl_dci::MergeFrom(from._internal_dl_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000004u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      act_deact_ce_ = from.act_deact_ce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_data::CopyFrom(const flex_dl_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_data::IsInitialized() const {
  return true;
}

void flex_dl_data::InternalSwap(flex_dl_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ce_bitmap_.InternalSwap(&other->ce_bitmap_);
  rlc_pdu_.InternalSwap(&other->rlc_pdu_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_dl_data, act_deact_ce_)
      + sizeof(flex_dl_data::act_deact_ce_)
      - PROTOBUF_FIELD_OFFSET(flex_dl_data, dl_dci_)>(
          reinterpret_cast<char*>(&dl_dci_),
          reinterpret_cast<char*>(&other->dl_dci_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ul_data::InitAsDefaultInstance() {
  ::protocol::_flex_ul_data_default_instance_._instance.get_mutable()->ul_dci_ = const_cast< ::protocol::flex_ul_dci*>(
      ::protocol::flex_ul_dci::internal_default_instance());
}
class flex_ul_data::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ul_data>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protocol::flex_ul_dci& ul_dci(const flex_ul_data* msg);
  static void set_has_ul_dci(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_ul_dci&
flex_ul_data::_Internal::ul_dci(const flex_ul_data* msg) {
  return *msg->ul_dci_;
}
void flex_ul_data::clear_ul_dci() {
  if (ul_dci_ != nullptr) ul_dci_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_ul_data::flex_ul_data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ul_data)
}
flex_ul_data::flex_ul_data(const flex_ul_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ul_dci()) {
    ul_dci_ = new ::protocol::flex_ul_dci(*from.ul_dci_);
  } else {
    ul_dci_ = nullptr;
  }
  rnti_ = from.rnti_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_data)
}

void flex_ul_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ul_data_controller_5fcommands_2eproto.base);
  ::memset(&ul_dci_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rnti_) -
      reinterpret_cast<char*>(&ul_dci_)) + sizeof(rnti_));
}

flex_ul_data::~flex_ul_data() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_data)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ul_data::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ul_dci_;
}

void flex_ul_data::ArenaDtor(void* object) {
  flex_ul_data* _this = reinterpret_cast< flex_ul_data* >(object);
  (void)_this;
}
void flex_ul_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ul_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ul_data& flex_ul_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ul_data_controller_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void flex_ul_data::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ul_dci_ != nullptr);
    ul_dci_->Clear();
  }
  rnti_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ul_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_ul_dci ul_dci = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ul_dci(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ul_data::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional .protocol.flex_ul_dci ul_dci = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ul_dci(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_data)
  return target;
}

size_t flex_ul_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_data)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_ul_dci ul_dci = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ul_dci_);
    }

    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ul_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_data)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ul_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_data)
    MergeFrom(*source);
  }
}

void flex_ul_data::MergeFrom(const flex_ul_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_ul_dci()->::protocol::flex_ul_dci::MergeFrom(from._internal_ul_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_data::CopyFrom(const flex_ul_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_data::IsInitialized() const {
  return true;
}

void flex_ul_data::InternalSwap(flex_ul_data* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ul_data, rnti_)
      + sizeof(flex_ul_data::rnti_)
      - PROTOBUF_FIELD_OFFSET(flex_ul_data, ul_dci_)>(
          reinterpret_cast<char*>(&ul_dci_),
          reinterpret_cast<char*>(&other->ul_dci_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ul_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_dl_rar::InitAsDefaultInstance() {
  ::protocol::_flex_dl_rar_default_instance_._instance.get_mutable()->rar_dci_ = const_cast< ::protocol::flex_dl_dci*>(
      ::protocol::flex_dl_dci::internal_default_instance());
}
class flex_dl_rar::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_rar>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_grant(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_dl_dci& rar_dci(const flex_dl_rar* msg);
  static void set_has_rar_dci(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::protocol::flex_dl_dci&
flex_dl_rar::_Internal::rar_dci(const flex_dl_rar* msg) {
  return *msg->rar_dci_;
}
void flex_dl_rar::clear_rar_dci() {
  if (rar_dci_ != nullptr) rar_dci_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_dl_rar::flex_dl_rar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_rar)
}
flex_dl_rar::flex_dl_rar(const flex_dl_rar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_rar_dci()) {
    rar_dci_ = new ::protocol::flex_dl_dci(*from.rar_dci_);
  } else {
    rar_dci_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(carrier_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_rar)
}

void flex_dl_rar::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_dl_rar_controller_5fcommands_2eproto.base);
  ::memset(&rar_dci_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carrier_index_) -
      reinterpret_cast<char*>(&rar_dci_)) + sizeof(carrier_index_));
}

flex_dl_rar::~flex_dl_rar() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_rar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_rar::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete rar_dci_;
}

void flex_dl_rar::ArenaDtor(void* object) {
  flex_dl_rar* _this = reinterpret_cast< flex_dl_rar* >(object);
  (void)_this;
}
void flex_dl_rar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_rar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_rar& flex_dl_rar::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_rar_controller_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_rar::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_rar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(rar_dci_ != nullptr);
    rar_dci_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&carrier_index_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(carrier_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_rar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 grant = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_grant(&has_bits);
          grant_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_dl_dci rar_dci = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rar_dci(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 carrier_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_carrier_index(&has_bits);
          carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_rar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_rar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional uint32 grant = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_grant(), target);
  }

  // optional .protocol.flex_dl_dci rar_dci = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rar_dci(this), target, stream);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_carrier_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_rar)
  return target;
}

size_t flex_dl_rar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_rar)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protocol.flex_dl_dci rar_dci = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rar_dci_);
    }

    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 grant = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_grant());
    }

    // optional uint32 carrier_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_carrier_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_rar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_rar)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_rar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_rar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_rar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_rar)
    MergeFrom(*source);
  }
}

void flex_dl_rar::MergeFrom(const flex_dl_rar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_rar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_rar_dci()->::protocol::flex_dl_dci::MergeFrom(from._internal_rar_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000004u) {
      grant_ = from.grant_;
    }
    if (cached_has_bits & 0x00000008u) {
      carrier_index_ = from.carrier_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_rar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_rar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_rar::CopyFrom(const flex_dl_rar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_rar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_rar::IsInitialized() const {
  return true;
}

void flex_dl_rar::InternalSwap(flex_dl_rar* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_dl_rar, carrier_index_)
      + sizeof(flex_dl_rar::carrier_index_)
      - PROTOBUF_FIELD_OFFSET(flex_dl_rar, rar_dci_)>(
          reinterpret_cast<char*>(&rar_dci_),
          reinterpret_cast<char*>(&other->rar_dci_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_rar::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_dl_broadcast::InitAsDefaultInstance() {
  ::protocol::_flex_dl_broadcast_default_instance_._instance.get_mutable()->broad_dci_ = const_cast< ::protocol::flex_dl_dci*>(
      ::protocol::flex_dl_dci::internal_default_instance());
}
class flex_dl_broadcast::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_broadcast>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_dl_dci& broad_dci(const flex_dl_broadcast* msg);
  static void set_has_broad_dci(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::protocol::flex_dl_dci&
flex_dl_broadcast::_Internal::broad_dci(const flex_dl_broadcast* msg) {
  return *msg->broad_dci_;
}
void flex_dl_broadcast::clear_broad_dci() {
  if (broad_dci_ != nullptr) broad_dci_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_dl_broadcast::flex_dl_broadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_broadcast)
}
flex_dl_broadcast::flex_dl_broadcast(const flex_dl_broadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_broad_dci()) {
    broad_dci_ = new ::protocol::flex_dl_dci(*from.broad_dci_);
  } else {
    broad_dci_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(carrier_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_broadcast)
}

void flex_dl_broadcast::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_dl_broadcast_controller_5fcommands_2eproto.base);
  ::memset(&broad_dci_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carrier_index_) -
      reinterpret_cast<char*>(&broad_dci_)) + sizeof(carrier_index_));
}

flex_dl_broadcast::~flex_dl_broadcast() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_broadcast)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_broadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete broad_dci_;
}

void flex_dl_broadcast::ArenaDtor(void* object) {
  flex_dl_broadcast* _this = reinterpret_cast< flex_dl_broadcast* >(object);
  (void)_this;
}
void flex_dl_broadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_broadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_broadcast& flex_dl_broadcast::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_broadcast_controller_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(broad_dci_ != nullptr);
    broad_dci_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&carrier_index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(carrier_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_broadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_index(&has_bits);
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_dl_dci broad_dci = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_broad_dci(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 carrier_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_carrier_index(&has_bits);
          carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_broadcast::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_broadcast)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_index(), target);
  }

  // optional .protocol.flex_dl_dci broad_dci = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::broad_dci(this), target, stream);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_carrier_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_broadcast)
  return target;
}

size_t flex_dl_broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_broadcast)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protocol.flex_dl_dci broad_dci = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *broad_dci_);
    }

    // optional uint32 type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

    // optional uint32 index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_index());
    }

    // optional uint32 carrier_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_carrier_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_broadcast::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_broadcast* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_broadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_broadcast)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_broadcast)
    MergeFrom(*source);
  }
}

void flex_dl_broadcast::MergeFrom(const flex_dl_broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_broad_dci()->::protocol::flex_dl_dci::MergeFrom(from._internal_broad_dci());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000008u) {
      carrier_index_ = from.carrier_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_broadcast::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_broadcast::CopyFrom(const flex_dl_broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_broadcast::IsInitialized() const {
  return true;
}

void flex_dl_broadcast::InternalSwap(flex_dl_broadcast* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_dl_broadcast, carrier_index_)
      + sizeof(flex_dl_broadcast::carrier_index_)
      - PROTOBUF_FIELD_OFFSET(flex_dl_broadcast, broad_dci_)>(
          reinterpret_cast<char*>(&broad_dci_),
          reinterpret_cast<char*>(&other->broad_dci_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_broadcast::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_pdcch_ofdm_sym_count::InitAsDefaultInstance() {
}
class flex_pdcch_ofdm_sym_count::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_pdcch_ofdm_sym_count>()._has_bits_);
  static void set_has_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_pdcch_ofdm_symbols(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_pdcch_ofdm_sym_count::flex_pdcch_ofdm_sym_count(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_pdcch_ofdm_sym_count)
}
flex_pdcch_ofdm_sym_count::flex_pdcch_ofdm_sym_count(const flex_pdcch_ofdm_sym_count& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&carrier_index_, &from.carrier_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_pdcch_ofdm_symbols_) -
    reinterpret_cast<char*>(&carrier_index_)) + sizeof(num_pdcch_ofdm_symbols_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_pdcch_ofdm_sym_count)
}

void flex_pdcch_ofdm_sym_count::SharedCtor() {
  ::memset(&carrier_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_pdcch_ofdm_symbols_) -
      reinterpret_cast<char*>(&carrier_index_)) + sizeof(num_pdcch_ofdm_symbols_));
}

flex_pdcch_ofdm_sym_count::~flex_pdcch_ofdm_sym_count() {
  // @@protoc_insertion_point(destructor:protocol.flex_pdcch_ofdm_sym_count)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_pdcch_ofdm_sym_count::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_pdcch_ofdm_sym_count::ArenaDtor(void* object) {
  flex_pdcch_ofdm_sym_count* _this = reinterpret_cast< flex_pdcch_ofdm_sym_count* >(object);
  (void)_this;
}
void flex_pdcch_ofdm_sym_count::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_pdcch_ofdm_sym_count::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_pdcch_ofdm_sym_count& flex_pdcch_ofdm_sym_count::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_pdcch_ofdm_sym_count_controller_5fcommands_2eproto.base);
  return *internal_default_instance();
}


void flex_pdcch_ofdm_sym_count::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_pdcch_ofdm_sym_count)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&carrier_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_pdcch_ofdm_symbols_) -
        reinterpret_cast<char*>(&carrier_index_)) + sizeof(num_pdcch_ofdm_symbols_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_pdcch_ofdm_sym_count::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 carrier_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_carrier_index(&has_bits);
          carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_pdcch_ofdm_symbols = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_num_pdcch_ofdm_symbols(&has_bits);
          num_pdcch_ofdm_symbols_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_pdcch_ofdm_sym_count::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_pdcch_ofdm_sym_count)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_carrier_index(), target);
  }

  // optional uint32 num_pdcch_ofdm_symbols = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_num_pdcch_ofdm_symbols(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_pdcch_ofdm_sym_count)
  return target;
}

size_t flex_pdcch_ofdm_sym_count::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_pdcch_ofdm_sym_count)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 carrier_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_carrier_index());
    }

    // optional uint32 num_pdcch_ofdm_symbols = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_pdcch_ofdm_symbols());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_pdcch_ofdm_sym_count::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_pdcch_ofdm_sym_count)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_pdcch_ofdm_sym_count* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_pdcch_ofdm_sym_count>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_pdcch_ofdm_sym_count)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_pdcch_ofdm_sym_count)
    MergeFrom(*source);
  }
}

void flex_pdcch_ofdm_sym_count::MergeFrom(const flex_pdcch_ofdm_sym_count& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_pdcch_ofdm_sym_count)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_pdcch_ofdm_symbols_ = from.num_pdcch_ofdm_symbols_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_pdcch_ofdm_sym_count::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_pdcch_ofdm_sym_count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_pdcch_ofdm_sym_count::CopyFrom(const flex_pdcch_ofdm_sym_count& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_pdcch_ofdm_sym_count)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_pdcch_ofdm_sym_count::IsInitialized() const {
  return true;
}

void flex_pdcch_ofdm_sym_count::InternalSwap(flex_pdcch_ofdm_sym_count* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_pdcch_ofdm_sym_count, num_pdcch_ofdm_symbols_)
      + sizeof(flex_pdcch_ofdm_sym_count::num_pdcch_ofdm_symbols_)
      - PROTOBUF_FIELD_OFFSET(flex_pdcch_ofdm_sym_count, carrier_index_)>(
          reinterpret_cast<char*>(&carrier_index_),
          reinterpret_cast<char*>(&other->carrier_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_pdcch_ofdm_sym_count::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_data* Arena::CreateMaybeMessage< ::protocol::flex_dl_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_data >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ul_data* Arena::CreateMaybeMessage< ::protocol::flex_ul_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ul_data >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_rar* Arena::CreateMaybeMessage< ::protocol::flex_dl_rar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_rar >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_broadcast* Arena::CreateMaybeMessage< ::protocol::flex_dl_broadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_broadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_pdcch_ofdm_sym_count* Arena::CreateMaybeMessage< ::protocol::flex_pdcch_ofdm_sym_count >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_pdcch_ofdm_sym_count >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
