// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: controller_commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_controller_5fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_controller_5fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "mac_primitives.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_controller_5fcommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_controller_5fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_controller_5fcommands_2eproto;
namespace protocol {
class flex_dl_broadcast;
class flex_dl_broadcastDefaultTypeInternal;
extern flex_dl_broadcastDefaultTypeInternal _flex_dl_broadcast_default_instance_;
class flex_dl_data;
class flex_dl_dataDefaultTypeInternal;
extern flex_dl_dataDefaultTypeInternal _flex_dl_data_default_instance_;
class flex_dl_rar;
class flex_dl_rarDefaultTypeInternal;
extern flex_dl_rarDefaultTypeInternal _flex_dl_rar_default_instance_;
class flex_pdcch_ofdm_sym_count;
class flex_pdcch_ofdm_sym_countDefaultTypeInternal;
extern flex_pdcch_ofdm_sym_countDefaultTypeInternal _flex_pdcch_ofdm_sym_count_default_instance_;
class flex_ul_data;
class flex_ul_dataDefaultTypeInternal;
extern flex_ul_dataDefaultTypeInternal _flex_ul_data_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::flex_dl_broadcast* Arena::CreateMaybeMessage<::protocol::flex_dl_broadcast>(Arena*);
template<> ::protocol::flex_dl_data* Arena::CreateMaybeMessage<::protocol::flex_dl_data>(Arena*);
template<> ::protocol::flex_dl_rar* Arena::CreateMaybeMessage<::protocol::flex_dl_rar>(Arena*);
template<> ::protocol::flex_pdcch_ofdm_sym_count* Arena::CreateMaybeMessage<::protocol::flex_pdcch_ofdm_sym_count>(Arena*);
template<> ::protocol::flex_ul_data* Arena::CreateMaybeMessage<::protocol::flex_ul_data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum flex_broadcast_type : int {
  FLBT_BCCH = 0,
  FLBT_PCCH = 1
};
bool flex_broadcast_type_IsValid(int value);
constexpr flex_broadcast_type flex_broadcast_type_MIN = FLBT_BCCH;
constexpr flex_broadcast_type flex_broadcast_type_MAX = FLBT_PCCH;
constexpr int flex_broadcast_type_ARRAYSIZE = flex_broadcast_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_broadcast_type_descriptor();
template<typename T>
inline const std::string& flex_broadcast_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_broadcast_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_broadcast_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_broadcast_type_descriptor(), enum_t_value);
}
inline bool flex_broadcast_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_broadcast_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_broadcast_type>(
    flex_broadcast_type_descriptor(), name, value);
}
// ===================================================================

class flex_dl_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_dl_data) */ {
 public:
  inline flex_dl_data() : flex_dl_data(nullptr) {}
  virtual ~flex_dl_data();

  flex_dl_data(const flex_dl_data& from);
  flex_dl_data(flex_dl_data&& from) noexcept
    : flex_dl_data() {
    *this = ::std::move(from);
  }

  inline flex_dl_data& operator=(const flex_dl_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_dl_data& operator=(flex_dl_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_dl_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_dl_data* internal_default_instance() {
    return reinterpret_cast<const flex_dl_data*>(
               &_flex_dl_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(flex_dl_data& a, flex_dl_data& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_dl_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_dl_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_dl_data* New() const final {
    return CreateMaybeMessage<flex_dl_data>(nullptr);
  }

  flex_dl_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_dl_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_dl_data& from);
  void MergeFrom(const flex_dl_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_dl_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_dl_data";
  }
  protected:
  explicit flex_dl_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controller_5fcommands_2eproto);
    return ::descriptor_table_controller_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCeBitmapFieldNumber = 3,
    kRlcPduFieldNumber = 4,
    kDlDciFieldNumber = 2,
    kRntiFieldNumber = 1,
    kServCellIndexFieldNumber = 5,
    kActDeactCeFieldNumber = 6,
  };
  // repeated uint32 ce_bitmap = 3;
  int ce_bitmap_size() const;
  private:
  int _internal_ce_bitmap_size() const;
  public:
  void clear_ce_bitmap();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ce_bitmap(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ce_bitmap() const;
  void _internal_add_ce_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ce_bitmap();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ce_bitmap(int index) const;
  void set_ce_bitmap(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ce_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ce_bitmap() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ce_bitmap();

  // repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
  int rlc_pdu_size() const;
  private:
  int _internal_rlc_pdu_size() const;
  public:
  void clear_rlc_pdu();
  ::protocol::flex_rlc_pdu* mutable_rlc_pdu(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu >*
      mutable_rlc_pdu();
  private:
  const ::protocol::flex_rlc_pdu& _internal_rlc_pdu(int index) const;
  ::protocol::flex_rlc_pdu* _internal_add_rlc_pdu();
  public:
  const ::protocol::flex_rlc_pdu& rlc_pdu(int index) const;
  ::protocol::flex_rlc_pdu* add_rlc_pdu();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu >&
      rlc_pdu() const;

  // optional .protocol.flex_dl_dci dl_dci = 2;
  bool has_dl_dci() const;
  private:
  bool _internal_has_dl_dci() const;
  public:
  void clear_dl_dci();
  const ::protocol::flex_dl_dci& dl_dci() const;
  ::protocol::flex_dl_dci* release_dl_dci();
  ::protocol::flex_dl_dci* mutable_dl_dci();
  void set_allocated_dl_dci(::protocol::flex_dl_dci* dl_dci);
  private:
  const ::protocol::flex_dl_dci& _internal_dl_dci() const;
  ::protocol::flex_dl_dci* _internal_mutable_dl_dci();
  public:
  void unsafe_arena_set_allocated_dl_dci(
      ::protocol::flex_dl_dci* dl_dci);
  ::protocol::flex_dl_dci* unsafe_arena_release_dl_dci();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 serv_cell_index = 5;
  bool has_serv_cell_index() const;
  private:
  bool _internal_has_serv_cell_index() const;
  public:
  void clear_serv_cell_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 serv_cell_index() const;
  void set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serv_cell_index() const;
  void _internal_set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 act_deact_ce = 6;
  bool has_act_deact_ce() const;
  private:
  bool _internal_has_act_deact_ce() const;
  public:
  void clear_act_deact_ce();
  ::PROTOBUF_NAMESPACE_ID::uint32 act_deact_ce() const;
  void set_act_deact_ce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_act_deact_ce() const;
  void _internal_set_act_deact_ce(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_dl_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ce_bitmap_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu > rlc_pdu_;
  ::protocol::flex_dl_dci* dl_dci_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serv_cell_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 act_deact_ce_;
  friend struct ::TableStruct_controller_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class flex_ul_data PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ul_data) */ {
 public:
  inline flex_ul_data() : flex_ul_data(nullptr) {}
  virtual ~flex_ul_data();

  flex_ul_data(const flex_ul_data& from);
  flex_ul_data(flex_ul_data&& from) noexcept
    : flex_ul_data() {
    *this = ::std::move(from);
  }

  inline flex_ul_data& operator=(const flex_ul_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_ul_data& operator=(flex_ul_data&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_ul_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_ul_data* internal_default_instance() {
    return reinterpret_cast<const flex_ul_data*>(
               &_flex_ul_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(flex_ul_data& a, flex_ul_data& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_ul_data* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_ul_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_ul_data* New() const final {
    return CreateMaybeMessage<flex_ul_data>(nullptr);
  }

  flex_ul_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_ul_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_ul_data& from);
  void MergeFrom(const flex_ul_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_ul_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_ul_data";
  }
  protected:
  explicit flex_ul_data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controller_5fcommands_2eproto);
    return ::descriptor_table_controller_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUlDciFieldNumber = 2,
    kRntiFieldNumber = 1,
  };
  // optional .protocol.flex_ul_dci ul_dci = 2;
  bool has_ul_dci() const;
  private:
  bool _internal_has_ul_dci() const;
  public:
  void clear_ul_dci();
  const ::protocol::flex_ul_dci& ul_dci() const;
  ::protocol::flex_ul_dci* release_ul_dci();
  ::protocol::flex_ul_dci* mutable_ul_dci();
  void set_allocated_ul_dci(::protocol::flex_ul_dci* ul_dci);
  private:
  const ::protocol::flex_ul_dci& _internal_ul_dci() const;
  ::protocol::flex_ul_dci* _internal_mutable_ul_dci();
  public:
  void unsafe_arena_set_allocated_ul_dci(
      ::protocol::flex_ul_dci* ul_dci);
  ::protocol::flex_ul_dci* unsafe_arena_release_ul_dci();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_ul_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::flex_ul_dci* ul_dci_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  friend struct ::TableStruct_controller_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class flex_dl_rar PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_dl_rar) */ {
 public:
  inline flex_dl_rar() : flex_dl_rar(nullptr) {}
  virtual ~flex_dl_rar();

  flex_dl_rar(const flex_dl_rar& from);
  flex_dl_rar(flex_dl_rar&& from) noexcept
    : flex_dl_rar() {
    *this = ::std::move(from);
  }

  inline flex_dl_rar& operator=(const flex_dl_rar& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_dl_rar& operator=(flex_dl_rar&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_dl_rar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_dl_rar* internal_default_instance() {
    return reinterpret_cast<const flex_dl_rar*>(
               &_flex_dl_rar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(flex_dl_rar& a, flex_dl_rar& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_dl_rar* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_dl_rar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_dl_rar* New() const final {
    return CreateMaybeMessage<flex_dl_rar>(nullptr);
  }

  flex_dl_rar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_dl_rar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_dl_rar& from);
  void MergeFrom(const flex_dl_rar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_dl_rar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_dl_rar";
  }
  protected:
  explicit flex_dl_rar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controller_5fcommands_2eproto);
    return ::descriptor_table_controller_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRarDciFieldNumber = 3,
    kRntiFieldNumber = 1,
    kGrantFieldNumber = 2,
    kCarrierIndexFieldNumber = 4,
  };
  // optional .protocol.flex_dl_dci rar_dci = 3;
  bool has_rar_dci() const;
  private:
  bool _internal_has_rar_dci() const;
  public:
  void clear_rar_dci();
  const ::protocol::flex_dl_dci& rar_dci() const;
  ::protocol::flex_dl_dci* release_rar_dci();
  ::protocol::flex_dl_dci* mutable_rar_dci();
  void set_allocated_rar_dci(::protocol::flex_dl_dci* rar_dci);
  private:
  const ::protocol::flex_dl_dci& _internal_rar_dci() const;
  ::protocol::flex_dl_dci* _internal_mutable_rar_dci();
  public:
  void unsafe_arena_set_allocated_rar_dci(
      ::protocol::flex_dl_dci* rar_dci);
  ::protocol::flex_dl_dci* unsafe_arena_release_rar_dci();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 grant = 2;
  bool has_grant() const;
  private:
  bool _internal_has_grant() const;
  public:
  void clear_grant();
  ::PROTOBUF_NAMESPACE_ID::uint32 grant() const;
  void set_grant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grant() const;
  void _internal_set_grant(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 carrier_index = 4;
  bool has_carrier_index() const;
  private:
  bool _internal_has_carrier_index() const;
  public:
  void clear_carrier_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index() const;
  void set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carrier_index() const;
  void _internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_dl_rar)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::flex_dl_dci* rar_dci_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grant_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index_;
  friend struct ::TableStruct_controller_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class flex_dl_broadcast PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_dl_broadcast) */ {
 public:
  inline flex_dl_broadcast() : flex_dl_broadcast(nullptr) {}
  virtual ~flex_dl_broadcast();

  flex_dl_broadcast(const flex_dl_broadcast& from);
  flex_dl_broadcast(flex_dl_broadcast&& from) noexcept
    : flex_dl_broadcast() {
    *this = ::std::move(from);
  }

  inline flex_dl_broadcast& operator=(const flex_dl_broadcast& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_dl_broadcast& operator=(flex_dl_broadcast&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_dl_broadcast& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_dl_broadcast* internal_default_instance() {
    return reinterpret_cast<const flex_dl_broadcast*>(
               &_flex_dl_broadcast_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(flex_dl_broadcast& a, flex_dl_broadcast& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_dl_broadcast* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_dl_broadcast* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_dl_broadcast* New() const final {
    return CreateMaybeMessage<flex_dl_broadcast>(nullptr);
  }

  flex_dl_broadcast* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_dl_broadcast>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_dl_broadcast& from);
  void MergeFrom(const flex_dl_broadcast& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_dl_broadcast* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_dl_broadcast";
  }
  protected:
  explicit flex_dl_broadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controller_5fcommands_2eproto);
    return ::descriptor_table_controller_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBroadDciFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIndexFieldNumber = 2,
    kCarrierIndexFieldNumber = 4,
  };
  // optional .protocol.flex_dl_dci broad_dci = 3;
  bool has_broad_dci() const;
  private:
  bool _internal_has_broad_dci() const;
  public:
  void clear_broad_dci();
  const ::protocol::flex_dl_dci& broad_dci() const;
  ::protocol::flex_dl_dci* release_broad_dci();
  ::protocol::flex_dl_dci* mutable_broad_dci();
  void set_allocated_broad_dci(::protocol::flex_dl_dci* broad_dci);
  private:
  const ::protocol::flex_dl_dci& _internal_broad_dci() const;
  ::protocol::flex_dl_dci* _internal_mutable_broad_dci();
  public:
  void unsafe_arena_set_allocated_broad_dci(
      ::protocol::flex_dl_dci* broad_dci);
  ::protocol::flex_dl_dci* unsafe_arena_release_broad_dci();

  // optional uint32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 carrier_index = 4;
  bool has_carrier_index() const;
  private:
  bool _internal_has_carrier_index() const;
  public:
  void clear_carrier_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index() const;
  void set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carrier_index() const;
  void _internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_dl_broadcast)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::flex_dl_dci* broad_dci_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index_;
  friend struct ::TableStruct_controller_5fcommands_2eproto;
};
// -------------------------------------------------------------------

class flex_pdcch_ofdm_sym_count PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_pdcch_ofdm_sym_count) */ {
 public:
  inline flex_pdcch_ofdm_sym_count() : flex_pdcch_ofdm_sym_count(nullptr) {}
  virtual ~flex_pdcch_ofdm_sym_count();

  flex_pdcch_ofdm_sym_count(const flex_pdcch_ofdm_sym_count& from);
  flex_pdcch_ofdm_sym_count(flex_pdcch_ofdm_sym_count&& from) noexcept
    : flex_pdcch_ofdm_sym_count() {
    *this = ::std::move(from);
  }

  inline flex_pdcch_ofdm_sym_count& operator=(const flex_pdcch_ofdm_sym_count& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_pdcch_ofdm_sym_count& operator=(flex_pdcch_ofdm_sym_count&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_pdcch_ofdm_sym_count& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_pdcch_ofdm_sym_count* internal_default_instance() {
    return reinterpret_cast<const flex_pdcch_ofdm_sym_count*>(
               &_flex_pdcch_ofdm_sym_count_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(flex_pdcch_ofdm_sym_count& a, flex_pdcch_ofdm_sym_count& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_pdcch_ofdm_sym_count* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_pdcch_ofdm_sym_count* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_pdcch_ofdm_sym_count* New() const final {
    return CreateMaybeMessage<flex_pdcch_ofdm_sym_count>(nullptr);
  }

  flex_pdcch_ofdm_sym_count* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_pdcch_ofdm_sym_count>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_pdcch_ofdm_sym_count& from);
  void MergeFrom(const flex_pdcch_ofdm_sym_count& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_pdcch_ofdm_sym_count* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_pdcch_ofdm_sym_count";
  }
  protected:
  explicit flex_pdcch_ofdm_sym_count(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_controller_5fcommands_2eproto);
    return ::descriptor_table_controller_5fcommands_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarrierIndexFieldNumber = 1,
    kNumPdcchOfdmSymbolsFieldNumber = 2,
  };
  // optional uint32 carrier_index = 1;
  bool has_carrier_index() const;
  private:
  bool _internal_has_carrier_index() const;
  public:
  void clear_carrier_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index() const;
  void set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carrier_index() const;
  void _internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_pdcch_ofdm_symbols = 2;
  bool has_num_pdcch_ofdm_symbols() const;
  private:
  bool _internal_has_num_pdcch_ofdm_symbols() const;
  public:
  void clear_num_pdcch_ofdm_symbols();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pdcch_ofdm_symbols() const;
  void set_num_pdcch_ofdm_symbols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_pdcch_ofdm_symbols() const;
  void _internal_set_num_pdcch_ofdm_symbols(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_pdcch_ofdm_sym_count)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_pdcch_ofdm_symbols_;
  friend struct ::TableStruct_controller_5fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// flex_dl_data

// optional uint32 rnti = 1;
inline bool flex_dl_data::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_dl_data::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_dl_data::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.rnti)
  return _internal_rnti();
}
inline void flex_dl_data::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rnti_ = value;
}
inline void flex_dl_data::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.rnti)
}

// optional .protocol.flex_dl_dci dl_dci = 2;
inline bool flex_dl_data::_internal_has_dl_dci() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dl_dci_ != nullptr);
  return value;
}
inline bool flex_dl_data::has_dl_dci() const {
  return _internal_has_dl_dci();
}
inline const ::protocol::flex_dl_dci& flex_dl_data::_internal_dl_dci() const {
  const ::protocol::flex_dl_dci* p = dl_dci_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_dl_dci*>(
      &::protocol::_flex_dl_dci_default_instance_);
}
inline const ::protocol::flex_dl_dci& flex_dl_data::dl_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.dl_dci)
  return _internal_dl_dci();
}
inline void flex_dl_data::unsafe_arena_set_allocated_dl_dci(
    ::protocol::flex_dl_dci* dl_dci) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_dci_);
  }
  dl_dci_ = dl_dci;
  if (dl_dci) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_dl_data.dl_dci)
}
inline ::protocol::flex_dl_dci* flex_dl_data::release_dl_dci() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_dci* temp = dl_dci_;
  dl_dci_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_dl_dci* flex_dl_data::unsafe_arena_release_dl_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_data.dl_dci)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_dci* temp = dl_dci_;
  dl_dci_ = nullptr;
  return temp;
}
inline ::protocol::flex_dl_dci* flex_dl_data::_internal_mutable_dl_dci() {
  _has_bits_[0] |= 0x00000001u;
  if (dl_dci_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_dl_dci>(GetArena());
    dl_dci_ = p;
  }
  return dl_dci_;
}
inline ::protocol::flex_dl_dci* flex_dl_data::mutable_dl_dci() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_data.dl_dci)
  return _internal_mutable_dl_dci();
}
inline void flex_dl_data::set_allocated_dl_dci(::protocol::flex_dl_dci* dl_dci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_dci_);
  }
  if (dl_dci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_dci)->GetArena();
    if (message_arena != submessage_arena) {
      dl_dci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dl_dci, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dl_dci_ = dl_dci;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_data.dl_dci)
}

// repeated uint32 ce_bitmap = 3;
inline int flex_dl_data::_internal_ce_bitmap_size() const {
  return ce_bitmap_.size();
}
inline int flex_dl_data::ce_bitmap_size() const {
  return _internal_ce_bitmap_size();
}
inline void flex_dl_data::clear_ce_bitmap() {
  ce_bitmap_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::_internal_ce_bitmap(int index) const {
  return ce_bitmap_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::ce_bitmap(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.ce_bitmap)
  return _internal_ce_bitmap(index);
}
inline void flex_dl_data::set_ce_bitmap(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ce_bitmap_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.ce_bitmap)
}
inline void flex_dl_data::_internal_add_ce_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ce_bitmap_.Add(value);
}
inline void flex_dl_data::add_ce_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ce_bitmap(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_data.ce_bitmap)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_data::_internal_ce_bitmap() const {
  return ce_bitmap_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_data::ce_bitmap() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_data.ce_bitmap)
  return _internal_ce_bitmap();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_data::_internal_mutable_ce_bitmap() {
  return &ce_bitmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_data::mutable_ce_bitmap() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_data.ce_bitmap)
  return _internal_mutable_ce_bitmap();
}

// repeated .protocol.flex_rlc_pdu rlc_pdu = 4;
inline int flex_dl_data::_internal_rlc_pdu_size() const {
  return rlc_pdu_.size();
}
inline int flex_dl_data::rlc_pdu_size() const {
  return _internal_rlc_pdu_size();
}
inline ::protocol::flex_rlc_pdu* flex_dl_data::mutable_rlc_pdu(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_data.rlc_pdu)
  return rlc_pdu_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu >*
flex_dl_data::mutable_rlc_pdu() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_data.rlc_pdu)
  return &rlc_pdu_;
}
inline const ::protocol::flex_rlc_pdu& flex_dl_data::_internal_rlc_pdu(int index) const {
  return rlc_pdu_.Get(index);
}
inline const ::protocol::flex_rlc_pdu& flex_dl_data::rlc_pdu(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.rlc_pdu)
  return _internal_rlc_pdu(index);
}
inline ::protocol::flex_rlc_pdu* flex_dl_data::_internal_add_rlc_pdu() {
  return rlc_pdu_.Add();
}
inline ::protocol::flex_rlc_pdu* flex_dl_data::add_rlc_pdu() {
  // @@protoc_insertion_point(field_add:protocol.flex_dl_data.rlc_pdu)
  return _internal_add_rlc_pdu();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu >&
flex_dl_data::rlc_pdu() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_data.rlc_pdu)
  return rlc_pdu_;
}

// optional uint32 serv_cell_index = 5;
inline bool flex_dl_data::_internal_has_serv_cell_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_dl_data::has_serv_cell_index() const {
  return _internal_has_serv_cell_index();
}
inline void flex_dl_data::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::_internal_serv_cell_index() const {
  return serv_cell_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.serv_cell_index)
  return _internal_serv_cell_index();
}
inline void flex_dl_data::_internal_set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  serv_cell_index_ = value;
}
inline void flex_dl_data::set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serv_cell_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.serv_cell_index)
}

// optional uint32 act_deact_ce = 6;
inline bool flex_dl_data::_internal_has_act_deact_ce() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_dl_data::has_act_deact_ce() const {
  return _internal_has_act_deact_ce();
}
inline void flex_dl_data::clear_act_deact_ce() {
  act_deact_ce_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::_internal_act_deact_ce() const {
  return act_deact_ce_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_data::act_deact_ce() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_data.act_deact_ce)
  return _internal_act_deact_ce();
}
inline void flex_dl_data::_internal_set_act_deact_ce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  act_deact_ce_ = value;
}
inline void flex_dl_data::set_act_deact_ce(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_act_deact_ce(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_data.act_deact_ce)
}

// -------------------------------------------------------------------

// flex_ul_data

// optional uint32 rnti = 1;
inline bool flex_ul_data::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_ul_data::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_ul_data::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_data::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_data::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_data.rnti)
  return _internal_rnti();
}
inline void flex_ul_data::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rnti_ = value;
}
inline void flex_ul_data::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_data.rnti)
}

// optional .protocol.flex_ul_dci ul_dci = 2;
inline bool flex_ul_data::_internal_has_ul_dci() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || ul_dci_ != nullptr);
  return value;
}
inline bool flex_ul_data::has_ul_dci() const {
  return _internal_has_ul_dci();
}
inline const ::protocol::flex_ul_dci& flex_ul_data::_internal_ul_dci() const {
  const ::protocol::flex_ul_dci* p = ul_dci_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_ul_dci*>(
      &::protocol::_flex_ul_dci_default_instance_);
}
inline const ::protocol::flex_ul_dci& flex_ul_data::ul_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_data.ul_dci)
  return _internal_ul_dci();
}
inline void flex_ul_data::unsafe_arena_set_allocated_ul_dci(
    ::protocol::flex_ul_dci* ul_dci) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_dci_);
  }
  ul_dci_ = ul_dci;
  if (ul_dci) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ul_data.ul_dci)
}
inline ::protocol::flex_ul_dci* flex_ul_data::release_ul_dci() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_ul_dci* temp = ul_dci_;
  ul_dci_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_ul_dci* flex_ul_data::unsafe_arena_release_ul_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_ul_data.ul_dci)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_ul_dci* temp = ul_dci_;
  ul_dci_ = nullptr;
  return temp;
}
inline ::protocol::flex_ul_dci* flex_ul_data::_internal_mutable_ul_dci() {
  _has_bits_[0] |= 0x00000001u;
  if (ul_dci_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_ul_dci>(GetArena());
    ul_dci_ = p;
  }
  return ul_dci_;
}
inline ::protocol::flex_ul_dci* flex_ul_data::mutable_ul_dci() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ul_data.ul_dci)
  return _internal_mutable_ul_dci();
}
inline void flex_ul_data::set_allocated_ul_dci(::protocol::flex_ul_dci* ul_dci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_dci_);
  }
  if (ul_dci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_dci)->GetArena();
    if (message_arena != submessage_arena) {
      ul_dci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ul_dci, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ul_dci_ = ul_dci;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ul_data.ul_dci)
}

// -------------------------------------------------------------------

// flex_dl_rar

// optional uint32 rnti = 1;
inline bool flex_dl_rar::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_dl_rar::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_dl_rar::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_rar::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_rar::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.rnti)
  return _internal_rnti();
}
inline void flex_dl_rar::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rnti_ = value;
}
inline void flex_dl_rar::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_rar.rnti)
}

// optional uint32 grant = 2;
inline bool flex_dl_rar::_internal_has_grant() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_dl_rar::has_grant() const {
  return _internal_has_grant();
}
inline void flex_dl_rar::clear_grant() {
  grant_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_rar::_internal_grant() const {
  return grant_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_rar::grant() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.grant)
  return _internal_grant();
}
inline void flex_dl_rar::_internal_set_grant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  grant_ = value;
}
inline void flex_dl_rar::set_grant(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grant(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_rar.grant)
}

// optional .protocol.flex_dl_dci rar_dci = 3;
inline bool flex_dl_rar::_internal_has_rar_dci() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || rar_dci_ != nullptr);
  return value;
}
inline bool flex_dl_rar::has_rar_dci() const {
  return _internal_has_rar_dci();
}
inline const ::protocol::flex_dl_dci& flex_dl_rar::_internal_rar_dci() const {
  const ::protocol::flex_dl_dci* p = rar_dci_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_dl_dci*>(
      &::protocol::_flex_dl_dci_default_instance_);
}
inline const ::protocol::flex_dl_dci& flex_dl_rar::rar_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.rar_dci)
  return _internal_rar_dci();
}
inline void flex_dl_rar::unsafe_arena_set_allocated_rar_dci(
    ::protocol::flex_dl_dci* rar_dci) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rar_dci_);
  }
  rar_dci_ = rar_dci;
  if (rar_dci) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_dl_rar.rar_dci)
}
inline ::protocol::flex_dl_dci* flex_dl_rar::release_rar_dci() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_dci* temp = rar_dci_;
  rar_dci_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_dl_dci* flex_dl_rar::unsafe_arena_release_rar_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_rar.rar_dci)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_dci* temp = rar_dci_;
  rar_dci_ = nullptr;
  return temp;
}
inline ::protocol::flex_dl_dci* flex_dl_rar::_internal_mutable_rar_dci() {
  _has_bits_[0] |= 0x00000001u;
  if (rar_dci_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_dl_dci>(GetArena());
    rar_dci_ = p;
  }
  return rar_dci_;
}
inline ::protocol::flex_dl_dci* flex_dl_rar::mutable_rar_dci() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_rar.rar_dci)
  return _internal_mutable_rar_dci();
}
inline void flex_dl_rar::set_allocated_rar_dci(::protocol::flex_dl_dci* rar_dci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rar_dci_);
  }
  if (rar_dci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rar_dci)->GetArena();
    if (message_arena != submessage_arena) {
      rar_dci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rar_dci, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  rar_dci_ = rar_dci;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_rar.rar_dci)
}

// optional uint32 carrier_index = 4;
inline bool flex_dl_rar::_internal_has_carrier_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_dl_rar::has_carrier_index() const {
  return _internal_has_carrier_index();
}
inline void flex_dl_rar::clear_carrier_index() {
  carrier_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_rar::_internal_carrier_index() const {
  return carrier_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_rar::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_rar.carrier_index)
  return _internal_carrier_index();
}
inline void flex_dl_rar::_internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  carrier_index_ = value;
}
inline void flex_dl_rar::set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carrier_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_rar.carrier_index)
}

// -------------------------------------------------------------------

// flex_dl_broadcast

// optional uint32 type = 1;
inline bool flex_dl_broadcast::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_dl_broadcast::has_type() const {
  return _internal_has_type();
}
inline void flex_dl_broadcast::clear_type() {
  type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_broadcast::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_broadcast::type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.type)
  return _internal_type();
}
inline void flex_dl_broadcast::_internal_set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void flex_dl_broadcast::set_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_broadcast.type)
}

// optional uint32 index = 2;
inline bool flex_dl_broadcast::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_dl_broadcast::has_index() const {
  return _internal_has_index();
}
inline void flex_dl_broadcast::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_broadcast::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_broadcast::index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.index)
  return _internal_index();
}
inline void flex_dl_broadcast::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  index_ = value;
}
inline void flex_dl_broadcast::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_broadcast.index)
}

// optional .protocol.flex_dl_dci broad_dci = 3;
inline bool flex_dl_broadcast::_internal_has_broad_dci() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || broad_dci_ != nullptr);
  return value;
}
inline bool flex_dl_broadcast::has_broad_dci() const {
  return _internal_has_broad_dci();
}
inline const ::protocol::flex_dl_dci& flex_dl_broadcast::_internal_broad_dci() const {
  const ::protocol::flex_dl_dci* p = broad_dci_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_dl_dci*>(
      &::protocol::_flex_dl_dci_default_instance_);
}
inline const ::protocol::flex_dl_dci& flex_dl_broadcast::broad_dci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.broad_dci)
  return _internal_broad_dci();
}
inline void flex_dl_broadcast::unsafe_arena_set_allocated_broad_dci(
    ::protocol::flex_dl_dci* broad_dci) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broad_dci_);
  }
  broad_dci_ = broad_dci;
  if (broad_dci) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_dl_broadcast.broad_dci)
}
inline ::protocol::flex_dl_dci* flex_dl_broadcast::release_broad_dci() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_dci* temp = broad_dci_;
  broad_dci_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_dl_dci* flex_dl_broadcast::unsafe_arena_release_broad_dci() {
  // @@protoc_insertion_point(field_release:protocol.flex_dl_broadcast.broad_dci)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_dci* temp = broad_dci_;
  broad_dci_ = nullptr;
  return temp;
}
inline ::protocol::flex_dl_dci* flex_dl_broadcast::_internal_mutable_broad_dci() {
  _has_bits_[0] |= 0x00000001u;
  if (broad_dci_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_dl_dci>(GetArena());
    broad_dci_ = p;
  }
  return broad_dci_;
}
inline ::protocol::flex_dl_dci* flex_dl_broadcast::mutable_broad_dci() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_dl_broadcast.broad_dci)
  return _internal_mutable_broad_dci();
}
inline void flex_dl_broadcast::set_allocated_broad_dci(::protocol::flex_dl_dci* broad_dci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(broad_dci_);
  }
  if (broad_dci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(broad_dci)->GetArena();
    if (message_arena != submessage_arena) {
      broad_dci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, broad_dci, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  broad_dci_ = broad_dci;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_broadcast.broad_dci)
}

// optional uint32 carrier_index = 4;
inline bool flex_dl_broadcast::_internal_has_carrier_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_dl_broadcast::has_carrier_index() const {
  return _internal_has_carrier_index();
}
inline void flex_dl_broadcast::clear_carrier_index() {
  carrier_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_broadcast::_internal_carrier_index() const {
  return carrier_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_broadcast::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_broadcast.carrier_index)
  return _internal_carrier_index();
}
inline void flex_dl_broadcast::_internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  carrier_index_ = value;
}
inline void flex_dl_broadcast::set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carrier_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_broadcast.carrier_index)
}

// -------------------------------------------------------------------

// flex_pdcch_ofdm_sym_count

// optional uint32 carrier_index = 1;
inline bool flex_pdcch_ofdm_sym_count::_internal_has_carrier_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_pdcch_ofdm_sym_count::has_carrier_index() const {
  return _internal_has_carrier_index();
}
inline void flex_pdcch_ofdm_sym_count::clear_carrier_index() {
  carrier_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_pdcch_ofdm_sym_count::_internal_carrier_index() const {
  return carrier_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_pdcch_ofdm_sym_count::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcch_ofdm_sym_count.carrier_index)
  return _internal_carrier_index();
}
inline void flex_pdcch_ofdm_sym_count::_internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  carrier_index_ = value;
}
inline void flex_pdcch_ofdm_sym_count::set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carrier_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_pdcch_ofdm_sym_count.carrier_index)
}

// optional uint32 num_pdcch_ofdm_symbols = 2;
inline bool flex_pdcch_ofdm_sym_count::_internal_has_num_pdcch_ofdm_symbols() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_pdcch_ofdm_sym_count::has_num_pdcch_ofdm_symbols() const {
  return _internal_has_num_pdcch_ofdm_symbols();
}
inline void flex_pdcch_ofdm_sym_count::clear_num_pdcch_ofdm_symbols() {
  num_pdcch_ofdm_symbols_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_pdcch_ofdm_sym_count::_internal_num_pdcch_ofdm_symbols() const {
  return num_pdcch_ofdm_symbols_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_pdcch_ofdm_sym_count::num_pdcch_ofdm_symbols() const {
  // @@protoc_insertion_point(field_get:protocol.flex_pdcch_ofdm_sym_count.num_pdcch_ofdm_symbols)
  return _internal_num_pdcch_ofdm_symbols();
}
inline void flex_pdcch_ofdm_sym_count::_internal_set_num_pdcch_ofdm_symbols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  num_pdcch_ofdm_symbols_ = value;
}
inline void flex_pdcch_ofdm_sym_count::set_num_pdcch_ofdm_symbols(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_pdcch_ofdm_symbols(value);
  // @@protoc_insertion_point(field_set:protocol.flex_pdcch_ofdm_sym_count.num_pdcch_ofdm_symbols)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::flex_broadcast_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_broadcast_type>() {
  return ::protocol::flex_broadcast_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_controller_5fcommands_2eproto
