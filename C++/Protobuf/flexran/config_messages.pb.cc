// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_messages.proto

#include "config_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_cqi_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_drx_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_lc_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_measurement_info_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_plmn_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_s1ap_mme_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_scell_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_si_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_slice_config_config_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_sps_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_sr_config_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ue_capabilities_config_5fcommon_2eproto;
namespace protocol {
class flex_cell_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_cell_config> _instance;
} _flex_cell_config_default_instance_;
class flex_slice_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_slice_config> _instance;
} _flex_slice_config_default_instance_;
class flex_ue_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ue_config> _instance;
} _flex_ue_config_default_instance_;
class flex_lc_ue_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_lc_ue_config> _instance;
} _flex_lc_ue_config_default_instance_;
class flex_s1ap_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_s1ap_config> _instance;
} _flex_s1ap_config_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_cell_config_config_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_cell_config_default_instance_;
    new (ptr) ::protocol::flex_cell_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_cell_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_cell_config_config_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_flex_cell_config_config_5fmessages_2eproto}, {
      &scc_info_flex_si_config_config_5fcommon_2eproto.base,
      &scc_info_flex_plmn_config_5fcommon_2eproto.base,
      &scc_info_flex_slice_config_config_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_lc_ue_config_config_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_lc_ue_config_default_instance_;
    new (ptr) ::protocol::flex_lc_ue_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_lc_ue_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_lc_ue_config_config_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_lc_ue_config_config_5fmessages_2eproto}, {
      &scc_info_flex_lc_config_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_s1ap_config_config_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_s1ap_config_default_instance_;
    new (ptr) ::protocol::flex_s1ap_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_s1ap_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_s1ap_config_config_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_s1ap_config_config_5fmessages_2eproto}, {
      &scc_info_flex_s1ap_mme_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_slice_config_config_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_slice_config_default_instance_;
    new (ptr) ::protocol::flex_slice_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_slice_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_slice_config_config_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_slice_config_config_5fmessages_2eproto}, {
      &scc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_ue_config_config_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ue_config_default_instance_;
    new (ptr) ::protocol::flex_ue_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ue_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_flex_ue_config_config_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_flex_ue_config_config_5fmessages_2eproto}, {
      &scc_info_flex_drx_config_config_5fcommon_2eproto.base,
      &scc_info_flex_sps_config_config_5fcommon_2eproto.base,
      &scc_info_flex_sr_config_config_5fcommon_2eproto.base,
      &scc_info_flex_cqi_config_config_5fcommon_2eproto.base,
      &scc_info_flex_ue_capabilities_config_5fcommon_2eproto.base,
      &scc_info_flex_scell_config_config_5fcommon_2eproto.base,
      &scc_info_flex_measurement_info_config_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_5fmessages_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_config_5fmessages_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, phy_cell_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, pusch_hopping_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, hopping_mode_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, n_sb_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, phich_resource_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, phich_duration_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, init_nr_pdcch_ofdm_sym_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, si_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, dl_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, ul_bandwidth_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, ul_cyclic_prefix_length_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, dl_cyclic_prefix_length_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, antenna_ports_count_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, duplex_mode_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, subframe_assignment_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, special_subframe_patterns_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, mbsfn_subframe_config_rfperiod_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, mbsfn_subframe_config_rfoffset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, mbsfn_subframe_config_sfalloc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, prach_config_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, prach_freq_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, ra_response_window_size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, mac_contention_resolution_timer_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, max_harq_msg3tx_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, n1pucch_an_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, deltapucch_shift_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, nrb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, srs_subframe_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, srs_bw_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, srs_mac_up_pts_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, enable_64qam_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, carrier_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, dl_freq_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, ul_freq_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, eutra_band_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, dl_pdsch_power_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, ul_pusch_power_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, plmn_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, slice_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_config, x2_ho_net_control_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  ~0u,
  1,
  35,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_config, dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_config, ul_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, drx_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, time_alignment_timer_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, meas_gap_config_pattern_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, meas_gap_config_sf_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, sps_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, sr_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, cqi_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, transmission_mode_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, ue_aggregated_max_bitrate_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, ue_aggregated_max_bitrate_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, capabilities_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, ue_transmission_antenna_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, tti_bundling_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, max_harq_tx_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, beta_offset_ack_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, beta_offset_ri_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, beta_offset_cqi_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, ack_nack_simultaneous_trans_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, simultaneous_ack_nack_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, aperiodic_cqi_rep_mode_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, tdd_ack_nack_feedback_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, ack_nack_repetition_factor_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, extended_bsr_size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, ca_support_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, cross_carrier_sched_support_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, pcell_carrier_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, scell_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, scell_deactivation_timer_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, imsi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, dl_slice_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, ul_slice_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config, info_),
  6,
  0,
  7,
  8,
  9,
  1,
  2,
  3,
  12,
  10,
  11,
  4,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  ~0u,
  29,
  28,
  30,
  31,
  5,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_ue_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_ue_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_ue_config, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_ue_config, lc_config_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_config, pending_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_config, connected_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_config, enb_s1_ip_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_config, enb_name_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_config, mme_),
  2,
  3,
  0,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 45, sizeof(::protocol::flex_cell_config)},
  { 85, 92, sizeof(::protocol::flex_slice_config)},
  { 94, 132, sizeof(::protocol::flex_ue_config)},
  { 165, 172, sizeof(::protocol::flex_lc_ue_config)},
  { 174, 184, sizeof(::protocol::flex_s1ap_config)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_cell_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_slice_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ue_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_lc_ue_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_s1ap_config_default_instance_),
};

const char descriptor_table_protodef_config_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025config_messages.proto\022\010protocol\032\023confi"
  "g_common.proto\"\351\010\n\020flex_cell_config\022\023\n\013p"
  "hy_cell_id\030\001 \001(\r\022\034\n\024pusch_hopping_offset"
  "\030\003 \001(\r\022\024\n\014hopping_mode\030\004 \001(\r\022\014\n\004n_sb\030\005 \001"
  "(\r\022\026\n\016phich_resource\030\006 \001(\r\022\026\n\016phich_dura"
  "tion\030\007 \001(\r\022\036\n\026init_nr_PDCCH_OFDM_sym\030\010 \001"
  "(\r\022+\n\tsi_config\030\t \001(\0132\030.protocol.flex_si"
  "_config\022\024\n\014dl_bandwidth\030\n \001(\r\022\024\n\014ul_band"
  "width\030\013 \001(\r\022\037\n\027ul_cyclic_prefix_length\030\r"
  " \001(\r\022\037\n\027dl_cyclic_prefix_length\030\016 \001(\r\022\033\n"
  "\023antenna_ports_count\030\017 \001(\r\022\023\n\013duplex_mod"
  "e\030\020 \001(\r\022\033\n\023subframe_assignment\030\021 \001(\r\022!\n\031"
  "special_subframe_patterns\030\022 \001(\r\022&\n\036mbsfn"
  "_subframe_config_rfperiod\030\023 \003(\r\022&\n\036mbsfn"
  "_subframe_config_rfoffset\030\024 \003(\r\022%\n\035mbsfn"
  "_subframe_config_sfalloc\030\025 \003(\r\022\032\n\022prach_"
  "config_index\030\026 \001(\r\022\031\n\021prach_freq_offset\030"
  "\027 \001(\r\022\037\n\027ra_response_window_size\030\030 \001(\r\022\'"
  "\n\037mac_contention_resolution_timer\030\031 \001(\r\022"
  "\027\n\017max_HARQ_Msg3Tx\030\032 \001(\r\022\022\n\nn1PUCCH_AN\030\033"
  " \001(\r\022\030\n\020deltaPUCCH_shift\030\034 \001(\r\022\017\n\007nRB_cq"
  "i\030\035 \001(\r\022\033\n\023srs_subframe_config\030\036 \001(\r\022\025\n\r"
  "srs_bw_config\030\037 \001(\r\022\026\n\016srs_mac_up_pts\030  "
  "\001(\r\022\024\n\014enable_64QAM\030! \001(\r\022\025\n\rcarrier_ind"
  "ex\030\" \001(\r\022\017\n\007dl_freq\030# \001(\r\022\017\n\007ul_freq\030$ \001"
  "(\r\022\022\n\neutra_band\030% \001(\r\022\026\n\016dl_pdsch_power"
  "\030& \001(\005\022\026\n\016ul_pusch_power\030\' \001(\005\022$\n\007plmn_i"
  "d\030( \003(\0132\023.protocol.flex_plmn\0221\n\014slice_co"
  "nfig\030* \001(\0132\033.protocol.flex_slice_config\022"
  "\031\n\021x2_ho_net_control\030+ \001(\010\"q\n\021flex_slice"
  "_config\022-\n\002dl\030\006 \001(\0132!.protocol.flex_slic"
  "e_dl_ul_config\022-\n\002ul\030\007 \001(\0132!.protocol.fl"
  "ex_slice_dl_ul_config\"\327\010\n\016flex_ue_config"
  "\022\014\n\004rnti\030\001 \001(\r\022-\n\ndrx_config\030\002 \001(\0132\031.pro"
  "tocol.flex_drx_config\022\034\n\024time_alignment_"
  "timer\030\003 \001(\r\022\037\n\027meas_gap_config_pattern\030\004"
  " \001(\r\022!\n\031meas_gap_config_sf_offset\030\005 \001(\r\022"
  "-\n\nsps_config\030\006 \001(\0132\031.protocol.flex_sps_"
  "config\022+\n\tsr_config\030\007 \001(\0132\030.protocol.fle"
  "x_sr_config\022-\n\ncqi_config\030\010 \001(\0132\031.protoc"
  "ol.flex_cqi_config\022\031\n\021transmission_mode\030"
  "\t \001(\r\022$\n\034ue_aggregated_max_bitrate_UL\030\n "
  "\001(\004\022$\n\034ue_aggregated_max_bitrate_DL\030\013 \001("
  "\004\0224\n\014capabilities\030\014 \001(\0132\036.protocol.flex_"
  "ue_capabilities\022\037\n\027ue_transmission_anten"
  "na\030\r \001(\r\022\024\n\014tti_bundling\030\016 \001(\r\022\023\n\013max_HA"
  "RQ_tx\030\017 \001(\r\022\035\n\025beta_offset_ACK_index\030\020 \001"
  "(\r\022\034\n\024beta_offset_RI_index\030\021 \001(\r\022\035\n\025beta"
  "_offset_CQI_index\030\022 \001(\r\022#\n\033ack_nack_simu"
  "ltaneous_trans\030\023 \001(\r\022!\n\031simultaneous_ack"
  "_nack_cqi\030\024 \001(\r\022\036\n\026aperiodic_cqi_rep_mod"
  "e\030\025 \001(\r\022\035\n\025tdd_ack_nack_feedback\030\026 \001(\r\022\""
  "\n\032ack_nack_repetition_factor\030\027 \001(\r\022\031\n\021ex"
  "tended_bsr_size\030\030 \001(\r\022\022\n\nca_support\030\031 \001("
  "\r\022#\n\033cross_carrier_sched_support\030\032 \001(\r\022\033"
  "\n\023pcell_carrier_index\030\033 \001(\r\0221\n\014scell_con"
  "fig\030\034 \003(\0132\033.protocol.flex_scell_config\022 "
  "\n\030scell_deactivation_timer\030\035 \001(\r\022\014\n\004imsi"
  "\030\036 \001(\004\022\023\n\013dl_slice_id\030\037 \001(\r\022\023\n\013ul_slice_"
  "id\030  \001(\r\022-\n\004info\030! \001(\0132\037.protocol.flex_m"
  "easurement_info\"N\n\021flex_lc_ue_config\022\014\n\004"
  "rnti\030\001 \001(\r\022+\n\tlc_config\030\002 \003(\0132\030.protocol"
  ".flex_lc_config\"\201\001\n\020flex_s1ap_config\022\017\n\007"
  "pending\030\001 \001(\r\022\021\n\tconnected\030\002 \001(\r\022\021\n\tenb_"
  "s1_ip\030\003 \001(\t\022\020\n\010enb_name\030\004 \001(\t\022$\n\003mme\030\005 \003"
  "(\0132\027.protocol.flex_s1ap_mme"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_5fmessages_2eproto_deps[1] = {
  &::descriptor_table_config_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_5fmessages_2eproto_sccs[5] = {
  &scc_info_flex_cell_config_config_5fmessages_2eproto.base,
  &scc_info_flex_lc_ue_config_config_5fmessages_2eproto.base,
  &scc_info_flex_s1ap_config_config_5fmessages_2eproto.base,
  &scc_info_flex_slice_config_config_5fmessages_2eproto.base,
  &scc_info_flex_ue_config_config_5fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fmessages_2eproto = {
  false, false, descriptor_table_protodef_config_5fmessages_2eproto, "config_messages.proto", 2627,
  &descriptor_table_config_5fmessages_2eproto_once, descriptor_table_config_5fmessages_2eproto_sccs, descriptor_table_config_5fmessages_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_config_5fmessages_2eproto::offsets,
  file_level_metadata_config_5fmessages_2eproto, 5, file_level_enum_descriptors_config_5fmessages_2eproto, file_level_service_descriptors_config_5fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_5fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_5fmessages_2eproto)), true);
namespace protocol {

// ===================================================================

void flex_cell_config::InitAsDefaultInstance() {
  ::protocol::_flex_cell_config_default_instance_._instance.get_mutable()->si_config_ = const_cast< ::protocol::flex_si_config*>(
      ::protocol::flex_si_config::internal_default_instance());
  ::protocol::_flex_cell_config_default_instance_._instance.get_mutable()->slice_config_ = const_cast< ::protocol::flex_slice_config*>(
      ::protocol::flex_slice_config::internal_default_instance());
}
class flex_cell_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_cell_config>()._has_bits_);
  static void set_has_phy_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pusch_hopping_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hopping_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_n_sb(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_phich_resource(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_phich_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_init_nr_pdcch_ofdm_sym(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::protocol::flex_si_config& si_config(const flex_cell_config* msg);
  static void set_has_si_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dl_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ul_bandwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ul_cyclic_prefix_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_dl_cyclic_prefix_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_antenna_ports_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_duplex_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_subframe_assignment(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_special_subframe_patterns(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_prach_config_index(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_prach_freq_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ra_response_window_size(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_mac_contention_resolution_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_max_harq_msg3tx(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_n1pucch_an(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_deltapucch_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_nrb_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_srs_subframe_config(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_srs_bw_config(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_srs_mac_up_pts(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_enable_64qam(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_dl_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ul_freq(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_eutra_band(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_dl_pdsch_power(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_ul_pusch_power(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::protocol::flex_slice_config& slice_config(const flex_cell_config* msg);
  static void set_has_slice_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_x2_ho_net_control(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
};

const ::protocol::flex_si_config&
flex_cell_config::_Internal::si_config(const flex_cell_config* msg) {
  return *msg->si_config_;
}
const ::protocol::flex_slice_config&
flex_cell_config::_Internal::slice_config(const flex_cell_config* msg) {
  return *msg->slice_config_;
}
void flex_cell_config::clear_si_config() {
  if (si_config_ != nullptr) si_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_cell_config::clear_plmn_id() {
  plmn_id_.Clear();
}
flex_cell_config::flex_cell_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mbsfn_subframe_config_rfperiod_(arena),
  mbsfn_subframe_config_rfoffset_(arena),
  mbsfn_subframe_config_sfalloc_(arena),
  plmn_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_cell_config)
}
flex_cell_config::flex_cell_config(const flex_cell_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mbsfn_subframe_config_rfperiod_(from.mbsfn_subframe_config_rfperiod_),
      mbsfn_subframe_config_rfoffset_(from.mbsfn_subframe_config_rfoffset_),
      mbsfn_subframe_config_sfalloc_(from.mbsfn_subframe_config_sfalloc_),
      plmn_id_(from.plmn_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_si_config()) {
    si_config_ = new ::protocol::flex_si_config(*from.si_config_);
  } else {
    si_config_ = nullptr;
  }
  if (from._internal_has_slice_config()) {
    slice_config_ = new ::protocol::flex_slice_config(*from.slice_config_);
  } else {
    slice_config_ = nullptr;
  }
  ::memcpy(&phy_cell_id_, &from.phy_cell_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&x2_ho_net_control_) -
    reinterpret_cast<char*>(&phy_cell_id_)) + sizeof(x2_ho_net_control_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_config)
}

void flex_cell_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_cell_config_config_5fmessages_2eproto.base);
  ::memset(&si_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&x2_ho_net_control_) -
      reinterpret_cast<char*>(&si_config_)) + sizeof(x2_ho_net_control_));
}

flex_cell_config::~flex_cell_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_cell_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete si_config_;
  if (this != internal_default_instance()) delete slice_config_;
}

void flex_cell_config::ArenaDtor(void* object) {
  flex_cell_config* _this = reinterpret_cast< flex_cell_config* >(object);
  (void)_this;
}
void flex_cell_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_cell_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_cell_config& flex_cell_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_cell_config_config_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_cell_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mbsfn_subframe_config_rfperiod_.Clear();
  mbsfn_subframe_config_rfoffset_.Clear();
  mbsfn_subframe_config_sfalloc_.Clear();
  plmn_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(si_config_ != nullptr);
      si_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(slice_config_ != nullptr);
      slice_config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&phy_cell_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phich_duration_) -
        reinterpret_cast<char*>(&phy_cell_id_)) + sizeof(phich_duration_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&init_nr_pdcch_ofdm_sym_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subframe_assignment_) -
        reinterpret_cast<char*>(&init_nr_pdcch_ofdm_sym_)) + sizeof(subframe_assignment_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&special_subframe_patterns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deltapucch_shift_) -
        reinterpret_cast<char*>(&special_subframe_patterns_)) + sizeof(deltapucch_shift_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&nrb_cqi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ul_freq_) -
        reinterpret_cast<char*>(&nrb_cqi_)) + sizeof(ul_freq_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&eutra_band_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&x2_ho_net_control_) -
        reinterpret_cast<char*>(&eutra_band_)) + sizeof(x2_ho_net_control_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_cell_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 phy_cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_phy_cell_id(&_has_bits_);
          phy_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pusch_hopping_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pusch_hopping_offset(&_has_bits_);
          pusch_hopping_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hopping_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_hopping_mode(&_has_bits_);
          hopping_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 n_sb = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_n_sb(&_has_bits_);
          n_sb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 phich_resource = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_phich_resource(&_has_bits_);
          phich_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 phich_duration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_phich_duration(&_has_bits_);
          phich_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_init_nr_pdcch_ofdm_sym(&_has_bits_);
          init_nr_pdcch_ofdm_sym_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_si_config si_config = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_si_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dl_bandwidth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_dl_bandwidth(&_has_bits_);
          dl_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ul_bandwidth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ul_bandwidth(&_has_bits_);
          ul_bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ul_cyclic_prefix_length = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ul_cyclic_prefix_length(&_has_bits_);
          ul_cyclic_prefix_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dl_cyclic_prefix_length = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_dl_cyclic_prefix_length(&_has_bits_);
          dl_cyclic_prefix_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 antenna_ports_count = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_antenna_ports_count(&_has_bits_);
          antenna_ports_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 duplex_mode = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_duplex_mode(&_has_bits_);
          duplex_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 subframe_assignment = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_subframe_assignment(&_has_bits_);
          subframe_assignment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 special_subframe_patterns = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_special_subframe_patterns(&_has_bits_);
          special_subframe_patterns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mbsfn_subframe_config_rfperiod(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<152>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mbsfn_subframe_config_rfperiod(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mbsfn_subframe_config_rfoffset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<160>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mbsfn_subframe_config_rfoffset(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_mbsfn_subframe_config_sfalloc(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<168>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mbsfn_subframe_config_sfalloc(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prach_config_index = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_prach_config_index(&_has_bits_);
          prach_config_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prach_freq_offset = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_prach_freq_offset(&_has_bits_);
          prach_freq_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ra_response_window_size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_ra_response_window_size(&_has_bits_);
          ra_response_window_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mac_contention_resolution_timer = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_mac_contention_resolution_timer(&_has_bits_);
          mac_contention_resolution_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_HARQ_Msg3Tx = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_max_harq_msg3tx(&_has_bits_);
          max_harq_msg3tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 n1PUCCH_AN = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_n1pucch_an(&_has_bits_);
          n1pucch_an_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 deltaPUCCH_shift = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 224)) {
          _Internal::set_has_deltapucch_shift(&_has_bits_);
          deltapucch_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nRB_cqi = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_nrb_cqi(&_has_bits_);
          nrb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 srs_subframe_config = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_srs_subframe_config(&_has_bits_);
          srs_subframe_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 srs_bw_config = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_srs_bw_config(&_has_bits_);
          srs_bw_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 srs_mac_up_pts = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_srs_mac_up_pts(&_has_bits_);
          srs_mac_up_pts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enable_64QAM = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_enable_64qam(&_has_bits_);
          enable_64qam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 carrier_index = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_carrier_index(&_has_bits_);
          carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dl_freq = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dl_freq(&_has_bits_);
          dl_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ul_freq = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ul_freq(&_has_bits_);
          ul_freq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 eutra_band = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_eutra_band(&_has_bits_);
          eutra_band_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dl_pdsch_power = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_dl_pdsch_power(&_has_bits_);
          dl_pdsch_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 ul_pusch_power = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_ul_pusch_power(&_has_bits_);
          ul_pusch_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_plmn plmn_id = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_plmn_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<322>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_slice_config slice_config = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool x2_ho_net_control = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_x2_ho_net_control(&_has_bits_);
          x2_ho_net_control_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_cell_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phy_cell_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_phy_cell_id(), target);
  }

  // optional uint32 pusch_hopping_offset = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pusch_hopping_offset(), target);
  }

  // optional uint32 hopping_mode = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_hopping_mode(), target);
  }

  // optional uint32 n_sb = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_n_sb(), target);
  }

  // optional uint32 phich_resource = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_phich_resource(), target);
  }

  // optional uint32 phich_duration = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_phich_duration(), target);
  }

  // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_init_nr_pdcch_ofdm_sym(), target);
  }

  // optional .protocol.flex_si_config si_config = 9;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::si_config(this), target, stream);
  }

  // optional uint32 dl_bandwidth = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_dl_bandwidth(), target);
  }

  // optional uint32 ul_bandwidth = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ul_bandwidth(), target);
  }

  // optional uint32 ul_cyclic_prefix_length = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ul_cyclic_prefix_length(), target);
  }

  // optional uint32 dl_cyclic_prefix_length = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_dl_cyclic_prefix_length(), target);
  }

  // optional uint32 antenna_ports_count = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_antenna_ports_count(), target);
  }

  // optional uint32 duplex_mode = 16;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_duplex_mode(), target);
  }

  // optional uint32 subframe_assignment = 17;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_subframe_assignment(), target);
  }

  // optional uint32 special_subframe_patterns = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_special_subframe_patterns(), target);
  }

  // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
  for (int i = 0, n = this->_internal_mbsfn_subframe_config_rfperiod_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_mbsfn_subframe_config_rfperiod(i), target);
  }

  // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
  for (int i = 0, n = this->_internal_mbsfn_subframe_config_rfoffset_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_mbsfn_subframe_config_rfoffset(i), target);
  }

  // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
  for (int i = 0, n = this->_internal_mbsfn_subframe_config_sfalloc_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_mbsfn_subframe_config_sfalloc(i), target);
  }

  // optional uint32 prach_config_index = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_prach_config_index(), target);
  }

  // optional uint32 prach_freq_offset = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_prach_freq_offset(), target);
  }

  // optional uint32 ra_response_window_size = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_ra_response_window_size(), target);
  }

  // optional uint32 mac_contention_resolution_timer = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_mac_contention_resolution_timer(), target);
  }

  // optional uint32 max_HARQ_Msg3Tx = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_max_harq_msg3tx(), target);
  }

  // optional uint32 n1PUCCH_AN = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_n1pucch_an(), target);
  }

  // optional uint32 deltaPUCCH_shift = 28;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(28, this->_internal_deltapucch_shift(), target);
  }

  // optional uint32 nRB_cqi = 29;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_nrb_cqi(), target);
  }

  // optional uint32 srs_subframe_config = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(30, this->_internal_srs_subframe_config(), target);
  }

  // optional uint32 srs_bw_config = 31;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_srs_bw_config(), target);
  }

  // optional uint32 srs_mac_up_pts = 32;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_srs_mac_up_pts(), target);
  }

  // optional uint32 enable_64QAM = 33;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_enable_64qam(), target);
  }

  // optional uint32 carrier_index = 34;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(34, this->_internal_carrier_index(), target);
  }

  // optional uint32 dl_freq = 35;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(35, this->_internal_dl_freq(), target);
  }

  // optional uint32 ul_freq = 36;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(36, this->_internal_ul_freq(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional uint32 eutra_band = 37;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(37, this->_internal_eutra_band(), target);
  }

  // optional int32 dl_pdsch_power = 38;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(38, this->_internal_dl_pdsch_power(), target);
  }

  // optional int32 ul_pusch_power = 39;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(39, this->_internal_ul_pusch_power(), target);
  }

  // repeated .protocol.flex_plmn plmn_id = 40;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plmn_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, this->_internal_plmn_id(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_config slice_config = 42;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        42, _Internal::slice_config(this), target, stream);
  }

  cached_has_bits = _has_bits_[1];
  // optional bool x2_ho_net_control = 43;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(43, this->_internal_x2_ho_net_control(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_config)
  return target;
}

size_t flex_cell_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mbsfn_subframe_config_rfperiod_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mbsfn_subframe_config_rfperiod_size());
    total_size += data_size;
  }

  // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mbsfn_subframe_config_rfoffset_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mbsfn_subframe_config_rfoffset_size());
    total_size += data_size;
  }

  // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mbsfn_subframe_config_sfalloc_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mbsfn_subframe_config_sfalloc_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_plmn plmn_id = 40;
  total_size += 2UL * this->_internal_plmn_id_size();
  for (const auto& msg : this->plmn_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .protocol.flex_si_config si_config = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *si_config_);
    }

    // optional .protocol.flex_slice_config slice_config = 42;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *slice_config_);
    }

    // optional uint32 phy_cell_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phy_cell_id());
    }

    // optional uint32 pusch_hopping_offset = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pusch_hopping_offset());
    }

    // optional uint32 hopping_mode = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hopping_mode());
    }

    // optional uint32 n_sb = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_n_sb());
    }

    // optional uint32 phich_resource = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phich_resource());
    }

    // optional uint32 phich_duration = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phich_duration());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_init_nr_pdcch_ofdm_sym());
    }

    // optional uint32 dl_bandwidth = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dl_bandwidth());
    }

    // optional uint32 ul_bandwidth = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ul_bandwidth());
    }

    // optional uint32 ul_cyclic_prefix_length = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ul_cyclic_prefix_length());
    }

    // optional uint32 dl_cyclic_prefix_length = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dl_cyclic_prefix_length());
    }

    // optional uint32 antenna_ports_count = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_antenna_ports_count());
    }

    // optional uint32 duplex_mode = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_duplex_mode());
    }

    // optional uint32 subframe_assignment = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_subframe_assignment());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 special_subframe_patterns = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_special_subframe_patterns());
    }

    // optional uint32 prach_config_index = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prach_config_index());
    }

    // optional uint32 prach_freq_offset = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prach_freq_offset());
    }

    // optional uint32 ra_response_window_size = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ra_response_window_size());
    }

    // optional uint32 mac_contention_resolution_timer = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mac_contention_resolution_timer());
    }

    // optional uint32 max_HARQ_Msg3Tx = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_harq_msg3tx());
    }

    // optional uint32 n1PUCCH_AN = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_n1pucch_an());
    }

    // optional uint32 deltaPUCCH_shift = 28;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_deltapucch_shift());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 nRB_cqi = 29;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_nrb_cqi());
    }

    // optional uint32 srs_subframe_config = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_srs_subframe_config());
    }

    // optional uint32 srs_bw_config = 31;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_srs_bw_config());
    }

    // optional uint32 srs_mac_up_pts = 32;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_srs_mac_up_pts());
    }

    // optional uint32 enable_64QAM = 33;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enable_64qam());
    }

    // optional uint32 carrier_index = 34;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_carrier_index());
    }

    // optional uint32 dl_freq = 35;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dl_freq());
    }

    // optional uint32 ul_freq = 36;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ul_freq());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 eutra_band = 37;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_eutra_band());
    }

    // optional int32 dl_pdsch_power = 38;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dl_pdsch_power());
    }

    // optional int32 ul_pusch_power = 39;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_ul_pusch_power());
    }

    // optional bool x2_ho_net_control = 43;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_cell_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_cell_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_config)
    MergeFrom(*source);
  }
}

void flex_cell_config::MergeFrom(const flex_cell_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mbsfn_subframe_config_rfperiod_.MergeFrom(from.mbsfn_subframe_config_rfperiod_);
  mbsfn_subframe_config_rfoffset_.MergeFrom(from.mbsfn_subframe_config_rfoffset_);
  mbsfn_subframe_config_sfalloc_.MergeFrom(from.mbsfn_subframe_config_sfalloc_);
  plmn_id_.MergeFrom(from.plmn_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_si_config()->::protocol::flex_si_config::MergeFrom(from._internal_si_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_slice_config()->::protocol::flex_slice_config::MergeFrom(from._internal_slice_config());
    }
    if (cached_has_bits & 0x00000004u) {
      phy_cell_id_ = from.phy_cell_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      pusch_hopping_offset_ = from.pusch_hopping_offset_;
    }
    if (cached_has_bits & 0x00000010u) {
      hopping_mode_ = from.hopping_mode_;
    }
    if (cached_has_bits & 0x00000020u) {
      n_sb_ = from.n_sb_;
    }
    if (cached_has_bits & 0x00000040u) {
      phich_resource_ = from.phich_resource_;
    }
    if (cached_has_bits & 0x00000080u) {
      phich_duration_ = from.phich_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      init_nr_pdcch_ofdm_sym_ = from.init_nr_pdcch_ofdm_sym_;
    }
    if (cached_has_bits & 0x00000200u) {
      dl_bandwidth_ = from.dl_bandwidth_;
    }
    if (cached_has_bits & 0x00000400u) {
      ul_bandwidth_ = from.ul_bandwidth_;
    }
    if (cached_has_bits & 0x00000800u) {
      ul_cyclic_prefix_length_ = from.ul_cyclic_prefix_length_;
    }
    if (cached_has_bits & 0x00001000u) {
      dl_cyclic_prefix_length_ = from.dl_cyclic_prefix_length_;
    }
    if (cached_has_bits & 0x00002000u) {
      antenna_ports_count_ = from.antenna_ports_count_;
    }
    if (cached_has_bits & 0x00004000u) {
      duplex_mode_ = from.duplex_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      subframe_assignment_ = from.subframe_assignment_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      special_subframe_patterns_ = from.special_subframe_patterns_;
    }
    if (cached_has_bits & 0x00020000u) {
      prach_config_index_ = from.prach_config_index_;
    }
    if (cached_has_bits & 0x00040000u) {
      prach_freq_offset_ = from.prach_freq_offset_;
    }
    if (cached_has_bits & 0x00080000u) {
      ra_response_window_size_ = from.ra_response_window_size_;
    }
    if (cached_has_bits & 0x00100000u) {
      mac_contention_resolution_timer_ = from.mac_contention_resolution_timer_;
    }
    if (cached_has_bits & 0x00200000u) {
      max_harq_msg3tx_ = from.max_harq_msg3tx_;
    }
    if (cached_has_bits & 0x00400000u) {
      n1pucch_an_ = from.n1pucch_an_;
    }
    if (cached_has_bits & 0x00800000u) {
      deltapucch_shift_ = from.deltapucch_shift_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      nrb_cqi_ = from.nrb_cqi_;
    }
    if (cached_has_bits & 0x02000000u) {
      srs_subframe_config_ = from.srs_subframe_config_;
    }
    if (cached_has_bits & 0x04000000u) {
      srs_bw_config_ = from.srs_bw_config_;
    }
    if (cached_has_bits & 0x08000000u) {
      srs_mac_up_pts_ = from.srs_mac_up_pts_;
    }
    if (cached_has_bits & 0x10000000u) {
      enable_64qam_ = from.enable_64qam_;
    }
    if (cached_has_bits & 0x20000000u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x40000000u) {
      dl_freq_ = from.dl_freq_;
    }
    if (cached_has_bits & 0x80000000u) {
      ul_freq_ = from.ul_freq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      eutra_band_ = from.eutra_band_;
    }
    if (cached_has_bits & 0x00000002u) {
      dl_pdsch_power_ = from.dl_pdsch_power_;
    }
    if (cached_has_bits & 0x00000004u) {
      ul_pusch_power_ = from.ul_pusch_power_;
    }
    if (cached_has_bits & 0x00000008u) {
      x2_ho_net_control_ = from.x2_ho_net_control_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void flex_cell_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_config::CopyFrom(const flex_cell_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_config::IsInitialized() const {
  return true;
}

void flex_cell_config::InternalSwap(flex_cell_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  mbsfn_subframe_config_rfperiod_.InternalSwap(&other->mbsfn_subframe_config_rfperiod_);
  mbsfn_subframe_config_rfoffset_.InternalSwap(&other->mbsfn_subframe_config_rfoffset_);
  mbsfn_subframe_config_sfalloc_.InternalSwap(&other->mbsfn_subframe_config_sfalloc_);
  plmn_id_.InternalSwap(&other->plmn_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_cell_config, x2_ho_net_control_)
      + sizeof(flex_cell_config::x2_ho_net_control_)
      - PROTOBUF_FIELD_OFFSET(flex_cell_config, si_config_)>(
          reinterpret_cast<char*>(&si_config_),
          reinterpret_cast<char*>(&other->si_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_cell_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_slice_config::InitAsDefaultInstance() {
  ::protocol::_flex_slice_config_default_instance_._instance.get_mutable()->dl_ = const_cast< ::protocol::flex_slice_dl_ul_config*>(
      ::protocol::flex_slice_dl_ul_config::internal_default_instance());
  ::protocol::_flex_slice_config_default_instance_._instance.get_mutable()->ul_ = const_cast< ::protocol::flex_slice_dl_ul_config*>(
      ::protocol::flex_slice_dl_ul_config::internal_default_instance());
}
class flex_slice_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_slice_config>()._has_bits_);
  static const ::protocol::flex_slice_dl_ul_config& dl(const flex_slice_config* msg);
  static void set_has_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protocol::flex_slice_dl_ul_config& ul(const flex_slice_config* msg);
  static void set_has_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_slice_dl_ul_config&
flex_slice_config::_Internal::dl(const flex_slice_config* msg) {
  return *msg->dl_;
}
const ::protocol::flex_slice_dl_ul_config&
flex_slice_config::_Internal::ul(const flex_slice_config* msg) {
  return *msg->ul_;
}
void flex_slice_config::clear_dl() {
  if (dl_ != nullptr) dl_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_slice_config::clear_ul() {
  if (ul_ != nullptr) ul_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
flex_slice_config::flex_slice_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_slice_config)
}
flex_slice_config::flex_slice_config(const flex_slice_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dl()) {
    dl_ = new ::protocol::flex_slice_dl_ul_config(*from.dl_);
  } else {
    dl_ = nullptr;
  }
  if (from._internal_has_ul()) {
    ul_ = new ::protocol::flex_slice_dl_ul_config(*from.ul_);
  } else {
    ul_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice_config)
}

void flex_slice_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_slice_config_config_5fmessages_2eproto.base);
  ::memset(&dl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ul_) -
      reinterpret_cast<char*>(&dl_)) + sizeof(ul_));
}

flex_slice_config::~flex_slice_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_slice_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dl_;
  if (this != internal_default_instance()) delete ul_;
}

void flex_slice_config::ArenaDtor(void* object) {
  flex_slice_config* _this = reinterpret_cast< flex_slice_config* >(object);
  (void)_this;
}
void flex_slice_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_slice_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_slice_config& flex_slice_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_slice_config_config_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_slice_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dl_ != nullptr);
      dl_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ul_ != nullptr);
      ul_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_slice_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_slice_dl_ul_config dl = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_slice_dl_ul_config ul = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ul(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_slice_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_dl_ul_config dl = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dl(this), target, stream);
  }

  // optional .protocol.flex_slice_dl_ul_config ul = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ul(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice_config)
  return target;
}

size_t flex_slice_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_slice_dl_ul_config dl = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dl_);
    }

    // optional .protocol.flex_slice_dl_ul_config ul = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ul_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_slice_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_slice_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice_config)
    MergeFrom(*source);
  }
}

void flex_slice_config::MergeFrom(const flex_slice_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dl()->::protocol::flex_slice_dl_ul_config::MergeFrom(from._internal_dl());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_ul()->::protocol::flex_slice_dl_ul_config::MergeFrom(from._internal_ul());
    }
  }
}

void flex_slice_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice_config::CopyFrom(const flex_slice_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice_config::IsInitialized() const {
  return true;
}

void flex_slice_config::InternalSwap(flex_slice_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_slice_config, ul_)
      + sizeof(flex_slice_config::ul_)
      - PROTOBUF_FIELD_OFFSET(flex_slice_config, dl_)>(
          reinterpret_cast<char*>(&dl_),
          reinterpret_cast<char*>(&other->dl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_slice_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ue_config::InitAsDefaultInstance() {
  ::protocol::_flex_ue_config_default_instance_._instance.get_mutable()->drx_config_ = const_cast< ::protocol::flex_drx_config*>(
      ::protocol::flex_drx_config::internal_default_instance());
  ::protocol::_flex_ue_config_default_instance_._instance.get_mutable()->sps_config_ = const_cast< ::protocol::flex_sps_config*>(
      ::protocol::flex_sps_config::internal_default_instance());
  ::protocol::_flex_ue_config_default_instance_._instance.get_mutable()->sr_config_ = const_cast< ::protocol::flex_sr_config*>(
      ::protocol::flex_sr_config::internal_default_instance());
  ::protocol::_flex_ue_config_default_instance_._instance.get_mutable()->cqi_config_ = const_cast< ::protocol::flex_cqi_config*>(
      ::protocol::flex_cqi_config::internal_default_instance());
  ::protocol::_flex_ue_config_default_instance_._instance.get_mutable()->capabilities_ = const_cast< ::protocol::flex_ue_capabilities*>(
      ::protocol::flex_ue_capabilities::internal_default_instance());
  ::protocol::_flex_ue_config_default_instance_._instance.get_mutable()->info_ = const_cast< ::protocol::flex_measurement_info*>(
      ::protocol::flex_measurement_info::internal_default_instance());
}
class flex_ue_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ue_config>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::protocol::flex_drx_config& drx_config(const flex_ue_config* msg);
  static void set_has_drx_config(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time_alignment_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_meas_gap_config_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_meas_gap_config_sf_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::protocol::flex_sps_config& sps_config(const flex_ue_config* msg);
  static void set_has_sps_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protocol::flex_sr_config& sr_config(const flex_ue_config* msg);
  static void set_has_sr_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_cqi_config& cqi_config(const flex_ue_config* msg);
  static void set_has_cqi_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_transmission_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_ue_aggregated_max_bitrate_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_ue_aggregated_max_bitrate_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::protocol::flex_ue_capabilities& capabilities(const flex_ue_config* msg);
  static void set_has_capabilities(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ue_transmission_antenna(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tti_bundling(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_max_harq_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_beta_offset_ack_index(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_beta_offset_ri_index(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_beta_offset_cqi_index(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ack_nack_simultaneous_trans(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_simultaneous_ack_nack_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_aperiodic_cqi_rep_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tdd_ack_nack_feedback(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_ack_nack_repetition_factor(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_extended_bsr_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_ca_support(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_cross_carrier_sched_support(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_pcell_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_scell_deactivation_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_imsi(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_dl_slice_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_ul_slice_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::protocol::flex_measurement_info& info(const flex_ue_config* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::protocol::flex_drx_config&
flex_ue_config::_Internal::drx_config(const flex_ue_config* msg) {
  return *msg->drx_config_;
}
const ::protocol::flex_sps_config&
flex_ue_config::_Internal::sps_config(const flex_ue_config* msg) {
  return *msg->sps_config_;
}
const ::protocol::flex_sr_config&
flex_ue_config::_Internal::sr_config(const flex_ue_config* msg) {
  return *msg->sr_config_;
}
const ::protocol::flex_cqi_config&
flex_ue_config::_Internal::cqi_config(const flex_ue_config* msg) {
  return *msg->cqi_config_;
}
const ::protocol::flex_ue_capabilities&
flex_ue_config::_Internal::capabilities(const flex_ue_config* msg) {
  return *msg->capabilities_;
}
const ::protocol::flex_measurement_info&
flex_ue_config::_Internal::info(const flex_ue_config* msg) {
  return *msg->info_;
}
void flex_ue_config::clear_drx_config() {
  if (drx_config_ != nullptr) drx_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_config::clear_sps_config() {
  if (sps_config_ != nullptr) sps_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ue_config::clear_sr_config() {
  if (sr_config_ != nullptr) sr_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ue_config::clear_cqi_config() {
  if (cqi_config_ != nullptr) cqi_config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void flex_ue_config::clear_capabilities() {
  if (capabilities_ != nullptr) capabilities_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void flex_ue_config::clear_scell_config() {
  scell_config_.Clear();
}
void flex_ue_config::clear_info() {
  if (info_ != nullptr) info_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
flex_ue_config::flex_ue_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  scell_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ue_config)
}
flex_ue_config::flex_ue_config(const flex_ue_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      scell_config_(from.scell_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_drx_config()) {
    drx_config_ = new ::protocol::flex_drx_config(*from.drx_config_);
  } else {
    drx_config_ = nullptr;
  }
  if (from._internal_has_sps_config()) {
    sps_config_ = new ::protocol::flex_sps_config(*from.sps_config_);
  } else {
    sps_config_ = nullptr;
  }
  if (from._internal_has_sr_config()) {
    sr_config_ = new ::protocol::flex_sr_config(*from.sr_config_);
  } else {
    sr_config_ = nullptr;
  }
  if (from._internal_has_cqi_config()) {
    cqi_config_ = new ::protocol::flex_cqi_config(*from.cqi_config_);
  } else {
    cqi_config_ = nullptr;
  }
  if (from._internal_has_capabilities()) {
    capabilities_ = new ::protocol::flex_ue_capabilities(*from.capabilities_);
  } else {
    capabilities_ = nullptr;
  }
  if (from._internal_has_info()) {
    info_ = new ::protocol::flex_measurement_info(*from.info_);
  } else {
    info_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&ul_slice_id_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(ul_slice_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_config)
}

void flex_ue_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ue_config_config_5fmessages_2eproto.base);
  ::memset(&drx_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ul_slice_id_) -
      reinterpret_cast<char*>(&drx_config_)) + sizeof(ul_slice_id_));
}

flex_ue_config::~flex_ue_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ue_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete drx_config_;
  if (this != internal_default_instance()) delete sps_config_;
  if (this != internal_default_instance()) delete sr_config_;
  if (this != internal_default_instance()) delete cqi_config_;
  if (this != internal_default_instance()) delete capabilities_;
  if (this != internal_default_instance()) delete info_;
}

void flex_ue_config::ArenaDtor(void* object) {
  flex_ue_config* _this = reinterpret_cast< flex_ue_config* >(object);
  (void)_this;
}
void flex_ue_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ue_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ue_config& flex_ue_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ue_config_config_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_ue_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  scell_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(drx_config_ != nullptr);
      drx_config_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sps_config_ != nullptr);
      sps_config_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(sr_config_ != nullptr);
      sr_config_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cqi_config_ != nullptr);
      cqi_config_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(capabilities_ != nullptr);
      capabilities_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_alignment_timer_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(time_alignment_timer_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&meas_gap_config_pattern_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_harq_tx_) -
        reinterpret_cast<char*>(&meas_gap_config_pattern_)) + sizeof(max_harq_tx_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&beta_offset_ack_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ack_nack_repetition_factor_) -
        reinterpret_cast<char*>(&beta_offset_ack_index_)) + sizeof(ack_nack_repetition_factor_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&extended_bsr_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ul_slice_id_) -
        reinterpret_cast<char*>(&extended_bsr_size_)) + sizeof(ul_slice_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ue_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_drx_config drx_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_drx_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 time_alignment_timer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_alignment_timer(&has_bits);
          time_alignment_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 meas_gap_config_pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_meas_gap_config_pattern(&has_bits);
          meas_gap_config_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 meas_gap_config_sf_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_meas_gap_config_sf_offset(&has_bits);
          meas_gap_config_sf_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_sps_config sps_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sps_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_sr_config sr_config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sr_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_cqi_config cqi_config = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cqi_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 transmission_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_transmission_mode(&has_bits);
          transmission_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ue_aggregated_max_bitrate_UL = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_ue_aggregated_max_bitrate_ul(&has_bits);
          ue_aggregated_max_bitrate_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 ue_aggregated_max_bitrate_DL = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ue_aggregated_max_bitrate_dl(&has_bits);
          ue_aggregated_max_bitrate_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_ue_capabilities capabilities = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_capabilities(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ue_transmission_antenna = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_ue_transmission_antenna(&has_bits);
          ue_transmission_antenna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tti_bundling = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_tti_bundling(&has_bits);
          tti_bundling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 max_HARQ_tx = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_max_harq_tx(&has_bits);
          max_harq_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 beta_offset_ACK_index = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_beta_offset_ack_index(&has_bits);
          beta_offset_ack_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 beta_offset_RI_index = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_beta_offset_ri_index(&has_bits);
          beta_offset_ri_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 beta_offset_CQI_index = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_beta_offset_cqi_index(&has_bits);
          beta_offset_cqi_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_nack_simultaneous_trans = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_ack_nack_simultaneous_trans(&has_bits);
          ack_nack_simultaneous_trans_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 simultaneous_ack_nack_cqi = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_simultaneous_ack_nack_cqi(&has_bits);
          simultaneous_ack_nack_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 aperiodic_cqi_rep_mode = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_aperiodic_cqi_rep_mode(&has_bits);
          aperiodic_cqi_rep_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tdd_ack_nack_feedback = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_tdd_ack_nack_feedback(&has_bits);
          tdd_ack_nack_feedback_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack_nack_repetition_factor = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_ack_nack_repetition_factor(&has_bits);
          ack_nack_repetition_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 extended_bsr_size = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_extended_bsr_size(&has_bits);
          extended_bsr_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ca_support = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_ca_support(&has_bits);
          ca_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cross_carrier_sched_support = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_cross_carrier_sched_support(&has_bits);
          cross_carrier_sched_support_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pcell_carrier_index = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_pcell_carrier_index(&has_bits);
          pcell_carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_scell_config scell_config = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_scell_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 scell_deactivation_timer = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_scell_deactivation_timer(&has_bits);
          scell_deactivation_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 imsi = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_imsi(&has_bits);
          imsi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dl_slice_id = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          _Internal::set_has_dl_slice_id(&has_bits);
          dl_slice_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ul_slice_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _Internal::set_has_ul_slice_id(&has_bits);
          ul_slice_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_measurement_info info = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ue_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional .protocol.flex_drx_config drx_config = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::drx_config(this), target, stream);
  }

  // optional uint32 time_alignment_timer = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_alignment_timer(), target);
  }

  // optional uint32 meas_gap_config_pattern = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_meas_gap_config_pattern(), target);
  }

  // optional uint32 meas_gap_config_sf_offset = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_meas_gap_config_sf_offset(), target);
  }

  // optional .protocol.flex_sps_config sps_config = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sps_config(this), target, stream);
  }

  // optional .protocol.flex_sr_config sr_config = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sr_config(this), target, stream);
  }

  // optional .protocol.flex_cqi_config cqi_config = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cqi_config(this), target, stream);
  }

  // optional uint32 transmission_mode = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_transmission_mode(), target);
  }

  // optional uint64 ue_aggregated_max_bitrate_UL = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_ue_aggregated_max_bitrate_ul(), target);
  }

  // optional uint64 ue_aggregated_max_bitrate_DL = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_ue_aggregated_max_bitrate_dl(), target);
  }

  // optional .protocol.flex_ue_capabilities capabilities = 12;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::capabilities(this), target, stream);
  }

  // optional uint32 ue_transmission_antenna = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_ue_transmission_antenna(), target);
  }

  // optional uint32 tti_bundling = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_tti_bundling(), target);
  }

  // optional uint32 max_HARQ_tx = 15;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_max_harq_tx(), target);
  }

  // optional uint32 beta_offset_ACK_index = 16;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_beta_offset_ack_index(), target);
  }

  // optional uint32 beta_offset_RI_index = 17;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_beta_offset_ri_index(), target);
  }

  // optional uint32 beta_offset_CQI_index = 18;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_beta_offset_cqi_index(), target);
  }

  // optional uint32 ack_nack_simultaneous_trans = 19;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_ack_nack_simultaneous_trans(), target);
  }

  // optional uint32 simultaneous_ack_nack_cqi = 20;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_simultaneous_ack_nack_cqi(), target);
  }

  // optional uint32 aperiodic_cqi_rep_mode = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_aperiodic_cqi_rep_mode(), target);
  }

  // optional uint32 tdd_ack_nack_feedback = 22;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_tdd_ack_nack_feedback(), target);
  }

  // optional uint32 ack_nack_repetition_factor = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_ack_nack_repetition_factor(), target);
  }

  // optional uint32 extended_bsr_size = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_extended_bsr_size(), target);
  }

  // optional uint32 ca_support = 25;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_ca_support(), target);
  }

  // optional uint32 cross_carrier_sched_support = 26;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_cross_carrier_sched_support(), target);
  }

  // optional uint32 pcell_carrier_index = 27;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_pcell_carrier_index(), target);
  }

  // repeated .protocol.flex_scell_config scell_config = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_scell_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_scell_config(i), target, stream);
  }

  // optional uint32 scell_deactivation_timer = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(29, this->_internal_scell_deactivation_timer(), target);
  }

  // optional uint64 imsi = 30;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(30, this->_internal_imsi(), target);
  }

  // optional uint32 dl_slice_id = 31;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(31, this->_internal_dl_slice_id(), target);
  }

  // optional uint32 ul_slice_id = 32;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(32, this->_internal_ul_slice_id(), target);
  }

  // optional .protocol.flex_measurement_info info = 33;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_config)
  return target;
}

size_t flex_ue_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_scell_config scell_config = 28;
  total_size += 2UL * this->_internal_scell_config_size();
  for (const auto& msg : this->scell_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .protocol.flex_drx_config drx_config = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drx_config_);
    }

    // optional .protocol.flex_sps_config sps_config = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sps_config_);
    }

    // optional .protocol.flex_sr_config sr_config = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sr_config_);
    }

    // optional .protocol.flex_cqi_config cqi_config = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cqi_config_);
    }

    // optional .protocol.flex_ue_capabilities capabilities = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *capabilities_);
    }

    // optional .protocol.flex_measurement_info info = 33;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 time_alignment_timer = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_time_alignment_timer());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 meas_gap_config_pattern = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_meas_gap_config_pattern());
    }

    // optional uint32 meas_gap_config_sf_offset = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_meas_gap_config_sf_offset());
    }

    // optional uint64 ue_aggregated_max_bitrate_UL = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ue_aggregated_max_bitrate_ul());
    }

    // optional uint64 ue_aggregated_max_bitrate_DL = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_ue_aggregated_max_bitrate_dl());
    }

    // optional uint32 transmission_mode = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_transmission_mode());
    }

    // optional uint32 ue_transmission_antenna = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ue_transmission_antenna());
    }

    // optional uint32 tti_bundling = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tti_bundling());
    }

    // optional uint32 max_HARQ_tx = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_max_harq_tx());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 beta_offset_ACK_index = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_beta_offset_ack_index());
    }

    // optional uint32 beta_offset_RI_index = 17;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_beta_offset_ri_index());
    }

    // optional uint32 beta_offset_CQI_index = 18;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_beta_offset_cqi_index());
    }

    // optional uint32 ack_nack_simultaneous_trans = 19;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_nack_simultaneous_trans());
    }

    // optional uint32 simultaneous_ack_nack_cqi = 20;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_simultaneous_ack_nack_cqi());
    }

    // optional uint32 aperiodic_cqi_rep_mode = 21;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aperiodic_cqi_rep_mode());
    }

    // optional uint32 tdd_ack_nack_feedback = 22;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tdd_ack_nack_feedback());
    }

    // optional uint32 ack_nack_repetition_factor = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack_nack_repetition_factor());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 extended_bsr_size = 24;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_extended_bsr_size());
    }

    // optional uint32 ca_support = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ca_support());
    }

    // optional uint32 cross_carrier_sched_support = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cross_carrier_sched_support());
    }

    // optional uint32 pcell_carrier_index = 27;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pcell_carrier_index());
    }

    // optional uint64 imsi = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_imsi());
    }

    // optional uint32 scell_deactivation_timer = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scell_deactivation_timer());
    }

    // optional uint32 dl_slice_id = 31;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dl_slice_id());
    }

    // optional uint32 ul_slice_id = 32;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ul_slice_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ue_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ue_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_config)
    MergeFrom(*source);
  }
}

void flex_ue_config::MergeFrom(const flex_ue_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scell_config_.MergeFrom(from.scell_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_drx_config()->::protocol::flex_drx_config::MergeFrom(from._internal_drx_config());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_sps_config()->::protocol::flex_sps_config::MergeFrom(from._internal_sps_config());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_sr_config()->::protocol::flex_sr_config::MergeFrom(from._internal_sr_config());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cqi_config()->::protocol::flex_cqi_config::MergeFrom(from._internal_cqi_config());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_capabilities()->::protocol::flex_ue_capabilities::MergeFrom(from._internal_capabilities());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_info()->::protocol::flex_measurement_info::MergeFrom(from._internal_info());
    }
    if (cached_has_bits & 0x00000040u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000080u) {
      time_alignment_timer_ = from.time_alignment_timer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      meas_gap_config_pattern_ = from.meas_gap_config_pattern_;
    }
    if (cached_has_bits & 0x00000200u) {
      meas_gap_config_sf_offset_ = from.meas_gap_config_sf_offset_;
    }
    if (cached_has_bits & 0x00000400u) {
      ue_aggregated_max_bitrate_ul_ = from.ue_aggregated_max_bitrate_ul_;
    }
    if (cached_has_bits & 0x00000800u) {
      ue_aggregated_max_bitrate_dl_ = from.ue_aggregated_max_bitrate_dl_;
    }
    if (cached_has_bits & 0x00001000u) {
      transmission_mode_ = from.transmission_mode_;
    }
    if (cached_has_bits & 0x00002000u) {
      ue_transmission_antenna_ = from.ue_transmission_antenna_;
    }
    if (cached_has_bits & 0x00004000u) {
      tti_bundling_ = from.tti_bundling_;
    }
    if (cached_has_bits & 0x00008000u) {
      max_harq_tx_ = from.max_harq_tx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      beta_offset_ack_index_ = from.beta_offset_ack_index_;
    }
    if (cached_has_bits & 0x00020000u) {
      beta_offset_ri_index_ = from.beta_offset_ri_index_;
    }
    if (cached_has_bits & 0x00040000u) {
      beta_offset_cqi_index_ = from.beta_offset_cqi_index_;
    }
    if (cached_has_bits & 0x00080000u) {
      ack_nack_simultaneous_trans_ = from.ack_nack_simultaneous_trans_;
    }
    if (cached_has_bits & 0x00100000u) {
      simultaneous_ack_nack_cqi_ = from.simultaneous_ack_nack_cqi_;
    }
    if (cached_has_bits & 0x00200000u) {
      aperiodic_cqi_rep_mode_ = from.aperiodic_cqi_rep_mode_;
    }
    if (cached_has_bits & 0x00400000u) {
      tdd_ack_nack_feedback_ = from.tdd_ack_nack_feedback_;
    }
    if (cached_has_bits & 0x00800000u) {
      ack_nack_repetition_factor_ = from.ack_nack_repetition_factor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      extended_bsr_size_ = from.extended_bsr_size_;
    }
    if (cached_has_bits & 0x02000000u) {
      ca_support_ = from.ca_support_;
    }
    if (cached_has_bits & 0x04000000u) {
      cross_carrier_sched_support_ = from.cross_carrier_sched_support_;
    }
    if (cached_has_bits & 0x08000000u) {
      pcell_carrier_index_ = from.pcell_carrier_index_;
    }
    if (cached_has_bits & 0x10000000u) {
      imsi_ = from.imsi_;
    }
    if (cached_has_bits & 0x20000000u) {
      scell_deactivation_timer_ = from.scell_deactivation_timer_;
    }
    if (cached_has_bits & 0x40000000u) {
      dl_slice_id_ = from.dl_slice_id_;
    }
    if (cached_has_bits & 0x80000000u) {
      ul_slice_id_ = from.ul_slice_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_config::CopyFrom(const flex_ue_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_config::IsInitialized() const {
  return true;
}

void flex_ue_config::InternalSwap(flex_ue_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  scell_config_.InternalSwap(&other->scell_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ue_config, ul_slice_id_)
      + sizeof(flex_ue_config::ul_slice_id_)
      - PROTOBUF_FIELD_OFFSET(flex_ue_config, drx_config_)>(
          reinterpret_cast<char*>(&drx_config_),
          reinterpret_cast<char*>(&other->drx_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ue_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_lc_ue_config::InitAsDefaultInstance() {
}
class flex_lc_ue_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_lc_ue_config>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void flex_lc_ue_config::clear_lc_config() {
  lc_config_.Clear();
}
flex_lc_ue_config::flex_lc_ue_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lc_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_lc_ue_config)
}
flex_lc_ue_config::flex_lc_ue_config(const flex_lc_ue_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lc_config_(from.lc_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rnti_ = from.rnti_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_ue_config)
}

void flex_lc_ue_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_lc_ue_config_config_5fmessages_2eproto.base);
  rnti_ = 0u;
}

flex_lc_ue_config::~flex_lc_ue_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_ue_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_lc_ue_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_lc_ue_config::ArenaDtor(void* object) {
  flex_lc_ue_config* _this = reinterpret_cast< flex_lc_ue_config* >(object);
  (void)_this;
}
void flex_lc_ue_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_lc_ue_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_lc_ue_config& flex_lc_ue_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_lc_ue_config_config_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_lc_ue_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_ue_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lc_config_.Clear();
  rnti_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_lc_ue_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_lc_config lc_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lc_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_lc_ue_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_ue_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // repeated .protocol.flex_lc_config lc_config = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lc_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lc_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_ue_config)
  return target;
}

size_t flex_lc_ue_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_ue_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_lc_config lc_config = 2;
  total_size += 1UL * this->_internal_lc_config_size();
  for (const auto& msg : this->lc_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 rnti = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rnti());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_lc_ue_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_ue_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_lc_ue_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_ue_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_ue_config)
    MergeFrom(*source);
  }
}

void flex_lc_ue_config::MergeFrom(const flex_lc_ue_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_ue_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lc_config_.MergeFrom(from.lc_config_);
  if (from._internal_has_rnti()) {
    _internal_set_rnti(from._internal_rnti());
  }
}

void flex_lc_ue_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_ue_config::CopyFrom(const flex_lc_ue_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_ue_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_ue_config::IsInitialized() const {
  return true;
}

void flex_lc_ue_config::InternalSwap(flex_lc_ue_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lc_config_.InternalSwap(&other->lc_config_);
  swap(rnti_, other->rnti_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_lc_ue_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_s1ap_config::InitAsDefaultInstance() {
}
class flex_s1ap_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_s1ap_config>()._has_bits_);
  static void set_has_pending(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_connected(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enb_s1_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enb_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

void flex_s1ap_config::clear_mme() {
  mme_.Clear();
}
flex_s1ap_config::flex_s1ap_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mme_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_s1ap_config)
}
flex_s1ap_config::flex_s1ap_config(const flex_s1ap_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mme_(from.mme_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enb_s1_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enb_s1_ip()) {
    enb_s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enb_s1_ip(),
      GetArena());
  }
  enb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enb_name()) {
    enb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enb_name(),
      GetArena());
  }
  ::memcpy(&pending_, &from.pending_,
    static_cast<size_t>(reinterpret_cast<char*>(&connected_) -
    reinterpret_cast<char*>(&pending_)) + sizeof(connected_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_s1ap_config)
}

void flex_s1ap_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_s1ap_config_config_5fmessages_2eproto.base);
  enb_s1_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enb_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pending_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&connected_) -
      reinterpret_cast<char*>(&pending_)) + sizeof(connected_));
}

flex_s1ap_config::~flex_s1ap_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_s1ap_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_s1ap_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  enb_s1_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enb_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void flex_s1ap_config::ArenaDtor(void* object) {
  flex_s1ap_config* _this = reinterpret_cast< flex_s1ap_config* >(object);
  (void)_this;
}
void flex_s1ap_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_s1ap_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_s1ap_config& flex_s1ap_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_s1ap_config_config_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_s1ap_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_s1ap_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mme_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      enb_s1_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      enb_name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&pending_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&connected_) -
        reinterpret_cast<char*>(&pending_)) + sizeof(connected_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_s1ap_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pending = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pending(&has_bits);
          pending_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 connected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_connected(&has_bits);
          connected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string enb_s1_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_enb_s1_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_s1ap_config.enb_s1_ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string enb_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_enb_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_s1ap_config.enb_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_s1ap_mme mme = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mme(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_s1ap_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_s1ap_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pending = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pending(), target);
  }

  // optional uint32 connected = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_connected(), target);
  }

  // optional string enb_s1_ip = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enb_s1_ip().data(), static_cast<int>(this->_internal_enb_s1_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_config.enb_s1_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_enb_s1_ip(), target);
  }

  // optional string enb_name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enb_name().data(), static_cast<int>(this->_internal_enb_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_config.enb_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_enb_name(), target);
  }

  // repeated .protocol.flex_s1ap_mme mme = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mme_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_mme(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_s1ap_config)
  return target;
}

size_t flex_s1ap_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_s1ap_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_s1ap_mme mme = 5;
  total_size += 1UL * this->_internal_mme_size();
  for (const auto& msg : this->mme_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string enb_s1_ip = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enb_s1_ip());
    }

    // optional string enb_name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_enb_name());
    }

    // optional uint32 pending = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pending());
    }

    // optional uint32 connected = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_connected());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_s1ap_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_s1ap_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_s1ap_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_s1ap_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_s1ap_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_s1ap_config)
    MergeFrom(*source);
  }
}

void flex_s1ap_config::MergeFrom(const flex_s1ap_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_s1ap_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mme_.MergeFrom(from.mme_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_enb_s1_ip(from._internal_enb_s1_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_enb_name(from._internal_enb_name());
    }
    if (cached_has_bits & 0x00000004u) {
      pending_ = from.pending_;
    }
    if (cached_has_bits & 0x00000008u) {
      connected_ = from.connected_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_s1ap_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_s1ap_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_s1ap_config::CopyFrom(const flex_s1ap_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_s1ap_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_s1ap_config::IsInitialized() const {
  return true;
}

void flex_s1ap_config::InternalSwap(flex_s1ap_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mme_.InternalSwap(&other->mme_);
  enb_s1_ip_.Swap(&other->enb_s1_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enb_name_.Swap(&other->enb_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_s1ap_config, connected_)
      + sizeof(flex_s1ap_config::connected_)
      - PROTOBUF_FIELD_OFFSET(flex_s1ap_config, pending_)>(
          reinterpret_cast<char*>(&pending_),
          reinterpret_cast<char*>(&other->pending_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_s1ap_config::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flex_cell_config* Arena::CreateMaybeMessage< ::protocol::flex_cell_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_cell_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_slice_config* Arena::CreateMaybeMessage< ::protocol::flex_slice_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_slice_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ue_config* Arena::CreateMaybeMessage< ::protocol::flex_ue_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ue_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_lc_ue_config* Arena::CreateMaybeMessage< ::protocol::flex_lc_ue_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_lc_ue_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_s1ap_config* Arena::CreateMaybeMessage< ::protocol::flex_s1ap_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_s1ap_config >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
