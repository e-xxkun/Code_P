// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_common.proto

#include "config_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a1_event_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a2_event_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a3_event_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a4_event_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a5_event_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_gummei_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_flex_measurement_event_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_per_event_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_plmn_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_si_message_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_slice_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_slice_static_config_5fcommon_2eproto;
namespace protocol {
class flex_si_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_si_config> _instance;
} _flex_si_config_default_instance_;
class flex_si_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_si_message> _instance;
} _flex_si_message_default_instance_;
class flex_slice_staticDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_slice_static> _instance;
} _flex_slice_static_default_instance_;
class flex_sliceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_slice> _instance;
  const ::protocol::flex_slice_static* static__;
} _flex_slice_default_instance_;
class flex_slice_dl_ul_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_slice_dl_ul_config> _instance;
} _flex_slice_dl_ul_config_default_instance_;
class flex_drx_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_drx_config> _instance;
} _flex_drx_config_default_instance_;
class flex_sps_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_sps_config> _instance;
} _flex_sps_config_default_instance_;
class flex_sr_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_sr_config> _instance;
} _flex_sr_config_default_instance_;
class flex_cqi_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_cqi_config> _instance;
} _flex_cqi_config_default_instance_;
class flex_ue_capabilitiesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ue_capabilities> _instance;
} _flex_ue_capabilities_default_instance_;
class flex_scell_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_scell_config> _instance;
} _flex_scell_config_default_instance_;
class flex_lc_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_lc_config> _instance;
} _flex_lc_config_default_instance_;
class flex_plmnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_plmn> _instance;
} _flex_plmn_default_instance_;
class flex_measurement_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_measurement_info> _instance;
} _flex_measurement_info_default_instance_;
class flex_measurement_eventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_measurement_event> _instance;
} _flex_measurement_event_default_instance_;
class flex_per_eventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_per_event> _instance;
} _flex_per_event_default_instance_;
class flex_a1_eventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_a1_event> _instance;
} _flex_a1_event_default_instance_;
class flex_a2_eventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_a2_event> _instance;
} _flex_a2_event_default_instance_;
class flex_a3_eventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_a3_event> _instance;
} _flex_a3_event_default_instance_;
class flex_a4_eventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_a4_event> _instance;
} _flex_a4_event_default_instance_;
class flex_a5_eventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_a5_event> _instance;
} _flex_a5_event_default_instance_;
class flex_gummeiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_gummei> _instance;
} _flex_gummei_default_instance_;
class flex_s1ap_mmeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_s1ap_mme> _instance;
} _flex_s1ap_mme_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_a1_event_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_a1_event_default_instance_;
    new (ptr) ::protocol::flex_a1_event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_a1_event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a1_event_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_a1_event_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_a2_event_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_a2_event_default_instance_;
    new (ptr) ::protocol::flex_a2_event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_a2_event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a2_event_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_a2_event_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_a3_event_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_a3_event_default_instance_;
    new (ptr) ::protocol::flex_a3_event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_a3_event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a3_event_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_a3_event_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_a4_event_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_a4_event_default_instance_;
    new (ptr) ::protocol::flex_a4_event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_a4_event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a4_event_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_a4_event_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_a5_event_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_a5_event_default_instance_;
    new (ptr) ::protocol::flex_a5_event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_a5_event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_a5_event_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_a5_event_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_cqi_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_cqi_config_default_instance_;
    new (ptr) ::protocol::flex_cqi_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_cqi_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_cqi_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_cqi_config_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_drx_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_drx_config_default_instance_;
    new (ptr) ::protocol::flex_drx_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_drx_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_drx_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_drx_config_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_gummei_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_gummei_default_instance_;
    new (ptr) ::protocol::flex_gummei();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_gummei::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_gummei_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_gummei_config_5fcommon_2eproto}, {
      &scc_info_flex_plmn_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_lc_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_lc_config_default_instance_;
    new (ptr) ::protocol::flex_lc_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_lc_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_lc_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_lc_config_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_measurement_event_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_measurement_event_default_instance_;
    new (ptr) ::protocol::flex_measurement_event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_measurement_event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_flex_measurement_event_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_flex_measurement_event_config_5fcommon_2eproto}, {
      &scc_info_flex_per_event_config_5fcommon_2eproto.base,
      &scc_info_flex_a1_event_config_5fcommon_2eproto.base,
      &scc_info_flex_a2_event_config_5fcommon_2eproto.base,
      &scc_info_flex_a3_event_config_5fcommon_2eproto.base,
      &scc_info_flex_a4_event_config_5fcommon_2eproto.base,
      &scc_info_flex_a5_event_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_measurement_info_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_measurement_info_default_instance_;
    new (ptr) ::protocol::flex_measurement_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_measurement_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_measurement_info_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_measurement_info_config_5fcommon_2eproto}, {
      &scc_info_flex_measurement_event_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_per_event_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_per_event_default_instance_;
    new (ptr) ::protocol::flex_per_event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_per_event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_per_event_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_per_event_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_plmn_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_plmn_default_instance_;
    new (ptr) ::protocol::flex_plmn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_plmn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_plmn_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_plmn_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_s1ap_mme_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_s1ap_mme_default_instance_;
    new (ptr) ::protocol::flex_s1ap_mme();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_s1ap_mme::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_s1ap_mme_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_s1ap_mme_config_5fcommon_2eproto}, {
      &scc_info_flex_gummei_config_5fcommon_2eproto.base,
      &scc_info_flex_plmn_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_scell_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_scell_config_default_instance_;
    new (ptr) ::protocol::flex_scell_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_scell_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_scell_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_scell_config_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_si_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_si_config_default_instance_;
    new (ptr) ::protocol::flex_si_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_si_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_si_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_si_config_config_5fcommon_2eproto}, {
      &scc_info_flex_si_message_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_si_message_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_si_message_default_instance_;
    new (ptr) ::protocol::flex_si_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_si_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_si_message_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_si_message_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_slice_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_slice_default_instance_;
    new (ptr) ::protocol::flex_slice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_slice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_slice_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_slice_config_5fcommon_2eproto}, {
      &scc_info_flex_slice_static_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_slice_dl_ul_config_default_instance_;
    new (ptr) ::protocol::flex_slice_dl_ul_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_slice_dl_ul_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto}, {
      &scc_info_flex_slice_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_slice_static_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_slice_static_default_instance_;
    new (ptr) ::protocol::flex_slice_static();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_slice_static::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_slice_static_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_slice_static_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_sps_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_sps_config_default_instance_;
    new (ptr) ::protocol::flex_sps_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_sps_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_sps_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_sps_config_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_sr_config_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_sr_config_default_instance_;
    new (ptr) ::protocol::flex_sr_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_sr_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_sr_config_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_sr_config_config_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_ue_capabilities_config_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ue_capabilities_default_instance_;
    new (ptr) ::protocol::flex_ue_capabilities();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ue_capabilities::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ue_capabilities_config_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_ue_capabilities_config_5fcommon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_5fcommon_2eproto[23];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_config_5fcommon_2eproto[17];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_config, sfn_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_config, sib1_length_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_config, si_window_length_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_config, si_message_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_message, periodicity_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_si_message, length_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_static, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_static, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_static, poslow_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_static, poshigh_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice, id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice, label_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice, scheduler_),
  offsetof(::protocol::flex_sliceDefaultTypeInternal, static__),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice, params_),
  2,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_dl_ul_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_dl_ul_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_dl_ul_config, algorithm_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_dl_ul_config, slices_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_slice_dl_ul_config, scheduler_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, on_duration_timer_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, drx_inactivity_timer_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, drx_retransmission_timer_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, long_drx_cycle_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, long_drx_cycle_start_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, short_drx_cycle_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_drx_config, drx_short_cycle_timer_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sps_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sps_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sps_config, semi_persistent_sched_interval_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sps_config, semi_persistent_sched_interval_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sps_config, num_of_conf_sps_proc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sps_config, n1_pucch_an_persistent_element_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sps_config, implicit_release_after_),
  0,
  1,
  2,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sr_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sr_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sr_config, sr_action_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sr_config, sched_interval_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sr_config, dsr_trans_max_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cqi_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cqi_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cqi_config, cqi_action_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cqi_config, cqi_sched_interval_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cqi_config, ri_sched_interval_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_capabilities, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_capabilities, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_capabilities, half_duplex_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_capabilities, intra_sf_hopping_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_capabilities, type2_sb_1_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_capabilities, ue_category_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_capabilities, res_alloc_type1_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_scell_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_scell_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_scell_config, carrier_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_scell_config, scell_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_scell_config, use_ccs_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_scell_config, sched_cell_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_scell_config, pdsch_start_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, lcid_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, lcg_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, direction_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, qos_bearer_type_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, qci_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, e_rab_max_bitrate_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, e_rab_max_bitrate_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, e_rab_guaranteed_bitrate_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config, e_rab_guaranteed_bitrate_dl_),
  0,
  1,
  2,
  3,
  8,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_plmn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_plmn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_plmn, mcc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_plmn, mnc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_plmn, mnc_length_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, offset_freq_serving_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, offset_freq_neighbouring_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, cell_individual_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, filter_coefficient_rsrp_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, filter_coefficient_rsrq_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_info, event_),
  1,
  2,
  ~0u,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, periodical_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, a1_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, a2_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, a3_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, a4_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_measurement_event, a5_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_per_event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_per_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_per_event, max_report_cells_),
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a1_event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a1_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a1_event, threshold_rsrp_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a1_event, hysteresis_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a1_event, time_to_trigger_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a1_event, max_report_cells_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a2_event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a2_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a2_event, threshold_rsrp_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a2_event, hysteresis_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a2_event, time_to_trigger_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a2_event, max_report_cells_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a3_event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a3_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a3_event, a3_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a3_event, report_on_leave_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a3_event, hysteresis_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a3_event, time_to_trigger_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a3_event, max_report_cells_),
  0,
  4,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a4_event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a4_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a4_event, threshold_rsrp_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a4_event, hysteresis_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a4_event, time_to_trigger_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a4_event, max_report_cells_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a5_event, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a5_event, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a5_event, threshold_rsrp_1_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a5_event, threshold_rsrp_2_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a5_event, hysteresis_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a5_event, time_to_trigger_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_a5_event, max_report_cells_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gummei, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gummei, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gummei, plmn_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gummei, mme_group_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gummei, mme_code_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, s1_ip_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, name_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, state_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, served_gummeis_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, requested_plmns_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_mme, rel_capacity_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::protocol::flex_si_config)},
  { 13, 20, sizeof(::protocol::flex_si_message)},
  { 22, 29, sizeof(::protocol::flex_slice_static)},
  { 31, 41, sizeof(::protocol::flex_slice)},
  { 45, 53, sizeof(::protocol::flex_slice_dl_ul_config)},
  { 56, 68, sizeof(::protocol::flex_drx_config)},
  { 75, 85, sizeof(::protocol::flex_sps_config)},
  { 90, 98, sizeof(::protocol::flex_sr_config)},
  { 101, 109, sizeof(::protocol::flex_cqi_config)},
  { 112, 122, sizeof(::protocol::flex_ue_capabilities)},
  { 127, 137, sizeof(::protocol::flex_scell_config)},
  { 142, 156, sizeof(::protocol::flex_lc_config)},
  { 165, 173, sizeof(::protocol::flex_plmn)},
  { 176, 187, sizeof(::protocol::flex_measurement_info)},
  { 193, 204, sizeof(::protocol::flex_measurement_event)},
  { 210, 216, sizeof(::protocol::flex_per_event)},
  { 217, 226, sizeof(::protocol::flex_a1_event)},
  { 230, 239, sizeof(::protocol::flex_a2_event)},
  { 243, 253, sizeof(::protocol::flex_a3_event)},
  { 258, 267, sizeof(::protocol::flex_a4_event)},
  { 271, 281, sizeof(::protocol::flex_a5_event)},
  { 286, 294, sizeof(::protocol::flex_gummei)},
  { 297, 308, sizeof(::protocol::flex_s1ap_mme)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_si_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_si_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_slice_static_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_slice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_slice_dl_ul_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_drx_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_sps_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_sr_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_cqi_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ue_capabilities_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_scell_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_lc_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_plmn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_measurement_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_measurement_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_per_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_a1_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_a2_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_a3_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_a4_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_a5_event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_gummei_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_s1ap_mme_default_instance_),
};

const char descriptor_table_protodef_config_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023config_common.proto\022\010protocol\"{\n\016flex_"
  "si_config\022\013\n\003sfn\030\001 \001(\r\022\023\n\013sib1_length\030\002 "
  "\001(\r\022\030\n\020si_window_length\030\003 \001(\r\022-\n\nsi_mess"
  "age\030\004 \003(\0132\031.protocol.flex_si_message\"6\n\017"
  "flex_si_message\022\023\n\013periodicity\030\001 \001(\r\022\016\n\006"
  "length\030\002 \001(\r\"4\n\021flex_slice_static\022\016\n\006pos"
  "Low\030\001 \001(\r\022\017\n\007posHigh\030\002 \001(\r\"s\n\nflex_slice"
  "\022\n\n\002id\030\001 \001(\r\022\r\n\005label\030\002 \001(\t\022\021\n\tscheduler"
  "\030\003 \001(\t\022-\n\006static\030\n \001(\0132\033.protocol.flex_s"
  "lice_staticH\000B\010\n\006params\"\205\001\n\027flex_slice_d"
  "l_ul_config\0221\n\talgorithm\030\001 \001(\0162\036.protoco"
  "l.flex_slice_algorithm\022$\n\006slices\030\002 \003(\0132\024"
  ".protocol.flex_slice\022\021\n\tscheduler\030\003 \001(\t\""
  "\341\001\n\017flex_drx_config\022\031\n\021on_duration_timer"
  "\030\001 \001(\r\022\034\n\024drx_inactivity_timer\030\002 \001(\r\022 \n\030"
  "drx_retransmission_timer\030\003 \001(\r\022\026\n\016long_d"
  "rx_cycle\030\004 \001(\r\022#\n\033long_drx_cycle_start_o"
  "ffset\030\005 \001(\r\022\027\n\017short_drx_cycle\030\006 \001(\r\022\035\n\025"
  "drx_short_cycle_timer\030\007 \001(\r\"\315\001\n\017flex_sps"
  "_config\022)\n!semi_persistent_sched_interva"
  "l_UL\030\001 \001(\r\022)\n!semi_persistent_sched_inte"
  "rval_DL\030\002 \001(\r\022\034\n\024num_of_conf_sps_proc\030\003 "
  "\001(\r\022&\n\036n1_PUCCH_AN_persistent_element\030\004 "
  "\003(\r\022\036\n\026implicit_release_after\030\005 \001(\r\"R\n\016f"
  "lex_sr_config\022\021\n\tsr_action\030\001 \001(\r\022\026\n\016sche"
  "d_interval\030\002 \001(\r\022\025\n\rdsr_trans_max\030\003 \001(\r\""
  "\\\n\017flex_cqi_config\022\022\n\ncqi_action\030\001 \001(\r\022\032"
  "\n\022cqi_sched_interval\030\002 \001(\r\022\031\n\021ri_sched_i"
  "nterval\030\003 \001(\r\"\207\001\n\024flex_ue_capabilities\022\023"
  "\n\013half_duplex\030\001 \001(\r\022\030\n\020intra_SF_hopping\030"
  "\002 \001(\r\022\022\n\ntype2_sb_1\030\003 \001(\r\022\023\n\013ue_category"
  "\030\004 \001(\r\022\027\n\017res_alloc_type1\030\005 \001(\r\"\177\n\021flex_"
  "scell_config\022\025\n\rcarrier_index\030\001 \001(\r\022\023\n\013s"
  "cell_index\030\002 \001(\r\022\017\n\007use_ccs\030\003 \001(\r\022\030\n\020sch"
  "ed_cell_index\030\004 \001(\r\022\023\n\013pdsch_start\030\005 \001(\r"
  "\"\352\001\n\016flex_lc_config\022\014\n\004lcid\030\001 \001(\r\022\013\n\003lcg"
  "\030\002 \001(\r\022\021\n\tdirection\030\003 \001(\r\022\027\n\017qos_bearer_"
  "type\030\004 \001(\r\022\013\n\003qci\030\005 \001(\r\022\034\n\024e_RAB_max_bit"
  "rate_UL\030\006 \001(\004\022\034\n\024e_RAB_max_bitrate_DL\030\007 "
  "\001(\004\022#\n\033e_RAB_guaranteed_bitrate_UL\030\010 \001(\004"
  "\022#\n\033e_RAB_guaranteed_bitrate_DL\030\t \001(\004\"9\n"
  "\tflex_plmn\022\013\n\003mcc\030\001 \001(\r\022\013\n\003mnc\030\002 \001(\r\022\022\n\n"
  "mnc_length\030\003 \001(\r\"\351\001\n\025flex_measurement_in"
  "fo\022\033\n\023offset_freq_serving\030\001 \001(\003\022 \n\030offse"
  "t_freq_neighbouring\030\002 \001(\003\022\036\n\026cell_indivi"
  "dual_offset\030\003 \003(\003\022\037\n\027filter_coefficient_"
  "rsrp\030\004 \001(\003\022\037\n\027filter_coefficient_rsrq\030\005 "
  "\001(\003\022/\n\005event\030\006 \001(\0132 .protocol.flex_measu"
  "rement_event\"\377\001\n\026flex_measurement_event\022"
  ",\n\nperiodical\030\001 \001(\0132\030.protocol.flex_per_"
  "event\022#\n\002a1\030\002 \001(\0132\027.protocol.flex_a1_eve"
  "nt\022#\n\002a2\030\003 \001(\0132\027.protocol.flex_a2_event\022"
  "#\n\002a3\030\004 \001(\0132\027.protocol.flex_a3_event\022#\n\002"
  "a4\030\005 \001(\0132\027.protocol.flex_a4_event\022#\n\002a5\030"
  "\006 \001(\0132\027.protocol.flex_a5_event\"*\n\016flex_p"
  "er_event\022\030\n\020max_report_cells\030\001 \001(\003\"n\n\rfl"
  "ex_a1_event\022\026\n\016threshold_rsrp\030\001 \001(\003\022\022\n\nh"
  "ysteresis\030\002 \001(\003\022\027\n\017time_to_trigger\030\003 \001(\003"
  "\022\030\n\020max_report_cells\030\004 \001(\003\"n\n\rflex_a2_ev"
  "ent\022\026\n\016threshold_rsrp\030\001 \001(\003\022\022\n\nhysteresi"
  "s\030\002 \001(\003\022\027\n\017time_to_trigger\030\003 \001(\003\022\030\n\020max_"
  "report_cells\030\004 \001(\003\"\202\001\n\rflex_a3_event\022\021\n\t"
  "a3_offset\030\001 \001(\003\022\027\n\017report_on_leave\030\002 \001(\005"
  "\022\022\n\nhysteresis\030\003 \001(\003\022\027\n\017time_to_trigger\030"
  "\004 \001(\003\022\030\n\020max_report_cells\030\005 \001(\003\"n\n\rflex_"
  "a4_event\022\026\n\016threshold_rsrp\030\001 \001(\003\022\022\n\nhyst"
  "eresis\030\002 \001(\003\022\027\n\017time_to_trigger\030\003 \001(\003\022\030\n"
  "\020max_report_cells\030\004 \001(\003\"\212\001\n\rflex_a5_even"
  "t\022\030\n\020threshold_rsrp_1\030\001 \001(\003\022\030\n\020threshold"
  "_rsrp_2\030\002 \001(\003\022\022\n\nhysteresis\030\003 \001(\003\022\027\n\017tim"
  "e_to_trigger\030\004 \001(\003\022\030\n\020max_report_cells\030\005"
  " \001(\003\"X\n\013flex_gummei\022!\n\004plmn\030\001 \001(\0132\023.prot"
  "ocol.flex_plmn\022\024\n\014mme_group_id\030\002 \001(\r\022\020\n\010"
  "mme_code\030\003 \001(\r\"\310\001\n\rflex_s1ap_mme\022\r\n\005s1_i"
  "p\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\'\n\005state\030\003 \001(\0162\030.p"
  "rotocol.flex_mme_state\022-\n\016served_gummeis"
  "\030\004 \003(\0132\025.protocol.flex_gummei\022,\n\017request"
  "ed_plmns\030\005 \003(\0132\023.protocol.flex_plmn\022\024\n\014r"
  "el_capacity\030\006 \001(\r*8\n\021flex_hopping_mode\022\016"
  "\n\nFLHM_INTER\020\000\022\023\n\017FLHM_INTERINTRA\020\001*T\n\023f"
  "lex_phich_resource\022\022\n\016FLPR_ONE_SIXTH\020\000\022\r"
  "\n\tFLPR_HALF\020\001\022\014\n\010FLPR_ONE\020\002\022\014\n\010FLPR_TWO\020"
  "\003*9\n\023flex_phich_duration\022\017\n\013FLPD_NORMAL\020"
  "\000\022\021\n\rFLPD_EXTENDED\020\001*F\n\034flex_ul_cyclic_p"
  "refix_length\022\021\n\rFLUCPL_NORMAL\020\000\022\023\n\017FLUCP"
  "L_EXTENDED\020\001*F\n\034flex_dl_cyclic_prefix_le"
  "ngth\022\021\n\rFLDCPL_NORMAL\020\000\022\023\n\017FLDCPL_EXTEND"
  "ED\020\001*.\n\020flex_duplex_mode\022\014\n\010FLDM_TDD\020\000\022\014"
  "\n\010FLDM_FDD\020\001*2\n\010flex_qam\022\022\n\016FLEQ_MOD_16Q"
  "AM\020\000\022\022\n\016FLEQ_MOD_64QAM\020\001*5\n\024flex_slice_a"
  "lgorithm\022\010\n\004None\020\000\022\n\n\006Static\020\001\022\007\n\003NVS\020\002*"
  "N\n\034flex_meas_gap_config_pattern\022\016\n\nFLMGC"
  "P_GP1\020\000\022\016\n\nFLMGCP_GP2\020\001\022\016\n\nFLMGCP_OFF\020\002*"
  "\?\n\031flex_setup_release_action\022\017\n\013FLSRA_SE"
  "TUP\020\000\022\021\n\rFLSRA_RELEASE\020\001*Z\n\034flex_ue_tran"
  "smission_antenna\022\016\n\nFLUTA_NONE\020\000\022\023\n\017FLUT"
  "A_OPEN_LOOP\020\001\022\025\n\021FLUTA_CLOSED_LOOP\020\002*\206\001\n"
  "\036flex_aperiodic_cqi_report_mode\022\017\n\013FLACR"
  "M_RM12\020\000\022\017\n\013FLACRM_RM20\020\001\022\017\n\013FLACRM_RM22"
  "\020\002\022\017\n\013FLACRM_RM30\020\003\022\017\n\013FLACRM_RM31\020\004\022\017\n\013"
  "FLACRM_NONE\020\005*Q\n\037flex_tdd_ack_nack_feedb"
  "ack_mode\022\024\n\020FLTANFM_BUNDLING\020\000\022\030\n\024FLTANF"
  "M_MULTIPLEXING\020\001*\?\n\021flex_lc_direction\022\014\n"
  "\010FLLCD_UL\020\000\022\014\n\010FLLCD_DL\020\001\022\016\n\nFLLCD_BOTH\020"
  "\002*8\n\024flex_qos_bearer_type\022\021\n\rFLQBT_NON_G"
  "BR\020\000\022\r\n\tFLQBT_GBR\020\001*o\n\031flex_ue_state_cha"
  "nge_type\022\022\n\016FLUESC_UPDATED\020\000\022\024\n\020FLUESC_A"
  "CTIVATED\020\001\022\026\n\022FLUESC_DEACTIVATED\020\002\022\020\n\014FL"
  "UESC_MOVED\020\003*h\n\016flex_mme_state\022\027\n\023FLMMES"
  "_DISCONNECTED\020\000\022\022\n\016FLMMES_WAITING\020\001\022\024\n\020F"
  "LMMES_CONNECTED\020\002\022\023\n\017FLMMES_OVERLOAD\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_5fcommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_5fcommon_2eproto_sccs[23] = {
  &scc_info_flex_a1_event_config_5fcommon_2eproto.base,
  &scc_info_flex_a2_event_config_5fcommon_2eproto.base,
  &scc_info_flex_a3_event_config_5fcommon_2eproto.base,
  &scc_info_flex_a4_event_config_5fcommon_2eproto.base,
  &scc_info_flex_a5_event_config_5fcommon_2eproto.base,
  &scc_info_flex_cqi_config_config_5fcommon_2eproto.base,
  &scc_info_flex_drx_config_config_5fcommon_2eproto.base,
  &scc_info_flex_gummei_config_5fcommon_2eproto.base,
  &scc_info_flex_lc_config_config_5fcommon_2eproto.base,
  &scc_info_flex_measurement_event_config_5fcommon_2eproto.base,
  &scc_info_flex_measurement_info_config_5fcommon_2eproto.base,
  &scc_info_flex_per_event_config_5fcommon_2eproto.base,
  &scc_info_flex_plmn_config_5fcommon_2eproto.base,
  &scc_info_flex_s1ap_mme_config_5fcommon_2eproto.base,
  &scc_info_flex_scell_config_config_5fcommon_2eproto.base,
  &scc_info_flex_si_config_config_5fcommon_2eproto.base,
  &scc_info_flex_si_message_config_5fcommon_2eproto.base,
  &scc_info_flex_slice_config_5fcommon_2eproto.base,
  &scc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto.base,
  &scc_info_flex_slice_static_config_5fcommon_2eproto.base,
  &scc_info_flex_sps_config_config_5fcommon_2eproto.base,
  &scc_info_flex_sr_config_config_5fcommon_2eproto.base,
  &scc_info_flex_ue_capabilities_config_5fcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fcommon_2eproto = {
  false, false, descriptor_table_protodef_config_5fcommon_2eproto, "config_common.proto", 4438,
  &descriptor_table_config_5fcommon_2eproto_once, descriptor_table_config_5fcommon_2eproto_sccs, descriptor_table_config_5fcommon_2eproto_deps, 23, 0,
  schemas, file_default_instances, TableStruct_config_5fcommon_2eproto::offsets,
  file_level_metadata_config_5fcommon_2eproto, 23, file_level_enum_descriptors_config_5fcommon_2eproto, file_level_service_descriptors_config_5fcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_5fcommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_5fcommon_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_hopping_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[0];
}
bool flex_hopping_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_phich_resource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[1];
}
bool flex_phich_resource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_phich_duration_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[2];
}
bool flex_phich_duration_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ul_cyclic_prefix_length_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[3];
}
bool flex_ul_cyclic_prefix_length_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_dl_cyclic_prefix_length_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[4];
}
bool flex_dl_cyclic_prefix_length_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_duplex_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[5];
}
bool flex_duplex_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_qam_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[6];
}
bool flex_qam_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_slice_algorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[7];
}
bool flex_slice_algorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_meas_gap_config_pattern_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[8];
}
bool flex_meas_gap_config_pattern_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_setup_release_action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[9];
}
bool flex_setup_release_action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ue_transmission_antenna_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[10];
}
bool flex_ue_transmission_antenna_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_aperiodic_cqi_report_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[11];
}
bool flex_aperiodic_cqi_report_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_tdd_ack_nack_feedback_mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[12];
}
bool flex_tdd_ack_nack_feedback_mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_lc_direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[13];
}
bool flex_lc_direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_qos_bearer_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[14];
}
bool flex_qos_bearer_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ue_state_change_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[15];
}
bool flex_ue_state_change_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_mme_state_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_5fcommon_2eproto);
  return file_level_enum_descriptors_config_5fcommon_2eproto[16];
}
bool flex_mme_state_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void flex_si_config::InitAsDefaultInstance() {
}
class flex_si_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_si_config>()._has_bits_);
  static void set_has_sfn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sib1_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_si_window_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

flex_si_config::flex_si_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  si_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_si_config)
}
flex_si_config::flex_si_config(const flex_si_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      si_message_(from.si_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sfn_, &from.sfn_,
    static_cast<size_t>(reinterpret_cast<char*>(&si_window_length_) -
    reinterpret_cast<char*>(&sfn_)) + sizeof(si_window_length_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_si_config)
}

void flex_si_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_si_config_config_5fcommon_2eproto.base);
  ::memset(&sfn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&si_window_length_) -
      reinterpret_cast<char*>(&sfn_)) + sizeof(si_window_length_));
}

flex_si_config::~flex_si_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_si_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_si_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_si_config::ArenaDtor(void* object) {
  flex_si_config* _this = reinterpret_cast< flex_si_config* >(object);
  (void)_this;
}
void flex_si_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_si_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_si_config& flex_si_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_si_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_si_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_si_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  si_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&sfn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&si_window_length_) -
        reinterpret_cast<char*>(&sfn_)) + sizeof(si_window_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_si_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sfn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sfn(&has_bits);
          sfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sib1_length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sib1_length(&has_bits);
          sib1_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 si_window_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_si_window_length(&has_bits);
          si_window_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_si_message si_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_si_message(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_si_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_si_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sfn(), target);
  }

  // optional uint32 sib1_length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sib1_length(), target);
  }

  // optional uint32 si_window_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_si_window_length(), target);
  }

  // repeated .protocol.flex_si_message si_message = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_si_message_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_si_message(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_si_config)
  return target;
}

size_t flex_si_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_si_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_si_message si_message = 4;
  total_size += 1UL * this->_internal_si_message_size();
  for (const auto& msg : this->si_message_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 sfn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sfn());
    }

    // optional uint32 sib1_length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sib1_length());
    }

    // optional uint32 si_window_length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_si_window_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_si_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_si_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_si_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_si_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_si_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_si_config)
    MergeFrom(*source);
  }
}

void flex_si_config::MergeFrom(const flex_si_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_si_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  si_message_.MergeFrom(from.si_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sfn_ = from.sfn_;
    }
    if (cached_has_bits & 0x00000002u) {
      sib1_length_ = from.sib1_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      si_window_length_ = from.si_window_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_si_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_si_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_si_config::CopyFrom(const flex_si_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_si_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_si_config::IsInitialized() const {
  return true;
}

void flex_si_config::InternalSwap(flex_si_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  si_message_.InternalSwap(&other->si_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_si_config, si_window_length_)
      + sizeof(flex_si_config::si_window_length_)
      - PROTOBUF_FIELD_OFFSET(flex_si_config, sfn_)>(
          reinterpret_cast<char*>(&sfn_),
          reinterpret_cast<char*>(&other->sfn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_si_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_si_message::InitAsDefaultInstance() {
}
class flex_si_message::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_si_message>()._has_bits_);
  static void set_has_periodicity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_si_message::flex_si_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_si_message)
}
flex_si_message::flex_si_message(const flex_si_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&periodicity_, &from.periodicity_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&periodicity_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_si_message)
}

void flex_si_message::SharedCtor() {
  ::memset(&periodicity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&periodicity_)) + sizeof(length_));
}

flex_si_message::~flex_si_message() {
  // @@protoc_insertion_point(destructor:protocol.flex_si_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_si_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_si_message::ArenaDtor(void* object) {
  flex_si_message* _this = reinterpret_cast< flex_si_message* >(object);
  (void)_this;
}
void flex_si_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_si_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_si_message& flex_si_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_si_message_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_si_message::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_si_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&periodicity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&periodicity_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_si_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 periodicity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_periodicity(&has_bits);
          periodicity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_si_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_si_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 periodicity = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_periodicity(), target);
  }

  // optional uint32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_si_message)
  return target;
}

size_t flex_si_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_si_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 periodicity = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_periodicity());
    }

    // optional uint32 length = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_si_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_si_message)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_si_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_si_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_si_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_si_message)
    MergeFrom(*source);
  }
}

void flex_si_message::MergeFrom(const flex_si_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_si_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      periodicity_ = from.periodicity_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_si_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_si_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_si_message::CopyFrom(const flex_si_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_si_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_si_message::IsInitialized() const {
  return true;
}

void flex_si_message::InternalSwap(flex_si_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_si_message, length_)
      + sizeof(flex_si_message::length_)
      - PROTOBUF_FIELD_OFFSET(flex_si_message, periodicity_)>(
          reinterpret_cast<char*>(&periodicity_),
          reinterpret_cast<char*>(&other->periodicity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_si_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_slice_static::InitAsDefaultInstance() {
}
class flex_slice_static::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_slice_static>()._has_bits_);
  static void set_has_poslow(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_poshigh(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_slice_static::flex_slice_static(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_slice_static)
}
flex_slice_static::flex_slice_static(const flex_slice_static& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&poslow_, &from.poslow_,
    static_cast<size_t>(reinterpret_cast<char*>(&poshigh_) -
    reinterpret_cast<char*>(&poslow_)) + sizeof(poshigh_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice_static)
}

void flex_slice_static::SharedCtor() {
  ::memset(&poslow_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poshigh_) -
      reinterpret_cast<char*>(&poslow_)) + sizeof(poshigh_));
}

flex_slice_static::~flex_slice_static() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice_static)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_slice_static::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_slice_static::ArenaDtor(void* object) {
  flex_slice_static* _this = reinterpret_cast< flex_slice_static* >(object);
  (void)_this;
}
void flex_slice_static::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_slice_static::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_slice_static& flex_slice_static::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_slice_static_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_slice_static::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice_static)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&poslow_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poshigh_) -
        reinterpret_cast<char*>(&poslow_)) + sizeof(poshigh_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_slice_static::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 posLow = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_poslow(&has_bits);
          poslow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 posHigh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_poshigh(&has_bits);
          poshigh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_slice_static::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice_static)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 posLow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_poslow(), target);
  }

  // optional uint32 posHigh = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_poshigh(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice_static)
  return target;
}

size_t flex_slice_static::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice_static)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 posLow = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poslow());
    }

    // optional uint32 posHigh = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_poshigh());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_slice_static::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice_static)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice_static* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_slice_static>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice_static)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice_static)
    MergeFrom(*source);
  }
}

void flex_slice_static::MergeFrom(const flex_slice_static& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice_static)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      poslow_ = from.poslow_;
    }
    if (cached_has_bits & 0x00000002u) {
      poshigh_ = from.poshigh_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_slice_static::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice_static)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice_static::CopyFrom(const flex_slice_static& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice_static)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice_static::IsInitialized() const {
  return true;
}

void flex_slice_static::InternalSwap(flex_slice_static* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_slice_static, poshigh_)
      + sizeof(flex_slice_static::poshigh_)
      - PROTOBUF_FIELD_OFFSET(flex_slice_static, poslow_)>(
          reinterpret_cast<char*>(&poslow_),
          reinterpret_cast<char*>(&other->poslow_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_slice_static::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_slice::InitAsDefaultInstance() {
  ::protocol::_flex_slice_default_instance_.static__ = const_cast< ::protocol::flex_slice_static*>(
      ::protocol::flex_slice_static::internal_default_instance());
}
class flex_slice::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_slice>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protocol::flex_slice_static& static_(const flex_slice* msg);
};

const ::protocol::flex_slice_static&
flex_slice::_Internal::static_(const flex_slice* msg) {
  return *msg->params_.static__;
}
void flex_slice::set_allocated_static_(::protocol::flex_slice_static* static_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_params();
  if (static_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(static_);
    if (message_arena != submessage_arena) {
      static_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, static_, submessage_arena);
    }
    set_has_static_();
    params_.static__ = static_;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice.static)
}
flex_slice::flex_slice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_slice)
}
flex_slice::flex_slice(const flex_slice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_label()) {
    label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_label(),
      GetArena());
  }
  scheduler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheduler()) {
    scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scheduler(),
      GetArena());
  }
  id_ = from.id_;
  clear_has_params();
  switch (from.params_case()) {
    case kStatic: {
      _internal_mutable_static_()->::protocol::flex_slice_static::MergeFrom(from._internal_static_());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice)
}

void flex_slice::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_slice_config_5fcommon_2eproto.base);
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  clear_has_params();
}

flex_slice::~flex_slice() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_slice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scheduler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_params()) {
    clear_params();
  }
}

void flex_slice::ArenaDtor(void* object) {
  flex_slice* _this = reinterpret_cast< flex_slice* >(object);
  (void)_this;
}
void flex_slice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_slice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_slice& flex_slice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_slice_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_slice::clear_params() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flex_slice)
  switch (params_case()) {
    case kStatic: {
      if (GetArena() == nullptr) {
        delete params_.static__;
      }
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMS_NOT_SET;
}


void flex_slice::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      scheduler_.ClearNonDefaultToEmpty();
    }
  }
  id_ = 0u;
  clear_params();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_slice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_slice.label");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string scheduler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scheduler();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_slice.scheduler");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_slice_static static = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_static_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_slice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional string scheduler = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheduler().data(), static_cast<int>(this->_internal_scheduler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice.scheduler");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scheduler(), target);
  }

  // .protocol.flex_slice_static static = 10;
  if (_internal_has_static_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::static_(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice)
  return target;
}

size_t flex_slice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string label = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string scheduler = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scheduler());
    }

    // optional uint32 id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_id());
    }

  }
  switch (params_case()) {
    // .protocol.flex_slice_static static = 10;
    case kStatic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *params_.static__);
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_slice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_slice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice)
    MergeFrom(*source);
  }
}

void flex_slice::MergeFrom(const flex_slice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_scheduler(from._internal_scheduler());
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.params_case()) {
    case kStatic: {
      _internal_mutable_static_()->::protocol::flex_slice_static::MergeFrom(from._internal_static_());
      break;
    }
    case PARAMS_NOT_SET: {
      break;
    }
  }
}

void flex_slice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice::CopyFrom(const flex_slice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice::IsInitialized() const {
  return true;
}

void flex_slice::InternalSwap(flex_slice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  label_.Swap(&other->label_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  scheduler_.Swap(&other->scheduler_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
  swap(params_, other->params_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_slice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_slice_dl_ul_config::InitAsDefaultInstance() {
}
class flex_slice_dl_ul_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_slice_dl_ul_config>()._has_bits_);
  static void set_has_algorithm(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_scheduler(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_slice_dl_ul_config::flex_slice_dl_ul_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  slices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_slice_dl_ul_config)
}
flex_slice_dl_ul_config::flex_slice_dl_ul_config(const flex_slice_dl_ul_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      slices_(from.slices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  scheduler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_scheduler()) {
    scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_scheduler(),
      GetArena());
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_slice_dl_ul_config)
}

void flex_slice_dl_ul_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto.base);
  scheduler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

flex_slice_dl_ul_config::~flex_slice_dl_ul_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_slice_dl_ul_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_slice_dl_ul_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  scheduler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void flex_slice_dl_ul_config::ArenaDtor(void* object) {
  flex_slice_dl_ul_config* _this = reinterpret_cast< flex_slice_dl_ul_config* >(object);
  (void)_this;
}
void flex_slice_dl_ul_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_slice_dl_ul_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_slice_dl_ul_config& flex_slice_dl_ul_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_slice_dl_ul_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_slice_dl_ul_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_slice_dl_ul_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slices_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    scheduler_.ClearNonDefaultToEmpty();
  }
  algorithm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_slice_dl_ul_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_slice_algorithm algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protocol::flex_slice_algorithm_IsValid(val))) {
            _internal_set_algorithm(static_cast<::protocol::flex_slice_algorithm>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_slice slices = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional string scheduler = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_scheduler();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_slice_dl_ul_config.scheduler");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_slice_dl_ul_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_slice_dl_ul_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_slice_algorithm algorithm = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_algorithm(), target);
  }

  // repeated .protocol.flex_slice slices = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_slices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_slices(i), target, stream);
  }

  // optional string scheduler = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_scheduler().data(), static_cast<int>(this->_internal_scheduler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_slice_dl_ul_config.scheduler");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_scheduler(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_slice_dl_ul_config)
  return target;
}

size_t flex_slice_dl_ul_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_slice_dl_ul_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_slice slices = 2;
  total_size += 1UL * this->_internal_slices_size();
  for (const auto& msg : this->slices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string scheduler = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_scheduler());
    }

    // optional .protocol.flex_slice_algorithm algorithm = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_slice_dl_ul_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_slice_dl_ul_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_slice_dl_ul_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_slice_dl_ul_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_slice_dl_ul_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_slice_dl_ul_config)
    MergeFrom(*source);
  }
}

void flex_slice_dl_ul_config::MergeFrom(const flex_slice_dl_ul_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_slice_dl_ul_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  slices_.MergeFrom(from.slices_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_scheduler(from._internal_scheduler());
    }
    if (cached_has_bits & 0x00000002u) {
      algorithm_ = from.algorithm_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_slice_dl_ul_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_slice_dl_ul_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_slice_dl_ul_config::CopyFrom(const flex_slice_dl_ul_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_slice_dl_ul_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_slice_dl_ul_config::IsInitialized() const {
  return true;
}

void flex_slice_dl_ul_config::InternalSwap(flex_slice_dl_ul_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slices_.InternalSwap(&other->slices_);
  scheduler_.Swap(&other->scheduler_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_slice_dl_ul_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_drx_config::InitAsDefaultInstance() {
}
class flex_drx_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_drx_config>()._has_bits_);
  static void set_has_on_duration_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_drx_inactivity_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drx_retransmission_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_long_drx_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_long_drx_cycle_start_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_short_drx_cycle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_drx_short_cycle_timer(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

flex_drx_config::flex_drx_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_drx_config)
}
flex_drx_config::flex_drx_config(const flex_drx_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&on_duration_timer_, &from.on_duration_timer_,
    static_cast<size_t>(reinterpret_cast<char*>(&drx_short_cycle_timer_) -
    reinterpret_cast<char*>(&on_duration_timer_)) + sizeof(drx_short_cycle_timer_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_drx_config)
}

void flex_drx_config::SharedCtor() {
  ::memset(&on_duration_timer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drx_short_cycle_timer_) -
      reinterpret_cast<char*>(&on_duration_timer_)) + sizeof(drx_short_cycle_timer_));
}

flex_drx_config::~flex_drx_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_drx_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_drx_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_drx_config::ArenaDtor(void* object) {
  flex_drx_config* _this = reinterpret_cast< flex_drx_config* >(object);
  (void)_this;
}
void flex_drx_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_drx_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_drx_config& flex_drx_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_drx_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_drx_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_drx_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&on_duration_timer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drx_short_cycle_timer_) -
        reinterpret_cast<char*>(&on_duration_timer_)) + sizeof(drx_short_cycle_timer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_drx_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 on_duration_timer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_on_duration_timer(&has_bits);
          on_duration_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drx_inactivity_timer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_drx_inactivity_timer(&has_bits);
          drx_inactivity_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drx_retransmission_timer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_drx_retransmission_timer(&has_bits);
          drx_retransmission_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 long_drx_cycle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_long_drx_cycle(&has_bits);
          long_drx_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 long_drx_cycle_start_offset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_long_drx_cycle_start_offset(&has_bits);
          long_drx_cycle_start_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 short_drx_cycle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_short_drx_cycle(&has_bits);
          short_drx_cycle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 drx_short_cycle_timer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_drx_short_cycle_timer(&has_bits);
          drx_short_cycle_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_drx_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_drx_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 on_duration_timer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_on_duration_timer(), target);
  }

  // optional uint32 drx_inactivity_timer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_drx_inactivity_timer(), target);
  }

  // optional uint32 drx_retransmission_timer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_drx_retransmission_timer(), target);
  }

  // optional uint32 long_drx_cycle = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_long_drx_cycle(), target);
  }

  // optional uint32 long_drx_cycle_start_offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_long_drx_cycle_start_offset(), target);
  }

  // optional uint32 short_drx_cycle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_short_drx_cycle(), target);
  }

  // optional uint32 drx_short_cycle_timer = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_drx_short_cycle_timer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_drx_config)
  return target;
}

size_t flex_drx_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_drx_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 on_duration_timer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_on_duration_timer());
    }

    // optional uint32 drx_inactivity_timer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drx_inactivity_timer());
    }

    // optional uint32 drx_retransmission_timer = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drx_retransmission_timer());
    }

    // optional uint32 long_drx_cycle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_long_drx_cycle());
    }

    // optional uint32 long_drx_cycle_start_offset = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_long_drx_cycle_start_offset());
    }

    // optional uint32 short_drx_cycle = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_short_drx_cycle());
    }

    // optional uint32 drx_short_cycle_timer = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_drx_short_cycle_timer());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_drx_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_drx_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_drx_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_drx_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_drx_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_drx_config)
    MergeFrom(*source);
  }
}

void flex_drx_config::MergeFrom(const flex_drx_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_drx_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      on_duration_timer_ = from.on_duration_timer_;
    }
    if (cached_has_bits & 0x00000002u) {
      drx_inactivity_timer_ = from.drx_inactivity_timer_;
    }
    if (cached_has_bits & 0x00000004u) {
      drx_retransmission_timer_ = from.drx_retransmission_timer_;
    }
    if (cached_has_bits & 0x00000008u) {
      long_drx_cycle_ = from.long_drx_cycle_;
    }
    if (cached_has_bits & 0x00000010u) {
      long_drx_cycle_start_offset_ = from.long_drx_cycle_start_offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      short_drx_cycle_ = from.short_drx_cycle_;
    }
    if (cached_has_bits & 0x00000040u) {
      drx_short_cycle_timer_ = from.drx_short_cycle_timer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_drx_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_drx_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_drx_config::CopyFrom(const flex_drx_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_drx_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_drx_config::IsInitialized() const {
  return true;
}

void flex_drx_config::InternalSwap(flex_drx_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_drx_config, drx_short_cycle_timer_)
      + sizeof(flex_drx_config::drx_short_cycle_timer_)
      - PROTOBUF_FIELD_OFFSET(flex_drx_config, on_duration_timer_)>(
          reinterpret_cast<char*>(&on_duration_timer_),
          reinterpret_cast<char*>(&other->on_duration_timer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_drx_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_sps_config::InitAsDefaultInstance() {
}
class flex_sps_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_sps_config>()._has_bits_);
  static void set_has_semi_persistent_sched_interval_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_semi_persistent_sched_interval_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_num_of_conf_sps_proc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_implicit_release_after(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_sps_config::flex_sps_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  n1_pucch_an_persistent_element_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_sps_config)
}
flex_sps_config::flex_sps_config(const flex_sps_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      n1_pucch_an_persistent_element_(from.n1_pucch_an_persistent_element_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&semi_persistent_sched_interval_ul_, &from.semi_persistent_sched_interval_ul_,
    static_cast<size_t>(reinterpret_cast<char*>(&implicit_release_after_) -
    reinterpret_cast<char*>(&semi_persistent_sched_interval_ul_)) + sizeof(implicit_release_after_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_sps_config)
}

void flex_sps_config::SharedCtor() {
  ::memset(&semi_persistent_sched_interval_ul_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&implicit_release_after_) -
      reinterpret_cast<char*>(&semi_persistent_sched_interval_ul_)) + sizeof(implicit_release_after_));
}

flex_sps_config::~flex_sps_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_sps_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_sps_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_sps_config::ArenaDtor(void* object) {
  flex_sps_config* _this = reinterpret_cast< flex_sps_config* >(object);
  (void)_this;
}
void flex_sps_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_sps_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_sps_config& flex_sps_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_sps_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_sps_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_sps_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  n1_pucch_an_persistent_element_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&semi_persistent_sched_interval_ul_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&implicit_release_after_) -
        reinterpret_cast<char*>(&semi_persistent_sched_interval_ul_)) + sizeof(implicit_release_after_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_sps_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 semi_persistent_sched_interval_UL = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_semi_persistent_sched_interval_ul(&has_bits);
          semi_persistent_sched_interval_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 semi_persistent_sched_interval_DL = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_semi_persistent_sched_interval_dl(&has_bits);
          semi_persistent_sched_interval_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 num_of_conf_sps_proc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_num_of_conf_sps_proc(&has_bits);
          num_of_conf_sps_proc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_n1_pucch_an_persistent_element(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_n1_pucch_an_persistent_element(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 implicit_release_after = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_implicit_release_after(&has_bits);
          implicit_release_after_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_sps_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_sps_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 semi_persistent_sched_interval_UL = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_semi_persistent_sched_interval_ul(), target);
  }

  // optional uint32 semi_persistent_sched_interval_DL = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_semi_persistent_sched_interval_dl(), target);
  }

  // optional uint32 num_of_conf_sps_proc = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_num_of_conf_sps_proc(), target);
  }

  // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
  for (int i = 0, n = this->_internal_n1_pucch_an_persistent_element_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_n1_pucch_an_persistent_element(i), target);
  }

  // optional uint32 implicit_release_after = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_implicit_release_after(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_sps_config)
  return target;
}

size_t flex_sps_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_sps_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->n1_pucch_an_persistent_element_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_n1_pucch_an_persistent_element_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 semi_persistent_sched_interval_UL = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_semi_persistent_sched_interval_ul());
    }

    // optional uint32 semi_persistent_sched_interval_DL = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_semi_persistent_sched_interval_dl());
    }

    // optional uint32 num_of_conf_sps_proc = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_num_of_conf_sps_proc());
    }

    // optional uint32 implicit_release_after = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_implicit_release_after());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_sps_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_sps_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_sps_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_sps_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_sps_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_sps_config)
    MergeFrom(*source);
  }
}

void flex_sps_config::MergeFrom(const flex_sps_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_sps_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  n1_pucch_an_persistent_element_.MergeFrom(from.n1_pucch_an_persistent_element_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      semi_persistent_sched_interval_ul_ = from.semi_persistent_sched_interval_ul_;
    }
    if (cached_has_bits & 0x00000002u) {
      semi_persistent_sched_interval_dl_ = from.semi_persistent_sched_interval_dl_;
    }
    if (cached_has_bits & 0x00000004u) {
      num_of_conf_sps_proc_ = from.num_of_conf_sps_proc_;
    }
    if (cached_has_bits & 0x00000008u) {
      implicit_release_after_ = from.implicit_release_after_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_sps_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_sps_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_sps_config::CopyFrom(const flex_sps_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_sps_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_sps_config::IsInitialized() const {
  return true;
}

void flex_sps_config::InternalSwap(flex_sps_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  n1_pucch_an_persistent_element_.InternalSwap(&other->n1_pucch_an_persistent_element_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_sps_config, implicit_release_after_)
      + sizeof(flex_sps_config::implicit_release_after_)
      - PROTOBUF_FIELD_OFFSET(flex_sps_config, semi_persistent_sched_interval_ul_)>(
          reinterpret_cast<char*>(&semi_persistent_sched_interval_ul_),
          reinterpret_cast<char*>(&other->semi_persistent_sched_interval_ul_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_sps_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_sr_config::InitAsDefaultInstance() {
}
class flex_sr_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_sr_config>()._has_bits_);
  static void set_has_sr_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sched_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dsr_trans_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

flex_sr_config::flex_sr_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_sr_config)
}
flex_sr_config::flex_sr_config(const flex_sr_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sr_action_, &from.sr_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&dsr_trans_max_) -
    reinterpret_cast<char*>(&sr_action_)) + sizeof(dsr_trans_max_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_sr_config)
}

void flex_sr_config::SharedCtor() {
  ::memset(&sr_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dsr_trans_max_) -
      reinterpret_cast<char*>(&sr_action_)) + sizeof(dsr_trans_max_));
}

flex_sr_config::~flex_sr_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_sr_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_sr_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_sr_config::ArenaDtor(void* object) {
  flex_sr_config* _this = reinterpret_cast< flex_sr_config* >(object);
  (void)_this;
}
void flex_sr_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_sr_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_sr_config& flex_sr_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_sr_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_sr_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_sr_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&sr_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dsr_trans_max_) -
        reinterpret_cast<char*>(&sr_action_)) + sizeof(dsr_trans_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_sr_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sr_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sr_action(&has_bits);
          sr_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sched_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sched_interval(&has_bits);
          sched_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dsr_trans_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dsr_trans_max(&has_bits);
          dsr_trans_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_sr_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_sr_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sr_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sr_action(), target);
  }

  // optional uint32 sched_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sched_interval(), target);
  }

  // optional uint32 dsr_trans_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dsr_trans_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_sr_config)
  return target;
}

size_t flex_sr_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_sr_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 sr_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sr_action());
    }

    // optional uint32 sched_interval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sched_interval());
    }

    // optional uint32 dsr_trans_max = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dsr_trans_max());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_sr_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_sr_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_sr_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_sr_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_sr_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_sr_config)
    MergeFrom(*source);
  }
}

void flex_sr_config::MergeFrom(const flex_sr_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_sr_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      sr_action_ = from.sr_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      sched_interval_ = from.sched_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      dsr_trans_max_ = from.dsr_trans_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_sr_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_sr_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_sr_config::CopyFrom(const flex_sr_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_sr_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_sr_config::IsInitialized() const {
  return true;
}

void flex_sr_config::InternalSwap(flex_sr_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_sr_config, dsr_trans_max_)
      + sizeof(flex_sr_config::dsr_trans_max_)
      - PROTOBUF_FIELD_OFFSET(flex_sr_config, sr_action_)>(
          reinterpret_cast<char*>(&sr_action_),
          reinterpret_cast<char*>(&other->sr_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_sr_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_cqi_config::InitAsDefaultInstance() {
}
class flex_cqi_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_cqi_config>()._has_bits_);
  static void set_has_cqi_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cqi_sched_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ri_sched_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

flex_cqi_config::flex_cqi_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_cqi_config)
}
flex_cqi_config::flex_cqi_config(const flex_cqi_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&cqi_action_, &from.cqi_action_,
    static_cast<size_t>(reinterpret_cast<char*>(&ri_sched_interval_) -
    reinterpret_cast<char*>(&cqi_action_)) + sizeof(ri_sched_interval_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cqi_config)
}

void flex_cqi_config::SharedCtor() {
  ::memset(&cqi_action_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ri_sched_interval_) -
      reinterpret_cast<char*>(&cqi_action_)) + sizeof(ri_sched_interval_));
}

flex_cqi_config::~flex_cqi_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_cqi_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_cqi_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_cqi_config::ArenaDtor(void* object) {
  flex_cqi_config* _this = reinterpret_cast< flex_cqi_config* >(object);
  (void)_this;
}
void flex_cqi_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_cqi_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_cqi_config& flex_cqi_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_cqi_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_cqi_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cqi_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&cqi_action_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ri_sched_interval_) -
        reinterpret_cast<char*>(&cqi_action_)) + sizeof(ri_sched_interval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_cqi_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 cqi_action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_cqi_action(&has_bits);
          cqi_action_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cqi_sched_interval = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cqi_sched_interval(&has_bits);
          cqi_sched_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ri_sched_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ri_sched_interval(&has_bits);
          ri_sched_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_cqi_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cqi_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 cqi_action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cqi_action(), target);
  }

  // optional uint32 cqi_sched_interval = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cqi_sched_interval(), target);
  }

  // optional uint32 ri_sched_interval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ri_sched_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cqi_config)
  return target;
}

size_t flex_cqi_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cqi_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 cqi_action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cqi_action());
    }

    // optional uint32 cqi_sched_interval = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cqi_sched_interval());
    }

    // optional uint32 ri_sched_interval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ri_sched_interval());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_cqi_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cqi_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cqi_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_cqi_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cqi_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cqi_config)
    MergeFrom(*source);
  }
}

void flex_cqi_config::MergeFrom(const flex_cqi_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cqi_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      cqi_action_ = from.cqi_action_;
    }
    if (cached_has_bits & 0x00000002u) {
      cqi_sched_interval_ = from.cqi_sched_interval_;
    }
    if (cached_has_bits & 0x00000004u) {
      ri_sched_interval_ = from.ri_sched_interval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_cqi_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cqi_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cqi_config::CopyFrom(const flex_cqi_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cqi_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cqi_config::IsInitialized() const {
  return true;
}

void flex_cqi_config::InternalSwap(flex_cqi_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_cqi_config, ri_sched_interval_)
      + sizeof(flex_cqi_config::ri_sched_interval_)
      - PROTOBUF_FIELD_OFFSET(flex_cqi_config, cqi_action_)>(
          reinterpret_cast<char*>(&cqi_action_),
          reinterpret_cast<char*>(&other->cqi_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_cqi_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ue_capabilities::InitAsDefaultInstance() {
}
class flex_ue_capabilities::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ue_capabilities>()._has_bits_);
  static void set_has_half_duplex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_intra_sf_hopping(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type2_sb_1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ue_category(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_res_alloc_type1(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

flex_ue_capabilities::flex_ue_capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ue_capabilities)
}
flex_ue_capabilities::flex_ue_capabilities(const flex_ue_capabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&half_duplex_, &from.half_duplex_,
    static_cast<size_t>(reinterpret_cast<char*>(&res_alloc_type1_) -
    reinterpret_cast<char*>(&half_duplex_)) + sizeof(res_alloc_type1_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_capabilities)
}

void flex_ue_capabilities::SharedCtor() {
  ::memset(&half_duplex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&res_alloc_type1_) -
      reinterpret_cast<char*>(&half_duplex_)) + sizeof(res_alloc_type1_));
}

flex_ue_capabilities::~flex_ue_capabilities() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_capabilities)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ue_capabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_ue_capabilities::ArenaDtor(void* object) {
  flex_ue_capabilities* _this = reinterpret_cast< flex_ue_capabilities* >(object);
  (void)_this;
}
void flex_ue_capabilities::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ue_capabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ue_capabilities& flex_ue_capabilities::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ue_capabilities_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_ue_capabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&half_duplex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&res_alloc_type1_) -
        reinterpret_cast<char*>(&half_duplex_)) + sizeof(res_alloc_type1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ue_capabilities::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 half_duplex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_half_duplex(&has_bits);
          half_duplex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 intra_SF_hopping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_intra_sf_hopping(&has_bits);
          intra_sf_hopping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type2_sb_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_type2_sb_1(&has_bits);
          type2_sb_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ue_category = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ue_category(&has_bits);
          ue_category_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 res_alloc_type1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_res_alloc_type1(&has_bits);
          res_alloc_type1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ue_capabilities::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_capabilities)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 half_duplex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_half_duplex(), target);
  }

  // optional uint32 intra_SF_hopping = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_intra_sf_hopping(), target);
  }

  // optional uint32 type2_sb_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_type2_sb_1(), target);
  }

  // optional uint32 ue_category = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ue_category(), target);
  }

  // optional uint32 res_alloc_type1 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_res_alloc_type1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_capabilities)
  return target;
}

size_t flex_ue_capabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_capabilities)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 half_duplex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_half_duplex());
    }

    // optional uint32 intra_SF_hopping = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_intra_sf_hopping());
    }

    // optional uint32 type2_sb_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type2_sb_1());
    }

    // optional uint32 ue_category = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ue_category());
    }

    // optional uint32 res_alloc_type1 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_res_alloc_type1());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ue_capabilities::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_capabilities* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ue_capabilities>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_capabilities)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_capabilities)
    MergeFrom(*source);
  }
}

void flex_ue_capabilities::MergeFrom(const flex_ue_capabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_capabilities)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      half_duplex_ = from.half_duplex_;
    }
    if (cached_has_bits & 0x00000002u) {
      intra_sf_hopping_ = from.intra_sf_hopping_;
    }
    if (cached_has_bits & 0x00000004u) {
      type2_sb_1_ = from.type2_sb_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      ue_category_ = from.ue_category_;
    }
    if (cached_has_bits & 0x00000010u) {
      res_alloc_type1_ = from.res_alloc_type1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_capabilities::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_capabilities::CopyFrom(const flex_ue_capabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_capabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_capabilities::IsInitialized() const {
  return true;
}

void flex_ue_capabilities::InternalSwap(flex_ue_capabilities* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ue_capabilities, res_alloc_type1_)
      + sizeof(flex_ue_capabilities::res_alloc_type1_)
      - PROTOBUF_FIELD_OFFSET(flex_ue_capabilities, half_duplex_)>(
          reinterpret_cast<char*>(&half_duplex_),
          reinterpret_cast<char*>(&other->half_duplex_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ue_capabilities::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_scell_config::InitAsDefaultInstance() {
}
class flex_scell_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_scell_config>()._has_bits_);
  static void set_has_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_use_ccs(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sched_cell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pdsch_start(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

flex_scell_config::flex_scell_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_scell_config)
}
flex_scell_config::flex_scell_config(const flex_scell_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&carrier_index_, &from.carrier_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&pdsch_start_) -
    reinterpret_cast<char*>(&carrier_index_)) + sizeof(pdsch_start_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_scell_config)
}

void flex_scell_config::SharedCtor() {
  ::memset(&carrier_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pdsch_start_) -
      reinterpret_cast<char*>(&carrier_index_)) + sizeof(pdsch_start_));
}

flex_scell_config::~flex_scell_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_scell_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_scell_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_scell_config::ArenaDtor(void* object) {
  flex_scell_config* _this = reinterpret_cast< flex_scell_config* >(object);
  (void)_this;
}
void flex_scell_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_scell_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_scell_config& flex_scell_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_scell_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_scell_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_scell_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&carrier_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pdsch_start_) -
        reinterpret_cast<char*>(&carrier_index_)) + sizeof(pdsch_start_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_scell_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 carrier_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_carrier_index(&has_bits);
          carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 scell_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_scell_index(&has_bits);
          scell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 use_ccs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_use_ccs(&has_bits);
          use_ccs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sched_cell_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sched_cell_index(&has_bits);
          sched_cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdsch_start = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pdsch_start(&has_bits);
          pdsch_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_scell_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_scell_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_carrier_index(), target);
  }

  // optional uint32 scell_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_scell_index(), target);
  }

  // optional uint32 use_ccs = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_use_ccs(), target);
  }

  // optional uint32 sched_cell_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sched_cell_index(), target);
  }

  // optional uint32 pdsch_start = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pdsch_start(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_scell_config)
  return target;
}

size_t flex_scell_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_scell_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 carrier_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_carrier_index());
    }

    // optional uint32 scell_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_scell_index());
    }

    // optional uint32 use_ccs = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_use_ccs());
    }

    // optional uint32 sched_cell_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sched_cell_index());
    }

    // optional uint32 pdsch_start = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdsch_start());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_scell_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_scell_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_scell_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_scell_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_scell_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_scell_config)
    MergeFrom(*source);
  }
}

void flex_scell_config::MergeFrom(const flex_scell_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_scell_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      scell_index_ = from.scell_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      use_ccs_ = from.use_ccs_;
    }
    if (cached_has_bits & 0x00000008u) {
      sched_cell_index_ = from.sched_cell_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      pdsch_start_ = from.pdsch_start_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_scell_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_scell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_scell_config::CopyFrom(const flex_scell_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_scell_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_scell_config::IsInitialized() const {
  return true;
}

void flex_scell_config::InternalSwap(flex_scell_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_scell_config, pdsch_start_)
      + sizeof(flex_scell_config::pdsch_start_)
      - PROTOBUF_FIELD_OFFSET(flex_scell_config, carrier_index_)>(
          reinterpret_cast<char*>(&carrier_index_),
          reinterpret_cast<char*>(&other->carrier_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_scell_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_lc_config::InitAsDefaultInstance() {
}
class flex_lc_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_lc_config>()._has_bits_);
  static void set_has_lcid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lcg(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_qos_bearer_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_qci(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_e_rab_max_bitrate_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_e_rab_max_bitrate_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_e_rab_guaranteed_bitrate_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_e_rab_guaranteed_bitrate_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

flex_lc_config::flex_lc_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_lc_config)
}
flex_lc_config::flex_lc_config(const flex_lc_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lcid_, &from.lcid_,
    static_cast<size_t>(reinterpret_cast<char*>(&qci_) -
    reinterpret_cast<char*>(&lcid_)) + sizeof(qci_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_config)
}

void flex_lc_config::SharedCtor() {
  ::memset(&lcid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qci_) -
      reinterpret_cast<char*>(&lcid_)) + sizeof(qci_));
}

flex_lc_config::~flex_lc_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_lc_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_lc_config::ArenaDtor(void* object) {
  flex_lc_config* _this = reinterpret_cast< flex_lc_config* >(object);
  (void)_this;
}
void flex_lc_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_lc_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_lc_config& flex_lc_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_lc_config_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_lc_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&lcid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&e_rab_guaranteed_bitrate_dl_) -
        reinterpret_cast<char*>(&lcid_)) + sizeof(e_rab_guaranteed_bitrate_dl_));
  }
  qci_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_lc_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lcid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lcid(&has_bits);
          lcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lcg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lcg(&has_bits);
          lcg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_direction(&has_bits);
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 qos_bearer_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_qos_bearer_type(&has_bits);
          qos_bearer_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 qci = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_qci(&has_bits);
          qci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 e_RAB_max_bitrate_UL = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_e_rab_max_bitrate_ul(&has_bits);
          e_rab_max_bitrate_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 e_RAB_max_bitrate_DL = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_e_rab_max_bitrate_dl(&has_bits);
          e_rab_max_bitrate_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_e_rab_guaranteed_bitrate_ul(&has_bits);
          e_rab_guaranteed_bitrate_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_e_rab_guaranteed_bitrate_dl(&has_bits);
          e_rab_guaranteed_bitrate_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_lc_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lcid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lcid(), target);
  }

  // optional uint32 lcg = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lcg(), target);
  }

  // optional uint32 direction = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_direction(), target);
  }

  // optional uint32 qos_bearer_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_qos_bearer_type(), target);
  }

  // optional uint32 qci = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_qci(), target);
  }

  // optional uint64 e_RAB_max_bitrate_UL = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_e_rab_max_bitrate_ul(), target);
  }

  // optional uint64 e_RAB_max_bitrate_DL = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_e_rab_max_bitrate_dl(), target);
  }

  // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_e_rab_guaranteed_bitrate_ul(), target);
  }

  // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_e_rab_guaranteed_bitrate_dl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_config)
  return target;
}

size_t flex_lc_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 lcid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lcid());
    }

    // optional uint32 lcg = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lcg());
    }

    // optional uint32 direction = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_direction());
    }

    // optional uint32 qos_bearer_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_qos_bearer_type());
    }

    // optional uint64 e_RAB_max_bitrate_UL = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_e_rab_max_bitrate_ul());
    }

    // optional uint64 e_RAB_max_bitrate_DL = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_e_rab_max_bitrate_dl());
    }

    // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_e_rab_guaranteed_bitrate_ul());
    }

    // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_e_rab_guaranteed_bitrate_dl());
    }

  }
  // optional uint32 qci = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_qci());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_lc_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_lc_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_config)
    MergeFrom(*source);
  }
}

void flex_lc_config::MergeFrom(const flex_lc_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      lcid_ = from.lcid_;
    }
    if (cached_has_bits & 0x00000002u) {
      lcg_ = from.lcg_;
    }
    if (cached_has_bits & 0x00000004u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000008u) {
      qos_bearer_type_ = from.qos_bearer_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      e_rab_max_bitrate_ul_ = from.e_rab_max_bitrate_ul_;
    }
    if (cached_has_bits & 0x00000020u) {
      e_rab_max_bitrate_dl_ = from.e_rab_max_bitrate_dl_;
    }
    if (cached_has_bits & 0x00000040u) {
      e_rab_guaranteed_bitrate_ul_ = from.e_rab_guaranteed_bitrate_ul_;
    }
    if (cached_has_bits & 0x00000080u) {
      e_rab_guaranteed_bitrate_dl_ = from.e_rab_guaranteed_bitrate_dl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_qci(from._internal_qci());
  }
}

void flex_lc_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_config::CopyFrom(const flex_lc_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_config::IsInitialized() const {
  return true;
}

void flex_lc_config::InternalSwap(flex_lc_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_lc_config, qci_)
      + sizeof(flex_lc_config::qci_)
      - PROTOBUF_FIELD_OFFSET(flex_lc_config, lcid_)>(
          reinterpret_cast<char*>(&lcid_),
          reinterpret_cast<char*>(&other->lcid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_lc_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_plmn::InitAsDefaultInstance() {
}
class flex_plmn::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_plmn>()._has_bits_);
  static void set_has_mcc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mnc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mnc_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

flex_plmn::flex_plmn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_plmn)
}
flex_plmn::flex_plmn(const flex_plmn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&mcc_, &from.mcc_,
    static_cast<size_t>(reinterpret_cast<char*>(&mnc_length_) -
    reinterpret_cast<char*>(&mcc_)) + sizeof(mnc_length_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_plmn)
}

void flex_plmn::SharedCtor() {
  ::memset(&mcc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mnc_length_) -
      reinterpret_cast<char*>(&mcc_)) + sizeof(mnc_length_));
}

flex_plmn::~flex_plmn() {
  // @@protoc_insertion_point(destructor:protocol.flex_plmn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_plmn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_plmn::ArenaDtor(void* object) {
  flex_plmn* _this = reinterpret_cast< flex_plmn* >(object);
  (void)_this;
}
void flex_plmn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_plmn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_plmn& flex_plmn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_plmn_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_plmn::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_plmn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&mcc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mnc_length_) -
        reinterpret_cast<char*>(&mcc_)) + sizeof(mnc_length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_plmn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 mcc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_mcc(&has_bits);
          mcc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mnc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mnc(&has_bits);
          mnc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mnc_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mnc_length(&has_bits);
          mnc_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_plmn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_plmn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 mcc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_mcc(), target);
  }

  // optional uint32 mnc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mnc(), target);
  }

  // optional uint32 mnc_length = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mnc_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_plmn)
  return target;
}

size_t flex_plmn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_plmn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 mcc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mcc());
    }

    // optional uint32 mnc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mnc());
    }

    // optional uint32 mnc_length = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mnc_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_plmn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_plmn)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_plmn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_plmn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_plmn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_plmn)
    MergeFrom(*source);
  }
}

void flex_plmn::MergeFrom(const flex_plmn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_plmn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mcc_ = from.mcc_;
    }
    if (cached_has_bits & 0x00000002u) {
      mnc_ = from.mnc_;
    }
    if (cached_has_bits & 0x00000004u) {
      mnc_length_ = from.mnc_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_plmn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_plmn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_plmn::CopyFrom(const flex_plmn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_plmn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_plmn::IsInitialized() const {
  return true;
}

void flex_plmn::InternalSwap(flex_plmn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_plmn, mnc_length_)
      + sizeof(flex_plmn::mnc_length_)
      - PROTOBUF_FIELD_OFFSET(flex_plmn, mcc_)>(
          reinterpret_cast<char*>(&mcc_),
          reinterpret_cast<char*>(&other->mcc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_plmn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_measurement_info::InitAsDefaultInstance() {
  ::protocol::_flex_measurement_info_default_instance_._instance.get_mutable()->event_ = const_cast< ::protocol::flex_measurement_event*>(
      ::protocol::flex_measurement_event::internal_default_instance());
}
class flex_measurement_info::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_measurement_info>()._has_bits_);
  static void set_has_offset_freq_serving(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_offset_freq_neighbouring(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_filter_coefficient_rsrp(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_filter_coefficient_rsrq(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protocol::flex_measurement_event& event(const flex_measurement_info* msg);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_measurement_event&
flex_measurement_info::_Internal::event(const flex_measurement_info* msg) {
  return *msg->event_;
}
flex_measurement_info::flex_measurement_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_individual_offset_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_measurement_info)
}
flex_measurement_info::flex_measurement_info(const flex_measurement_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_individual_offset_(from.cell_individual_offset_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::protocol::flex_measurement_event(*from.event_);
  } else {
    event_ = nullptr;
  }
  ::memcpy(&offset_freq_serving_, &from.offset_freq_serving_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_coefficient_rsrq_) -
    reinterpret_cast<char*>(&offset_freq_serving_)) + sizeof(filter_coefficient_rsrq_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_measurement_info)
}

void flex_measurement_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_measurement_info_config_5fcommon_2eproto.base);
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_coefficient_rsrq_) -
      reinterpret_cast<char*>(&event_)) + sizeof(filter_coefficient_rsrq_));
}

flex_measurement_info::~flex_measurement_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_measurement_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_measurement_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete event_;
}

void flex_measurement_info::ArenaDtor(void* object) {
  flex_measurement_info* _this = reinterpret_cast< flex_measurement_info* >(object);
  (void)_this;
}
void flex_measurement_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_measurement_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_measurement_info& flex_measurement_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_measurement_info_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_measurement_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_measurement_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_individual_offset_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(event_ != nullptr);
    event_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&offset_freq_serving_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&filter_coefficient_rsrq_) -
        reinterpret_cast<char*>(&offset_freq_serving_)) + sizeof(filter_coefficient_rsrq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_measurement_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 offset_freq_serving = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_offset_freq_serving(&has_bits);
          offset_freq_serving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 offset_freq_neighbouring = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset_freq_neighbouring(&has_bits);
          offset_freq_neighbouring_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 cell_individual_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cell_individual_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_cell_individual_offset(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 filter_coefficient_rsrp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_filter_coefficient_rsrp(&has_bits);
          filter_coefficient_rsrp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 filter_coefficient_rsrq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_filter_coefficient_rsrq(&has_bits);
          filter_coefficient_rsrq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_measurement_event event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_measurement_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_measurement_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 offset_freq_serving = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_offset_freq_serving(), target);
  }

  // optional int64 offset_freq_neighbouring = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset_freq_neighbouring(), target);
  }

  // repeated int64 cell_individual_offset = 3;
  for (int i = 0, n = this->_internal_cell_individual_offset_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_cell_individual_offset(i), target);
  }

  // optional int64 filter_coefficient_rsrp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_filter_coefficient_rsrp(), target);
  }

  // optional int64 filter_coefficient_rsrq = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_filter_coefficient_rsrq(), target);
  }

  // optional .protocol.flex_measurement_event event = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_measurement_info)
  return target;
}

size_t flex_measurement_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_measurement_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 cell_individual_offset = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->cell_individual_offset_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cell_individual_offset_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .protocol.flex_measurement_event event = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_);
    }

    // optional int64 offset_freq_serving = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_offset_freq_serving());
    }

    // optional int64 offset_freq_neighbouring = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_offset_freq_neighbouring());
    }

    // optional int64 filter_coefficient_rsrp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_filter_coefficient_rsrp());
    }

    // optional int64 filter_coefficient_rsrq = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_filter_coefficient_rsrq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_measurement_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_measurement_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_measurement_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_measurement_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_measurement_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_measurement_info)
    MergeFrom(*source);
  }
}

void flex_measurement_info::MergeFrom(const flex_measurement_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_measurement_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_individual_offset_.MergeFrom(from.cell_individual_offset_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_event()->::protocol::flex_measurement_event::MergeFrom(from._internal_event());
    }
    if (cached_has_bits & 0x00000002u) {
      offset_freq_serving_ = from.offset_freq_serving_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_freq_neighbouring_ = from.offset_freq_neighbouring_;
    }
    if (cached_has_bits & 0x00000008u) {
      filter_coefficient_rsrp_ = from.filter_coefficient_rsrp_;
    }
    if (cached_has_bits & 0x00000010u) {
      filter_coefficient_rsrq_ = from.filter_coefficient_rsrq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_measurement_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_measurement_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_measurement_info::CopyFrom(const flex_measurement_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_measurement_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_measurement_info::IsInitialized() const {
  return true;
}

void flex_measurement_info::InternalSwap(flex_measurement_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_individual_offset_.InternalSwap(&other->cell_individual_offset_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_measurement_info, filter_coefficient_rsrq_)
      + sizeof(flex_measurement_info::filter_coefficient_rsrq_)
      - PROTOBUF_FIELD_OFFSET(flex_measurement_info, event_)>(
          reinterpret_cast<char*>(&event_),
          reinterpret_cast<char*>(&other->event_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_measurement_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_measurement_event::InitAsDefaultInstance() {
  ::protocol::_flex_measurement_event_default_instance_._instance.get_mutable()->periodical_ = const_cast< ::protocol::flex_per_event*>(
      ::protocol::flex_per_event::internal_default_instance());
  ::protocol::_flex_measurement_event_default_instance_._instance.get_mutable()->a1_ = const_cast< ::protocol::flex_a1_event*>(
      ::protocol::flex_a1_event::internal_default_instance());
  ::protocol::_flex_measurement_event_default_instance_._instance.get_mutable()->a2_ = const_cast< ::protocol::flex_a2_event*>(
      ::protocol::flex_a2_event::internal_default_instance());
  ::protocol::_flex_measurement_event_default_instance_._instance.get_mutable()->a3_ = const_cast< ::protocol::flex_a3_event*>(
      ::protocol::flex_a3_event::internal_default_instance());
  ::protocol::_flex_measurement_event_default_instance_._instance.get_mutable()->a4_ = const_cast< ::protocol::flex_a4_event*>(
      ::protocol::flex_a4_event::internal_default_instance());
  ::protocol::_flex_measurement_event_default_instance_._instance.get_mutable()->a5_ = const_cast< ::protocol::flex_a5_event*>(
      ::protocol::flex_a5_event::internal_default_instance());
}
class flex_measurement_event::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_measurement_event>()._has_bits_);
  static const ::protocol::flex_per_event& periodical(const flex_measurement_event* msg);
  static void set_has_periodical(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protocol::flex_a1_event& a1(const flex_measurement_event* msg);
  static void set_has_a1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protocol::flex_a2_event& a2(const flex_measurement_event* msg);
  static void set_has_a2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_a3_event& a3(const flex_measurement_event* msg);
  static void set_has_a3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protocol::flex_a4_event& a4(const flex_measurement_event* msg);
  static void set_has_a4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protocol::flex_a5_event& a5(const flex_measurement_event* msg);
  static void set_has_a5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::protocol::flex_per_event&
flex_measurement_event::_Internal::periodical(const flex_measurement_event* msg) {
  return *msg->periodical_;
}
const ::protocol::flex_a1_event&
flex_measurement_event::_Internal::a1(const flex_measurement_event* msg) {
  return *msg->a1_;
}
const ::protocol::flex_a2_event&
flex_measurement_event::_Internal::a2(const flex_measurement_event* msg) {
  return *msg->a2_;
}
const ::protocol::flex_a3_event&
flex_measurement_event::_Internal::a3(const flex_measurement_event* msg) {
  return *msg->a3_;
}
const ::protocol::flex_a4_event&
flex_measurement_event::_Internal::a4(const flex_measurement_event* msg) {
  return *msg->a4_;
}
const ::protocol::flex_a5_event&
flex_measurement_event::_Internal::a5(const flex_measurement_event* msg) {
  return *msg->a5_;
}
flex_measurement_event::flex_measurement_event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_measurement_event)
}
flex_measurement_event::flex_measurement_event(const flex_measurement_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_periodical()) {
    periodical_ = new ::protocol::flex_per_event(*from.periodical_);
  } else {
    periodical_ = nullptr;
  }
  if (from._internal_has_a1()) {
    a1_ = new ::protocol::flex_a1_event(*from.a1_);
  } else {
    a1_ = nullptr;
  }
  if (from._internal_has_a2()) {
    a2_ = new ::protocol::flex_a2_event(*from.a2_);
  } else {
    a2_ = nullptr;
  }
  if (from._internal_has_a3()) {
    a3_ = new ::protocol::flex_a3_event(*from.a3_);
  } else {
    a3_ = nullptr;
  }
  if (from._internal_has_a4()) {
    a4_ = new ::protocol::flex_a4_event(*from.a4_);
  } else {
    a4_ = nullptr;
  }
  if (from._internal_has_a5()) {
    a5_ = new ::protocol::flex_a5_event(*from.a5_);
  } else {
    a5_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_measurement_event)
}

void flex_measurement_event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_measurement_event_config_5fcommon_2eproto.base);
  ::memset(&periodical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a5_) -
      reinterpret_cast<char*>(&periodical_)) + sizeof(a5_));
}

flex_measurement_event::~flex_measurement_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_measurement_event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_measurement_event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete periodical_;
  if (this != internal_default_instance()) delete a1_;
  if (this != internal_default_instance()) delete a2_;
  if (this != internal_default_instance()) delete a3_;
  if (this != internal_default_instance()) delete a4_;
  if (this != internal_default_instance()) delete a5_;
}

void flex_measurement_event::ArenaDtor(void* object) {
  flex_measurement_event* _this = reinterpret_cast< flex_measurement_event* >(object);
  (void)_this;
}
void flex_measurement_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_measurement_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_measurement_event& flex_measurement_event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_measurement_event_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_measurement_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_measurement_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(periodical_ != nullptr);
      periodical_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(a1_ != nullptr);
      a1_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(a2_ != nullptr);
      a2_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(a3_ != nullptr);
      a3_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(a4_ != nullptr);
      a4_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(a5_ != nullptr);
      a5_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_measurement_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_per_event periodical = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_periodical(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_a1_event a1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_a1(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_a2_event a2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_a2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_a3_event a3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_a3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_a4_event a4 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_a4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_a5_event a5 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_a5(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_measurement_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_measurement_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_per_event periodical = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::periodical(this), target, stream);
  }

  // optional .protocol.flex_a1_event a1 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::a1(this), target, stream);
  }

  // optional .protocol.flex_a2_event a2 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::a2(this), target, stream);
  }

  // optional .protocol.flex_a3_event a3 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::a3(this), target, stream);
  }

  // optional .protocol.flex_a4_event a4 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::a4(this), target, stream);
  }

  // optional .protocol.flex_a5_event a5 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::a5(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_measurement_event)
  return target;
}

size_t flex_measurement_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_measurement_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .protocol.flex_per_event periodical = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *periodical_);
    }

    // optional .protocol.flex_a1_event a1 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a1_);
    }

    // optional .protocol.flex_a2_event a2 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a2_);
    }

    // optional .protocol.flex_a3_event a3 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a3_);
    }

    // optional .protocol.flex_a4_event a4 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a4_);
    }

    // optional .protocol.flex_a5_event a5 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *a5_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_measurement_event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_measurement_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_measurement_event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_measurement_event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_measurement_event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_measurement_event)
    MergeFrom(*source);
  }
}

void flex_measurement_event::MergeFrom(const flex_measurement_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_measurement_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_periodical()->::protocol::flex_per_event::MergeFrom(from._internal_periodical());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_a1()->::protocol::flex_a1_event::MergeFrom(from._internal_a1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_a2()->::protocol::flex_a2_event::MergeFrom(from._internal_a2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_a3()->::protocol::flex_a3_event::MergeFrom(from._internal_a3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_a4()->::protocol::flex_a4_event::MergeFrom(from._internal_a4());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_a5()->::protocol::flex_a5_event::MergeFrom(from._internal_a5());
    }
  }
}

void flex_measurement_event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_measurement_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_measurement_event::CopyFrom(const flex_measurement_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_measurement_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_measurement_event::IsInitialized() const {
  return true;
}

void flex_measurement_event::InternalSwap(flex_measurement_event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_measurement_event, a5_)
      + sizeof(flex_measurement_event::a5_)
      - PROTOBUF_FIELD_OFFSET(flex_measurement_event, periodical_)>(
          reinterpret_cast<char*>(&periodical_),
          reinterpret_cast<char*>(&other->periodical_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_measurement_event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_per_event::InitAsDefaultInstance() {
}
class flex_per_event::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_per_event>()._has_bits_);
  static void set_has_max_report_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_per_event::flex_per_event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_per_event)
}
flex_per_event::flex_per_event(const flex_per_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  max_report_cells_ = from.max_report_cells_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_per_event)
}

void flex_per_event::SharedCtor() {
  max_report_cells_ = PROTOBUF_LONGLONG(0);
}

flex_per_event::~flex_per_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_per_event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_per_event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_per_event::ArenaDtor(void* object) {
  flex_per_event* _this = reinterpret_cast< flex_per_event* >(object);
  (void)_this;
}
void flex_per_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_per_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_per_event& flex_per_event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_per_event_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_per_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_per_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_report_cells_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_per_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 max_report_cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_max_report_cells(&has_bits);
          max_report_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_per_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_per_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 max_report_cells = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_max_report_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_per_event)
  return target;
}

size_t flex_per_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_per_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 max_report_cells = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_max_report_cells());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_per_event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_per_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_per_event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_per_event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_per_event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_per_event)
    MergeFrom(*source);
  }
}

void flex_per_event::MergeFrom(const flex_per_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_per_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_max_report_cells()) {
    _internal_set_max_report_cells(from._internal_max_report_cells());
  }
}

void flex_per_event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_per_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_per_event::CopyFrom(const flex_per_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_per_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_per_event::IsInitialized() const {
  return true;
}

void flex_per_event::InternalSwap(flex_per_event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(max_report_cells_, other->max_report_cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_per_event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_a1_event::InitAsDefaultInstance() {
}
class flex_a1_event::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_a1_event>()._has_bits_);
  static void set_has_threshold_rsrp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_to_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_report_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_a1_event::flex_a1_event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_a1_event)
}
flex_a1_event::flex_a1_event(const flex_a1_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_, &from.threshold_rsrp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a1_event)
}

void flex_a1_event::SharedCtor() {
  ::memset(&threshold_rsrp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
}

flex_a1_event::~flex_a1_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a1_event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_a1_event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_a1_event::ArenaDtor(void* object) {
  flex_a1_event* _this = reinterpret_cast< flex_a1_event* >(object);
  (void)_this;
}
void flex_a1_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_a1_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_a1_event& flex_a1_event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_a1_event_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_a1_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a1_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&threshold_rsrp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_report_cells_) -
        reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_a1_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 threshold_rsrp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_threshold_rsrp(&has_bits);
          threshold_rsrp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hysteresis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hysteresis(&has_bits);
          hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_to_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_to_trigger(&has_bits);
          time_to_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_report_cells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_report_cells(&has_bits);
          max_report_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_a1_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a1_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_threshold_rsrp(), target);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_hysteresis(), target);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_report_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a1_event)
  return target;
}

size_t flex_a1_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a1_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 threshold_rsrp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_threshold_rsrp());
    }

    // optional int64 hysteresis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_hysteresis());
    }

    // optional int64 time_to_trigger = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_to_trigger());
    }

    // optional int64 max_report_cells = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_report_cells());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_a1_event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a1_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a1_event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_a1_event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a1_event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a1_event)
    MergeFrom(*source);
  }
}

void flex_a1_event::MergeFrom(const flex_a1_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a1_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_ = from.threshold_rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a1_event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a1_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a1_event::CopyFrom(const flex_a1_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a1_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a1_event::IsInitialized() const {
  return true;
}

void flex_a1_event::InternalSwap(flex_a1_event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_a1_event, max_report_cells_)
      + sizeof(flex_a1_event::max_report_cells_)
      - PROTOBUF_FIELD_OFFSET(flex_a1_event, threshold_rsrp_)>(
          reinterpret_cast<char*>(&threshold_rsrp_),
          reinterpret_cast<char*>(&other->threshold_rsrp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_a1_event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_a2_event::InitAsDefaultInstance() {
}
class flex_a2_event::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_a2_event>()._has_bits_);
  static void set_has_threshold_rsrp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_to_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_report_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_a2_event::flex_a2_event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_a2_event)
}
flex_a2_event::flex_a2_event(const flex_a2_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_, &from.threshold_rsrp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a2_event)
}

void flex_a2_event::SharedCtor() {
  ::memset(&threshold_rsrp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
}

flex_a2_event::~flex_a2_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a2_event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_a2_event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_a2_event::ArenaDtor(void* object) {
  flex_a2_event* _this = reinterpret_cast< flex_a2_event* >(object);
  (void)_this;
}
void flex_a2_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_a2_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_a2_event& flex_a2_event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_a2_event_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_a2_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a2_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&threshold_rsrp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_report_cells_) -
        reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_a2_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 threshold_rsrp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_threshold_rsrp(&has_bits);
          threshold_rsrp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hysteresis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hysteresis(&has_bits);
          hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_to_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_to_trigger(&has_bits);
          time_to_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_report_cells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_report_cells(&has_bits);
          max_report_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_a2_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a2_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_threshold_rsrp(), target);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_hysteresis(), target);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_report_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a2_event)
  return target;
}

size_t flex_a2_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a2_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 threshold_rsrp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_threshold_rsrp());
    }

    // optional int64 hysteresis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_hysteresis());
    }

    // optional int64 time_to_trigger = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_to_trigger());
    }

    // optional int64 max_report_cells = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_report_cells());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_a2_event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a2_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a2_event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_a2_event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a2_event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a2_event)
    MergeFrom(*source);
  }
}

void flex_a2_event::MergeFrom(const flex_a2_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a2_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_ = from.threshold_rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a2_event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a2_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a2_event::CopyFrom(const flex_a2_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a2_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a2_event::IsInitialized() const {
  return true;
}

void flex_a2_event::InternalSwap(flex_a2_event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_a2_event, max_report_cells_)
      + sizeof(flex_a2_event::max_report_cells_)
      - PROTOBUF_FIELD_OFFSET(flex_a2_event, threshold_rsrp_)>(
          reinterpret_cast<char*>(&threshold_rsrp_),
          reinterpret_cast<char*>(&other->threshold_rsrp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_a2_event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_a3_event::InitAsDefaultInstance() {
}
class flex_a3_event::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_a3_event>()._has_bits_);
  static void set_has_a3_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_report_on_leave(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_to_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_report_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_a3_event::flex_a3_event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_a3_event)
}
flex_a3_event::flex_a3_event(const flex_a3_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a3_offset_, &from.a3_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_on_leave_) -
    reinterpret_cast<char*>(&a3_offset_)) + sizeof(report_on_leave_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a3_event)
}

void flex_a3_event::SharedCtor() {
  ::memset(&a3_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_on_leave_) -
      reinterpret_cast<char*>(&a3_offset_)) + sizeof(report_on_leave_));
}

flex_a3_event::~flex_a3_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a3_event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_a3_event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_a3_event::ArenaDtor(void* object) {
  flex_a3_event* _this = reinterpret_cast< flex_a3_event* >(object);
  (void)_this;
}
void flex_a3_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_a3_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_a3_event& flex_a3_event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_a3_event_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_a3_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a3_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&a3_offset_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&report_on_leave_) -
        reinterpret_cast<char*>(&a3_offset_)) + sizeof(report_on_leave_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_a3_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 a3_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a3_offset(&has_bits);
          a3_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 report_on_leave = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_report_on_leave(&has_bits);
          report_on_leave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hysteresis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hysteresis(&has_bits);
          hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_to_trigger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_to_trigger(&has_bits);
          time_to_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_report_cells = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_report_cells(&has_bits);
          max_report_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_a3_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a3_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 a3_offset = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_a3_offset(), target);
  }

  // optional int32 report_on_leave = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_report_on_leave(), target);
  }

  // optional int64 hysteresis = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_hysteresis(), target);
  }

  // optional int64 time_to_trigger = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_max_report_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a3_event)
  return target;
}

size_t flex_a3_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a3_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 a3_offset = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_a3_offset());
    }

    // optional int64 hysteresis = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_hysteresis());
    }

    // optional int64 time_to_trigger = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_to_trigger());
    }

    // optional int64 max_report_cells = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_report_cells());
    }

    // optional int32 report_on_leave = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_report_on_leave());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_a3_event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a3_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a3_event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_a3_event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a3_event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a3_event)
    MergeFrom(*source);
  }
}

void flex_a3_event::MergeFrom(const flex_a3_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a3_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      a3_offset_ = from.a3_offset_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    if (cached_has_bits & 0x00000010u) {
      report_on_leave_ = from.report_on_leave_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a3_event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a3_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a3_event::CopyFrom(const flex_a3_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a3_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a3_event::IsInitialized() const {
  return true;
}

void flex_a3_event::InternalSwap(flex_a3_event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_a3_event, report_on_leave_)
      + sizeof(flex_a3_event::report_on_leave_)
      - PROTOBUF_FIELD_OFFSET(flex_a3_event, a3_offset_)>(
          reinterpret_cast<char*>(&a3_offset_),
          reinterpret_cast<char*>(&other->a3_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_a3_event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_a4_event::InitAsDefaultInstance() {
}
class flex_a4_event::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_a4_event>()._has_bits_);
  static void set_has_threshold_rsrp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time_to_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_report_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_a4_event::flex_a4_event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_a4_event)
}
flex_a4_event::flex_a4_event(const flex_a4_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_, &from.threshold_rsrp_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a4_event)
}

void flex_a4_event::SharedCtor() {
  ::memset(&threshold_rsrp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
}

flex_a4_event::~flex_a4_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a4_event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_a4_event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_a4_event::ArenaDtor(void* object) {
  flex_a4_event* _this = reinterpret_cast< flex_a4_event* >(object);
  (void)_this;
}
void flex_a4_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_a4_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_a4_event& flex_a4_event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_a4_event_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_a4_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a4_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&threshold_rsrp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_report_cells_) -
        reinterpret_cast<char*>(&threshold_rsrp_)) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_a4_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 threshold_rsrp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_threshold_rsrp(&has_bits);
          threshold_rsrp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hysteresis = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_hysteresis(&has_bits);
          hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_to_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time_to_trigger(&has_bits);
          time_to_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_report_cells = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_max_report_cells(&has_bits);
          max_report_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_a4_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a4_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_threshold_rsrp(), target);
  }

  // optional int64 hysteresis = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_hysteresis(), target);
  }

  // optional int64 time_to_trigger = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_max_report_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a4_event)
  return target;
}

size_t flex_a4_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a4_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int64 threshold_rsrp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_threshold_rsrp());
    }

    // optional int64 hysteresis = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_hysteresis());
    }

    // optional int64 time_to_trigger = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_to_trigger());
    }

    // optional int64 max_report_cells = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_report_cells());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_a4_event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a4_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a4_event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_a4_event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a4_event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a4_event)
    MergeFrom(*source);
  }
}

void flex_a4_event::MergeFrom(const flex_a4_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a4_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_ = from.threshold_rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a4_event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a4_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a4_event::CopyFrom(const flex_a4_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a4_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a4_event::IsInitialized() const {
  return true;
}

void flex_a4_event::InternalSwap(flex_a4_event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_a4_event, max_report_cells_)
      + sizeof(flex_a4_event::max_report_cells_)
      - PROTOBUF_FIELD_OFFSET(flex_a4_event, threshold_rsrp_)>(
          reinterpret_cast<char*>(&threshold_rsrp_),
          reinterpret_cast<char*>(&other->threshold_rsrp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_a4_event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_a5_event::InitAsDefaultInstance() {
}
class flex_a5_event::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_a5_event>()._has_bits_);
  static void set_has_threshold_rsrp_1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_threshold_rsrp_2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hysteresis(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time_to_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_max_report_cells(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

flex_a5_event::flex_a5_event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_a5_event)
}
flex_a5_event::flex_a5_event(const flex_a5_event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&threshold_rsrp_1_, &from.threshold_rsrp_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_report_cells_) -
    reinterpret_cast<char*>(&threshold_rsrp_1_)) + sizeof(max_report_cells_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_a5_event)
}

void flex_a5_event::SharedCtor() {
  ::memset(&threshold_rsrp_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_report_cells_) -
      reinterpret_cast<char*>(&threshold_rsrp_1_)) + sizeof(max_report_cells_));
}

flex_a5_event::~flex_a5_event() {
  // @@protoc_insertion_point(destructor:protocol.flex_a5_event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_a5_event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_a5_event::ArenaDtor(void* object) {
  flex_a5_event* _this = reinterpret_cast< flex_a5_event* >(object);
  (void)_this;
}
void flex_a5_event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_a5_event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_a5_event& flex_a5_event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_a5_event_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_a5_event::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_a5_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&threshold_rsrp_1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_report_cells_) -
        reinterpret_cast<char*>(&threshold_rsrp_1_)) + sizeof(max_report_cells_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_a5_event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 threshold_rsrp_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_threshold_rsrp_1(&has_bits);
          threshold_rsrp_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 threshold_rsrp_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_threshold_rsrp_2(&has_bits);
          threshold_rsrp_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 hysteresis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_hysteresis(&has_bits);
          hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 time_to_trigger = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time_to_trigger(&has_bits);
          time_to_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 max_report_cells = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_max_report_cells(&has_bits);
          max_report_cells_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_a5_event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_a5_event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 threshold_rsrp_1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_threshold_rsrp_1(), target);
  }

  // optional int64 threshold_rsrp_2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_threshold_rsrp_2(), target);
  }

  // optional int64 hysteresis = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_hysteresis(), target);
  }

  // optional int64 time_to_trigger = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time_to_trigger(), target);
  }

  // optional int64 max_report_cells = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_max_report_cells(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_a5_event)
  return target;
}

size_t flex_a5_event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_a5_event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 threshold_rsrp_1 = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_threshold_rsrp_1());
    }

    // optional int64 threshold_rsrp_2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_threshold_rsrp_2());
    }

    // optional int64 hysteresis = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_hysteresis());
    }

    // optional int64 time_to_trigger = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_time_to_trigger());
    }

    // optional int64 max_report_cells = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_max_report_cells());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_a5_event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_a5_event)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_a5_event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_a5_event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_a5_event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_a5_event)
    MergeFrom(*source);
  }
}

void flex_a5_event::MergeFrom(const flex_a5_event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_a5_event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      threshold_rsrp_1_ = from.threshold_rsrp_1_;
    }
    if (cached_has_bits & 0x00000002u) {
      threshold_rsrp_2_ = from.threshold_rsrp_2_;
    }
    if (cached_has_bits & 0x00000004u) {
      hysteresis_ = from.hysteresis_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_to_trigger_ = from.time_to_trigger_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_report_cells_ = from.max_report_cells_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_a5_event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_a5_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_a5_event::CopyFrom(const flex_a5_event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_a5_event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_a5_event::IsInitialized() const {
  return true;
}

void flex_a5_event::InternalSwap(flex_a5_event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_a5_event, max_report_cells_)
      + sizeof(flex_a5_event::max_report_cells_)
      - PROTOBUF_FIELD_OFFSET(flex_a5_event, threshold_rsrp_1_)>(
          reinterpret_cast<char*>(&threshold_rsrp_1_),
          reinterpret_cast<char*>(&other->threshold_rsrp_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_a5_event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_gummei::InitAsDefaultInstance() {
  ::protocol::_flex_gummei_default_instance_._instance.get_mutable()->plmn_ = const_cast< ::protocol::flex_plmn*>(
      ::protocol::flex_plmn::internal_default_instance());
}
class flex_gummei::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_gummei>()._has_bits_);
  static const ::protocol::flex_plmn& plmn(const flex_gummei* msg);
  static void set_has_plmn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mme_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mme_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protocol::flex_plmn&
flex_gummei::_Internal::plmn(const flex_gummei* msg) {
  return *msg->plmn_;
}
flex_gummei::flex_gummei(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_gummei)
}
flex_gummei::flex_gummei(const flex_gummei& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plmn()) {
    plmn_ = new ::protocol::flex_plmn(*from.plmn_);
  } else {
    plmn_ = nullptr;
  }
  ::memcpy(&mme_group_id_, &from.mme_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mme_code_) -
    reinterpret_cast<char*>(&mme_group_id_)) + sizeof(mme_code_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_gummei)
}

void flex_gummei::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_gummei_config_5fcommon_2eproto.base);
  ::memset(&plmn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mme_code_) -
      reinterpret_cast<char*>(&plmn_)) + sizeof(mme_code_));
}

flex_gummei::~flex_gummei() {
  // @@protoc_insertion_point(destructor:protocol.flex_gummei)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_gummei::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plmn_;
}

void flex_gummei::ArenaDtor(void* object) {
  flex_gummei* _this = reinterpret_cast< flex_gummei* >(object);
  (void)_this;
}
void flex_gummei::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_gummei::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_gummei& flex_gummei::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_gummei_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_gummei::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_gummei)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plmn_ != nullptr);
    plmn_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&mme_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mme_code_) -
        reinterpret_cast<char*>(&mme_group_id_)) + sizeof(mme_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_gummei::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_plmn plmn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plmn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mme_group_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mme_group_id(&has_bits);
          mme_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mme_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mme_code(&has_bits);
          mme_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_gummei::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_gummei)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_plmn plmn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plmn(this), target, stream);
  }

  // optional uint32 mme_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_mme_group_id(), target);
  }

  // optional uint32 mme_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mme_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_gummei)
  return target;
}

size_t flex_gummei::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_gummei)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protocol.flex_plmn plmn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plmn_);
    }

    // optional uint32 mme_group_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mme_group_id());
    }

    // optional uint32 mme_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mme_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_gummei::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_gummei)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_gummei* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_gummei>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_gummei)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_gummei)
    MergeFrom(*source);
  }
}

void flex_gummei::MergeFrom(const flex_gummei& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_gummei)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_plmn()->::protocol::flex_plmn::MergeFrom(from._internal_plmn());
    }
    if (cached_has_bits & 0x00000002u) {
      mme_group_id_ = from.mme_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      mme_code_ = from.mme_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_gummei::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_gummei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_gummei::CopyFrom(const flex_gummei& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_gummei)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_gummei::IsInitialized() const {
  return true;
}

void flex_gummei::InternalSwap(flex_gummei* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_gummei, mme_code_)
      + sizeof(flex_gummei::mme_code_)
      - PROTOBUF_FIELD_OFFSET(flex_gummei, plmn_)>(
          reinterpret_cast<char*>(&plmn_),
          reinterpret_cast<char*>(&other->plmn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_gummei::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_s1ap_mme::InitAsDefaultInstance() {
}
class flex_s1ap_mme::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_s1ap_mme>()._has_bits_);
  static void set_has_s1_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_state(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rel_capacity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_s1ap_mme::flex_s1ap_mme(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  served_gummeis_(arena),
  requested_plmns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_s1ap_mme)
}
flex_s1ap_mme::flex_s1ap_mme(const flex_s1ap_mme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      served_gummeis_(from.served_gummeis_),
      requested_plmns_(from.requested_plmns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  s1_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_s1_ip()) {
    s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_s1_ip(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&rel_capacity_) -
    reinterpret_cast<char*>(&state_)) + sizeof(rel_capacity_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_s1ap_mme)
}

void flex_s1ap_mme::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_s1ap_mme_config_5fcommon_2eproto.base);
  s1_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rel_capacity_) -
      reinterpret_cast<char*>(&state_)) + sizeof(rel_capacity_));
}

flex_s1ap_mme::~flex_s1ap_mme() {
  // @@protoc_insertion_point(destructor:protocol.flex_s1ap_mme)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_s1ap_mme::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  s1_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void flex_s1ap_mme::ArenaDtor(void* object) {
  flex_s1ap_mme* _this = reinterpret_cast< flex_s1ap_mme* >(object);
  (void)_this;
}
void flex_s1ap_mme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_s1ap_mme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_s1ap_mme& flex_s1ap_mme::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_s1ap_mme_config_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_s1ap_mme::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_s1ap_mme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  served_gummeis_.Clear();
  requested_plmns_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      s1_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&state_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rel_capacity_) -
        reinterpret_cast<char*>(&state_)) + sizeof(rel_capacity_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_s1ap_mme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string s1_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_s1_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_s1ap_mme.s1_ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_s1ap_mme.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_mme_state state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protocol::flex_mme_state_IsValid(val))) {
            _internal_set_state(static_cast<::protocol::flex_mme_state>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_gummei served_gummeis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_served_gummeis(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_plmn requested_plmns = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_requested_plmns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 rel_capacity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rel_capacity(&has_bits);
          rel_capacity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_s1ap_mme::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_s1ap_mme)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string s1_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_s1_ip().data(), static_cast<int>(this->_internal_s1_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_mme.s1_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_s1_ip(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_mme.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional .protocol.flex_mme_state state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // repeated .protocol.flex_gummei served_gummeis = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_served_gummeis_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_served_gummeis(i), target, stream);
  }

  // repeated .protocol.flex_plmn requested_plmns = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_requested_plmns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_requested_plmns(i), target, stream);
  }

  // optional uint32 rel_capacity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rel_capacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_s1ap_mme)
  return target;
}

size_t flex_s1ap_mme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_s1ap_mme)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_gummei served_gummeis = 4;
  total_size += 1UL * this->_internal_served_gummeis_size();
  for (const auto& msg : this->served_gummeis_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_plmn requested_plmns = 5;
  total_size += 1UL * this->_internal_requested_plmns_size();
  for (const auto& msg : this->requested_plmns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string s1_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_s1_ip());
    }

    // optional string name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .protocol.flex_mme_state state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
    }

    // optional uint32 rel_capacity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rel_capacity());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_s1ap_mme::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_s1ap_mme)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_s1ap_mme* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_s1ap_mme>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_s1ap_mme)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_s1ap_mme)
    MergeFrom(*source);
  }
}

void flex_s1ap_mme::MergeFrom(const flex_s1ap_mme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_s1ap_mme)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  served_gummeis_.MergeFrom(from.served_gummeis_);
  requested_plmns_.MergeFrom(from.requested_plmns_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_s1_ip(from._internal_s1_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000008u) {
      rel_capacity_ = from.rel_capacity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_s1ap_mme::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_s1ap_mme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_s1ap_mme::CopyFrom(const flex_s1ap_mme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_s1ap_mme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_s1ap_mme::IsInitialized() const {
  return true;
}

void flex_s1ap_mme::InternalSwap(flex_s1ap_mme* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  served_gummeis_.InternalSwap(&other->served_gummeis_);
  requested_plmns_.InternalSwap(&other->requested_plmns_);
  s1_ip_.Swap(&other->s1_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_s1ap_mme, rel_capacity_)
      + sizeof(flex_s1ap_mme::rel_capacity_)
      - PROTOBUF_FIELD_OFFSET(flex_s1ap_mme, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_s1ap_mme::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flex_si_config* Arena::CreateMaybeMessage< ::protocol::flex_si_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_si_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_si_message* Arena::CreateMaybeMessage< ::protocol::flex_si_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_si_message >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_slice_static* Arena::CreateMaybeMessage< ::protocol::flex_slice_static >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_slice_static >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_slice* Arena::CreateMaybeMessage< ::protocol::flex_slice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_slice >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_slice_dl_ul_config* Arena::CreateMaybeMessage< ::protocol::flex_slice_dl_ul_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_slice_dl_ul_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_drx_config* Arena::CreateMaybeMessage< ::protocol::flex_drx_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_drx_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_sps_config* Arena::CreateMaybeMessage< ::protocol::flex_sps_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_sps_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_sr_config* Arena::CreateMaybeMessage< ::protocol::flex_sr_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_sr_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_cqi_config* Arena::CreateMaybeMessage< ::protocol::flex_cqi_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_cqi_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ue_capabilities* Arena::CreateMaybeMessage< ::protocol::flex_ue_capabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ue_capabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_scell_config* Arena::CreateMaybeMessage< ::protocol::flex_scell_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_scell_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_lc_config* Arena::CreateMaybeMessage< ::protocol::flex_lc_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_lc_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_plmn* Arena::CreateMaybeMessage< ::protocol::flex_plmn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_plmn >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_measurement_info* Arena::CreateMaybeMessage< ::protocol::flex_measurement_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_measurement_info >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_measurement_event* Arena::CreateMaybeMessage< ::protocol::flex_measurement_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_measurement_event >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_per_event* Arena::CreateMaybeMessage< ::protocol::flex_per_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_per_event >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_a1_event* Arena::CreateMaybeMessage< ::protocol::flex_a1_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_a1_event >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_a2_event* Arena::CreateMaybeMessage< ::protocol::flex_a2_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_a2_event >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_a3_event* Arena::CreateMaybeMessage< ::protocol::flex_a3_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_a3_event >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_a4_event* Arena::CreateMaybeMessage< ::protocol::flex_a4_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_a4_event >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_a5_event* Arena::CreateMaybeMessage< ::protocol::flex_a5_event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_a5_event >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_gummei* Arena::CreateMaybeMessage< ::protocol::flex_gummei >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_gummei >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_s1ap_mme* Arena::CreateMaybeMessage< ::protocol::flex_s1ap_mme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_s1ap_mme >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
