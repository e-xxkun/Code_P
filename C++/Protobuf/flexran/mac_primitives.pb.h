// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mac_primitives.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mac_5fprimitives_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mac_5fprimitives_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mac_5fprimitives_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mac_5fprimitives_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mac_5fprimitives_2eproto;
namespace protocol {
class flex_dl_dci;
class flex_dl_dciDefaultTypeInternal;
extern flex_dl_dciDefaultTypeInternal _flex_dl_dci_default_instance_;
class flex_rlc_pdu;
class flex_rlc_pduDefaultTypeInternal;
extern flex_rlc_pduDefaultTypeInternal _flex_rlc_pdu_default_instance_;
class flex_rlc_pdu_tb;
class flex_rlc_pdu_tbDefaultTypeInternal;
extern flex_rlc_pdu_tbDefaultTypeInternal _flex_rlc_pdu_tb_default_instance_;
class flex_ul_dci;
class flex_ul_dciDefaultTypeInternal;
extern flex_ul_dciDefaultTypeInternal _flex_ul_dci_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::flex_dl_dci* Arena::CreateMaybeMessage<::protocol::flex_dl_dci>(Arena*);
template<> ::protocol::flex_rlc_pdu* Arena::CreateMaybeMessage<::protocol::flex_rlc_pdu>(Arena*);
template<> ::protocol::flex_rlc_pdu_tb* Arena::CreateMaybeMessage<::protocol::flex_rlc_pdu_tb>(Arena*);
template<> ::protocol::flex_ul_dci* Arena::CreateMaybeMessage<::protocol::flex_ul_dci>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum flex_dci_format : int {
  FLDCIF_1 = 0,
  FLDCIF_1A = 1,
  FLDCIF_1B = 2,
  FLDCIF_1C = 3,
  FLDCIF_1D = 4,
  FLDCIF_2 = 5,
  FLDCIF_2A = 6,
  FLDCIF_2B = 7,
  FLDCIF_3 = 8,
  FLDCIF_3A = 9
};
bool flex_dci_format_IsValid(int value);
constexpr flex_dci_format flex_dci_format_MIN = FLDCIF_1;
constexpr flex_dci_format flex_dci_format_MAX = FLDCIF_3A;
constexpr int flex_dci_format_ARRAYSIZE = flex_dci_format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_dci_format_descriptor();
template<typename T>
inline const std::string& flex_dci_format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_dci_format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_dci_format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_dci_format_descriptor(), enum_t_value);
}
inline bool flex_dci_format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_dci_format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_dci_format>(
    flex_dci_format_descriptor(), name, value);
}
enum flex_vrb_format : int {
  FLVRBF_LOCALIZED = 0,
  FLVRBF_DISTRIBUTED = 1
};
bool flex_vrb_format_IsValid(int value);
constexpr flex_vrb_format flex_vrb_format_MIN = FLVRBF_LOCALIZED;
constexpr flex_vrb_format flex_vrb_format_MAX = FLVRBF_DISTRIBUTED;
constexpr int flex_vrb_format_ARRAYSIZE = flex_vrb_format_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_vrb_format_descriptor();
template<typename T>
inline const std::string& flex_vrb_format_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_vrb_format>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_vrb_format_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_vrb_format_descriptor(), enum_t_value);
}
inline bool flex_vrb_format_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_vrb_format* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_vrb_format>(
    flex_vrb_format_descriptor(), name, value);
}
enum flex_ngap_val : int {
  FLNGV_1 = 0,
  FLNGV_2 = 1
};
bool flex_ngap_val_IsValid(int value);
constexpr flex_ngap_val flex_ngap_val_MIN = FLNGV_1;
constexpr flex_ngap_val flex_ngap_val_MAX = FLNGV_2;
constexpr int flex_ngap_val_ARRAYSIZE = flex_ngap_val_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ngap_val_descriptor();
template<typename T>
inline const std::string& flex_ngap_val_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_ngap_val>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_ngap_val_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_ngap_val_descriptor(), enum_t_value);
}
inline bool flex_ngap_val_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_ngap_val* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_ngap_val>(
    flex_ngap_val_descriptor(), name, value);
}
// ===================================================================

class flex_dl_dci PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_dl_dci) */ {
 public:
  inline flex_dl_dci() : flex_dl_dci(nullptr) {}
  virtual ~flex_dl_dci();

  flex_dl_dci(const flex_dl_dci& from);
  flex_dl_dci(flex_dl_dci&& from) noexcept
    : flex_dl_dci() {
    *this = ::std::move(from);
  }

  inline flex_dl_dci& operator=(const flex_dl_dci& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_dl_dci& operator=(flex_dl_dci&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_dl_dci& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_dl_dci* internal_default_instance() {
    return reinterpret_cast<const flex_dl_dci*>(
               &_flex_dl_dci_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(flex_dl_dci& a, flex_dl_dci& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_dl_dci* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_dl_dci* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_dl_dci* New() const final {
    return CreateMaybeMessage<flex_dl_dci>(nullptr);
  }

  flex_dl_dci* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_dl_dci>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_dl_dci& from);
  void MergeFrom(const flex_dl_dci& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_dl_dci* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_dl_dci";
  }
  protected:
  explicit flex_dl_dci(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mac_5fprimitives_2eproto);
    return ::descriptor_table_mac_5fprimitives_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTbsSizeFieldNumber = 5,
    kMcsFieldNumber = 6,
    kNdiFieldNumber = 7,
    kRvFieldNumber = 8,
    kRntiFieldNumber = 1,
    kResAllocFieldNumber = 2,
    kRbBitmapFieldNumber = 3,
    kRbShiftFieldNumber = 4,
    kCceIndexFieldNumber = 9,
    kAggrLevelFieldNumber = 10,
    kPrecodingInfoFieldNumber = 11,
    kFormatFieldNumber = 12,
    kTpcFieldNumber = 13,
    kHarqProcessFieldNumber = 14,
    kDaiFieldNumber = 15,
    kVrbFormatFieldNumber = 16,
    kTbSwapFieldNumber = 17,
    kSpsReleaseFieldNumber = 18,
    kPdcchOrderFieldNumber = 19,
    kPreambleIndexFieldNumber = 20,
    kPrachMaskIndexFieldNumber = 21,
    kNGapFieldNumber = 22,
    kTbsIdxFieldNumber = 23,
    kDlPowerOffsetFieldNumber = 24,
    kPdcchPowerOffsetFieldNumber = 25,
    kCifPresentFieldNumber = 26,
    kCifFieldNumber = 27,
  };
  // repeated uint32 tbs_size = 5;
  int tbs_size_size() const;
  private:
  int _internal_tbs_size_size() const;
  public:
  void clear_tbs_size();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbs_size(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_tbs_size() const;
  void _internal_add_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_tbs_size();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 tbs_size(int index) const;
  void set_tbs_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tbs_size() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tbs_size();

  // repeated uint32 mcs = 6;
  int mcs_size() const;
  private:
  int _internal_mcs_size() const;
  public:
  void clear_mcs();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mcs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_mcs() const;
  void _internal_add_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_mcs();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 mcs(int index) const;
  void set_mcs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      mcs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_mcs();

  // repeated uint32 ndi = 7;
  int ndi_size() const;
  private:
  int _internal_ndi_size() const;
  public:
  void clear_ndi();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ndi(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ndi() const;
  void _internal_add_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ndi();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ndi(int index) const;
  void set_ndi(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ndi() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ndi();

  // repeated uint32 rv = 8;
  int rv_size() const;
  private:
  int _internal_rv_size() const;
  public:
  void clear_rv();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rv(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_rv() const;
  void _internal_add_rv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_rv();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 rv(int index) const;
  void set_rv(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_rv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      rv() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_rv();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 res_alloc = 2;
  bool has_res_alloc() const;
  private:
  bool _internal_has_res_alloc() const;
  public:
  void clear_res_alloc();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_alloc() const;
  void set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_alloc() const;
  void _internal_set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rb_bitmap = 3;
  bool has_rb_bitmap() const;
  private:
  bool _internal_has_rb_bitmap() const;
  public:
  void clear_rb_bitmap();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_bitmap() const;
  void set_rb_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_bitmap() const;
  void _internal_set_rb_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rb_shift = 4;
  bool has_rb_shift() const;
  private:
  bool _internal_has_rb_shift() const;
  public:
  void clear_rb_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_shift() const;
  void set_rb_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_shift() const;
  void _internal_set_rb_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cce_index = 9;
  bool has_cce_index() const;
  private:
  bool _internal_has_cce_index() const;
  public:
  void clear_cce_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 cce_index() const;
  void set_cce_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cce_index() const;
  void _internal_set_cce_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 aggr_level = 10;
  bool has_aggr_level() const;
  private:
  bool _internal_has_aggr_level() const;
  public:
  void clear_aggr_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 aggr_level() const;
  void set_aggr_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aggr_level() const;
  void _internal_set_aggr_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 precoding_info = 11;
  bool has_precoding_info() const;
  private:
  bool _internal_has_precoding_info() const;
  public:
  void clear_precoding_info();
  ::PROTOBUF_NAMESPACE_ID::uint32 precoding_info() const;
  void set_precoding_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_precoding_info() const;
  void _internal_set_precoding_info(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 format = 12;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 format() const;
  void set_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_format() const;
  void _internal_set_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tpc = 13;
  bool has_tpc() const;
  private:
  bool _internal_has_tpc() const;
  public:
  void clear_tpc();
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc() const;
  void set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tpc() const;
  void _internal_set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 harq_process = 14;
  bool has_harq_process() const;
  private:
  bool _internal_has_harq_process() const;
  public:
  void clear_harq_process();
  ::PROTOBUF_NAMESPACE_ID::uint32 harq_process() const;
  void set_harq_process(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_harq_process() const;
  void _internal_set_harq_process(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dai = 15;
  bool has_dai() const;
  private:
  bool _internal_has_dai() const;
  public:
  void clear_dai();
  ::PROTOBUF_NAMESPACE_ID::uint32 dai() const;
  void set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dai() const;
  void _internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 vrb_format = 16;
  bool has_vrb_format() const;
  private:
  bool _internal_has_vrb_format() const;
  public:
  void clear_vrb_format();
  ::PROTOBUF_NAMESPACE_ID::uint32 vrb_format() const;
  void set_vrb_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vrb_format() const;
  void _internal_set_vrb_format(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tb_swap = 17;
  bool has_tb_swap() const;
  private:
  bool _internal_has_tb_swap() const;
  public:
  void clear_tb_swap();
  ::PROTOBUF_NAMESPACE_ID::uint32 tb_swap() const;
  void set_tb_swap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tb_swap() const;
  void _internal_set_tb_swap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sps_release = 18;
  bool has_sps_release() const;
  private:
  bool _internal_has_sps_release() const;
  public:
  void clear_sps_release();
  ::PROTOBUF_NAMESPACE_ID::uint32 sps_release() const;
  void set_sps_release(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sps_release() const;
  void _internal_set_sps_release(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pdcch_order = 19;
  bool has_pdcch_order() const;
  private:
  bool _internal_has_pdcch_order() const;
  public:
  void clear_pdcch_order();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcch_order() const;
  void set_pdcch_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcch_order() const;
  void _internal_set_pdcch_order(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 preamble_index = 20;
  bool has_preamble_index() const;
  private:
  bool _internal_has_preamble_index() const;
  public:
  void clear_preamble_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 preamble_index() const;
  void set_preamble_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_preamble_index() const;
  void _internal_set_preamble_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 prach_mask_index = 21;
  bool has_prach_mask_index() const;
  private:
  bool _internal_has_prach_mask_index() const;
  public:
  void clear_prach_mask_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_mask_index() const;
  void set_prach_mask_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_mask_index() const;
  void _internal_set_prach_mask_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 n_gap = 22;
  bool has_n_gap() const;
  private:
  bool _internal_has_n_gap() const;
  public:
  void clear_n_gap();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_gap() const;
  void set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_gap() const;
  void _internal_set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tbs_idx = 23;
  bool has_tbs_idx() const;
  private:
  bool _internal_has_tbs_idx() const;
  public:
  void clear_tbs_idx();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbs_idx() const;
  void set_tbs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbs_idx() const;
  void _internal_set_tbs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dl_power_offset = 24;
  bool has_dl_power_offset() const;
  private:
  bool _internal_has_dl_power_offset() const;
  public:
  void clear_dl_power_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_power_offset() const;
  void set_dl_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dl_power_offset() const;
  void _internal_set_dl_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pdcch_power_offset = 25;
  bool has_pdcch_power_offset() const;
  private:
  bool _internal_has_pdcch_power_offset() const;
  public:
  void clear_pdcch_power_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcch_power_offset() const;
  void set_pdcch_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdcch_power_offset() const;
  void _internal_set_pdcch_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cif_present = 26;
  bool has_cif_present() const;
  private:
  bool _internal_has_cif_present() const;
  public:
  void clear_cif_present();
  ::PROTOBUF_NAMESPACE_ID::uint32 cif_present() const;
  void set_cif_present(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cif_present() const;
  void _internal_set_cif_present(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cif = 27;
  bool has_cif() const;
  private:
  bool _internal_has_cif() const;
  public:
  void clear_cif();
  ::PROTOBUF_NAMESPACE_ID::uint32 cif() const;
  void set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cif() const;
  void _internal_set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_dl_dci)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tbs_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > mcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ndi_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > rv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_alloc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_bitmap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_shift_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cce_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 aggr_level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 precoding_info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 harq_process_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dai_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vrb_format_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tb_swap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sps_release_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcch_order_;
  ::PROTOBUF_NAMESPACE_ID::uint32 preamble_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_mask_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_gap_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbs_idx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_power_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdcch_power_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cif_present_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cif_;
  friend struct ::TableStruct_mac_5fprimitives_2eproto;
};
// -------------------------------------------------------------------

class flex_ul_dci PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ul_dci) */ {
 public:
  inline flex_ul_dci() : flex_ul_dci(nullptr) {}
  virtual ~flex_ul_dci();

  flex_ul_dci(const flex_ul_dci& from);
  flex_ul_dci(flex_ul_dci&& from) noexcept
    : flex_ul_dci() {
    *this = ::std::move(from);
  }

  inline flex_ul_dci& operator=(const flex_ul_dci& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_ul_dci& operator=(flex_ul_dci&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_ul_dci& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_ul_dci* internal_default_instance() {
    return reinterpret_cast<const flex_ul_dci*>(
               &_flex_ul_dci_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(flex_ul_dci& a, flex_ul_dci& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_ul_dci* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_ul_dci* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_ul_dci* New() const final {
    return CreateMaybeMessage<flex_ul_dci>(nullptr);
  }

  flex_ul_dci* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_ul_dci>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_ul_dci& from);
  void MergeFrom(const flex_ul_dci& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_ul_dci* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_ul_dci";
  }
  protected:
  explicit flex_ul_dci(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mac_5fprimitives_2eproto);
    return ::descriptor_table_mac_5fprimitives_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRntiFieldNumber = 1,
    kRbStartFieldNumber = 2,
    kRbLenFieldNumber = 3,
    kMcsFieldNumber = 4,
    kCyclicShift2FieldNumber = 5,
    kFreqHopFlagFieldNumber = 6,
    kFreqHopMapFieldNumber = 7,
    kNdiFieldNumber = 8,
    kRvFieldNumber = 9,
    kHarqPidFieldNumber = 10,
    kUltxModeFieldNumber = 11,
    kTbsSizeFieldNumber = 12,
    kNSrsFieldNumber = 13,
    kResAllocFieldNumber = 14,
    kSizeFieldNumber = 15,
    kDaiFieldNumber = 16,
  };
  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rb_start = 2;
  bool has_rb_start() const;
  private:
  bool _internal_has_rb_start() const;
  public:
  void clear_rb_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_start() const;
  void set_rb_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_start() const;
  void _internal_set_rb_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rb_len = 3;
  bool has_rb_len() const;
  private:
  bool _internal_has_rb_len() const;
  public:
  void clear_rb_len();
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_len() const;
  void set_rb_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rb_len() const;
  void _internal_set_rb_len(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mcs = 4;
  bool has_mcs() const;
  private:
  bool _internal_has_mcs() const;
  public:
  void clear_mcs();
  ::PROTOBUF_NAMESPACE_ID::uint32 mcs() const;
  void set_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mcs() const;
  void _internal_set_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cyclic_shift2 = 5;
  bool has_cyclic_shift2() const;
  private:
  bool _internal_has_cyclic_shift2() const;
  public:
  void clear_cyclic_shift2();
  ::PROTOBUF_NAMESPACE_ID::uint32 cyclic_shift2() const;
  void set_cyclic_shift2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cyclic_shift2() const;
  void _internal_set_cyclic_shift2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 freq_hop_flag = 6;
  bool has_freq_hop_flag() const;
  private:
  bool _internal_has_freq_hop_flag() const;
  public:
  void clear_freq_hop_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 freq_hop_flag() const;
  void set_freq_hop_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_freq_hop_flag() const;
  void _internal_set_freq_hop_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 freq_hop_map = 7;
  bool has_freq_hop_map() const;
  private:
  bool _internal_has_freq_hop_map() const;
  public:
  void clear_freq_hop_map();
  ::PROTOBUF_NAMESPACE_ID::uint32 freq_hop_map() const;
  void set_freq_hop_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_freq_hop_map() const;
  void _internal_set_freq_hop_map(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ndi = 8;
  bool has_ndi() const;
  private:
  bool _internal_has_ndi() const;
  public:
  void clear_ndi();
  ::PROTOBUF_NAMESPACE_ID::uint32 ndi() const;
  void set_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ndi() const;
  void _internal_set_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rv = 9;
  bool has_rv() const;
  private:
  bool _internal_has_rv() const;
  public:
  void clear_rv();
  ::PROTOBUF_NAMESPACE_ID::uint32 rv() const;
  void set_rv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rv() const;
  void _internal_set_rv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 harq_pid = 10;
  bool has_harq_pid() const;
  private:
  bool _internal_has_harq_pid() const;
  public:
  void clear_harq_pid();
  ::PROTOBUF_NAMESPACE_ID::uint32 harq_pid() const;
  void set_harq_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_harq_pid() const;
  void _internal_set_harq_pid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ultx_mode = 11;
  bool has_ultx_mode() const;
  private:
  bool _internal_has_ultx_mode() const;
  public:
  void clear_ultx_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 ultx_mode() const;
  void set_ultx_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ultx_mode() const;
  void _internal_set_ultx_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tbs_size = 12;
  bool has_tbs_size() const;
  private:
  bool _internal_has_tbs_size() const;
  public:
  void clear_tbs_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 tbs_size() const;
  void set_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tbs_size() const;
  void _internal_set_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 n_srs = 13;
  bool has_n_srs() const;
  private:
  bool _internal_has_n_srs() const;
  public:
  void clear_n_srs();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_srs() const;
  void set_n_srs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_srs() const;
  void _internal_set_n_srs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 res_alloc = 14;
  bool has_res_alloc() const;
  private:
  bool _internal_has_res_alloc() const;
  public:
  void clear_res_alloc();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_alloc() const;
  void set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_alloc() const;
  void _internal_set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size = 15;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dai = 16;
  bool has_dai() const;
  private:
  bool _internal_has_dai() const;
  public:
  void clear_dai();
  ::PROTOBUF_NAMESPACE_ID::uint32 dai() const;
  void set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dai() const;
  void _internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_ul_dci)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_start_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rb_len_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mcs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cyclic_shift2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freq_hop_flag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 freq_hop_map_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ndi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rv_;
  ::PROTOBUF_NAMESPACE_ID::uint32 harq_pid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ultx_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tbs_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_srs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_alloc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dai_;
  friend struct ::TableStruct_mac_5fprimitives_2eproto;
};
// -------------------------------------------------------------------

class flex_rlc_pdu PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_rlc_pdu) */ {
 public:
  inline flex_rlc_pdu() : flex_rlc_pdu(nullptr) {}
  virtual ~flex_rlc_pdu();

  flex_rlc_pdu(const flex_rlc_pdu& from);
  flex_rlc_pdu(flex_rlc_pdu&& from) noexcept
    : flex_rlc_pdu() {
    *this = ::std::move(from);
  }

  inline flex_rlc_pdu& operator=(const flex_rlc_pdu& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_rlc_pdu& operator=(flex_rlc_pdu&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_rlc_pdu& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_rlc_pdu* internal_default_instance() {
    return reinterpret_cast<const flex_rlc_pdu*>(
               &_flex_rlc_pdu_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(flex_rlc_pdu& a, flex_rlc_pdu& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_rlc_pdu* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_rlc_pdu* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_rlc_pdu* New() const final {
    return CreateMaybeMessage<flex_rlc_pdu>(nullptr);
  }

  flex_rlc_pdu* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_rlc_pdu>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_rlc_pdu& from);
  void MergeFrom(const flex_rlc_pdu& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_rlc_pdu* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_rlc_pdu";
  }
  protected:
  explicit flex_rlc_pdu(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mac_5fprimitives_2eproto);
    return ::descriptor_table_mac_5fprimitives_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRlcPduTbFieldNumber = 1,
  };
  // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
  int rlc_pdu_tb_size() const;
  private:
  int _internal_rlc_pdu_tb_size() const;
  public:
  void clear_rlc_pdu_tb();
  ::protocol::flex_rlc_pdu_tb* mutable_rlc_pdu_tb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >*
      mutable_rlc_pdu_tb();
  private:
  const ::protocol::flex_rlc_pdu_tb& _internal_rlc_pdu_tb(int index) const;
  ::protocol::flex_rlc_pdu_tb* _internal_add_rlc_pdu_tb();
  public:
  const ::protocol::flex_rlc_pdu_tb& rlc_pdu_tb(int index) const;
  ::protocol::flex_rlc_pdu_tb* add_rlc_pdu_tb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >&
      rlc_pdu_tb() const;

  // @@protoc_insertion_point(class_scope:protocol.flex_rlc_pdu)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb > rlc_pdu_tb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mac_5fprimitives_2eproto;
};
// -------------------------------------------------------------------

class flex_rlc_pdu_tb PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_rlc_pdu_tb) */ {
 public:
  inline flex_rlc_pdu_tb() : flex_rlc_pdu_tb(nullptr) {}
  virtual ~flex_rlc_pdu_tb();

  flex_rlc_pdu_tb(const flex_rlc_pdu_tb& from);
  flex_rlc_pdu_tb(flex_rlc_pdu_tb&& from) noexcept
    : flex_rlc_pdu_tb() {
    *this = ::std::move(from);
  }

  inline flex_rlc_pdu_tb& operator=(const flex_rlc_pdu_tb& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_rlc_pdu_tb& operator=(flex_rlc_pdu_tb&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_rlc_pdu_tb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_rlc_pdu_tb* internal_default_instance() {
    return reinterpret_cast<const flex_rlc_pdu_tb*>(
               &_flex_rlc_pdu_tb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(flex_rlc_pdu_tb& a, flex_rlc_pdu_tb& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_rlc_pdu_tb* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_rlc_pdu_tb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_rlc_pdu_tb* New() const final {
    return CreateMaybeMessage<flex_rlc_pdu_tb>(nullptr);
  }

  flex_rlc_pdu_tb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_rlc_pdu_tb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_rlc_pdu_tb& from);
  void MergeFrom(const flex_rlc_pdu_tb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_rlc_pdu_tb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_rlc_pdu_tb";
  }
  protected:
  explicit flex_rlc_pdu_tb(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mac_5fprimitives_2eproto);
    return ::descriptor_table_mac_5fprimitives_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalChannelIdFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // optional uint32 logical_channel_id = 1;
  bool has_logical_channel_id() const;
  private:
  bool _internal_has_logical_channel_id() const;
  public:
  void clear_logical_channel_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 logical_channel_id() const;
  void set_logical_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_logical_channel_id() const;
  void _internal_set_logical_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 size = 2;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_rlc_pdu_tb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 logical_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  friend struct ::TableStruct_mac_5fprimitives_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// flex_dl_dci

// optional uint32 rnti = 1;
inline bool flex_dl_dci::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_dl_dci::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_dl_dci::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rnti)
  return _internal_rnti();
}
inline void flex_dl_dci::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rnti_ = value;
}
inline void flex_dl_dci::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rnti)
}

// optional uint32 res_alloc = 2;
inline bool flex_dl_dci::_internal_has_res_alloc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_dl_dci::has_res_alloc() const {
  return _internal_has_res_alloc();
}
inline void flex_dl_dci::clear_res_alloc() {
  res_alloc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_res_alloc() const {
  return res_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::res_alloc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.res_alloc)
  return _internal_res_alloc();
}
inline void flex_dl_dci::_internal_set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  res_alloc_ = value;
}
inline void flex_dl_dci::set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_alloc(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.res_alloc)
}

// optional uint32 rb_bitmap = 3;
inline bool flex_dl_dci::_internal_has_rb_bitmap() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_dl_dci::has_rb_bitmap() const {
  return _internal_has_rb_bitmap();
}
inline void flex_dl_dci::clear_rb_bitmap() {
  rb_bitmap_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_rb_bitmap() const {
  return rb_bitmap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::rb_bitmap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rb_bitmap)
  return _internal_rb_bitmap();
}
inline void flex_dl_dci::_internal_set_rb_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rb_bitmap_ = value;
}
inline void flex_dl_dci::set_rb_bitmap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_bitmap(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rb_bitmap)
}

// optional uint32 rb_shift = 4;
inline bool flex_dl_dci::_internal_has_rb_shift() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_dl_dci::has_rb_shift() const {
  return _internal_has_rb_shift();
}
inline void flex_dl_dci::clear_rb_shift() {
  rb_shift_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_rb_shift() const {
  return rb_shift_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::rb_shift() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rb_shift)
  return _internal_rb_shift();
}
inline void flex_dl_dci::_internal_set_rb_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rb_shift_ = value;
}
inline void flex_dl_dci::set_rb_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_shift(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rb_shift)
}

// repeated uint32 tbs_size = 5;
inline int flex_dl_dci::_internal_tbs_size_size() const {
  return tbs_size_.size();
}
inline int flex_dl_dci::tbs_size_size() const {
  return _internal_tbs_size_size();
}
inline void flex_dl_dci::clear_tbs_size() {
  tbs_size_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_tbs_size(int index) const {
  return tbs_size_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::tbs_size(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tbs_size)
  return _internal_tbs_size(index);
}
inline void flex_dl_dci::set_tbs_size(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tbs_size_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tbs_size)
}
inline void flex_dl_dci::_internal_add_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tbs_size_.Add(value);
}
inline void flex_dl_dci::add_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_tbs_size(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.tbs_size)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::_internal_tbs_size() const {
  return tbs_size_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::tbs_size() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.tbs_size)
  return _internal_tbs_size();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::_internal_mutable_tbs_size() {
  return &tbs_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::mutable_tbs_size() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.tbs_size)
  return _internal_mutable_tbs_size();
}

// repeated uint32 mcs = 6;
inline int flex_dl_dci::_internal_mcs_size() const {
  return mcs_.size();
}
inline int flex_dl_dci::mcs_size() const {
  return _internal_mcs_size();
}
inline void flex_dl_dci::clear_mcs() {
  mcs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_mcs(int index) const {
  return mcs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::mcs(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.mcs)
  return _internal_mcs(index);
}
inline void flex_dl_dci::set_mcs(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mcs_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.mcs)
}
inline void flex_dl_dci::_internal_add_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mcs_.Add(value);
}
inline void flex_dl_dci::add_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_mcs(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.mcs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::_internal_mcs() const {
  return mcs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::mcs() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.mcs)
  return _internal_mcs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::_internal_mutable_mcs() {
  return &mcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::mutable_mcs() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.mcs)
  return _internal_mutable_mcs();
}

// repeated uint32 ndi = 7;
inline int flex_dl_dci::_internal_ndi_size() const {
  return ndi_.size();
}
inline int flex_dl_dci::ndi_size() const {
  return _internal_ndi_size();
}
inline void flex_dl_dci::clear_ndi() {
  ndi_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_ndi(int index) const {
  return ndi_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::ndi(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.ndi)
  return _internal_ndi(index);
}
inline void flex_dl_dci::set_ndi(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ndi_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.ndi)
}
inline void flex_dl_dci::_internal_add_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ndi_.Add(value);
}
inline void flex_dl_dci::add_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ndi(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.ndi)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::_internal_ndi() const {
  return ndi_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::ndi() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.ndi)
  return _internal_ndi();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::_internal_mutable_ndi() {
  return &ndi_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::mutable_ndi() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.ndi)
  return _internal_mutable_ndi();
}

// repeated uint32 rv = 8;
inline int flex_dl_dci::_internal_rv_size() const {
  return rv_.size();
}
inline int flex_dl_dci::rv_size() const {
  return _internal_rv_size();
}
inline void flex_dl_dci::clear_rv() {
  rv_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_rv(int index) const {
  return rv_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::rv(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.rv)
  return _internal_rv(index);
}
inline void flex_dl_dci::set_rv(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rv_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.rv)
}
inline void flex_dl_dci::_internal_add_rv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rv_.Add(value);
}
inline void flex_dl_dci::add_rv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_rv(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_dci.rv)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::_internal_rv() const {
  return rv_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_dci::rv() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_dci.rv)
  return _internal_rv();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::_internal_mutable_rv() {
  return &rv_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_dci::mutable_rv() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_dci.rv)
  return _internal_mutable_rv();
}

// optional uint32 cce_index = 9;
inline bool flex_dl_dci::_internal_has_cce_index() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_dl_dci::has_cce_index() const {
  return _internal_has_cce_index();
}
inline void flex_dl_dci::clear_cce_index() {
  cce_index_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_cce_index() const {
  return cce_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::cce_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cce_index)
  return _internal_cce_index();
}
inline void flex_dl_dci::_internal_set_cce_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  cce_index_ = value;
}
inline void flex_dl_dci::set_cce_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cce_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cce_index)
}

// optional uint32 aggr_level = 10;
inline bool flex_dl_dci::_internal_has_aggr_level() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool flex_dl_dci::has_aggr_level() const {
  return _internal_has_aggr_level();
}
inline void flex_dl_dci::clear_aggr_level() {
  aggr_level_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_aggr_level() const {
  return aggr_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::aggr_level() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.aggr_level)
  return _internal_aggr_level();
}
inline void flex_dl_dci::_internal_set_aggr_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  aggr_level_ = value;
}
inline void flex_dl_dci::set_aggr_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_aggr_level(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.aggr_level)
}

// optional uint32 precoding_info = 11;
inline bool flex_dl_dci::_internal_has_precoding_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool flex_dl_dci::has_precoding_info() const {
  return _internal_has_precoding_info();
}
inline void flex_dl_dci::clear_precoding_info() {
  precoding_info_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_precoding_info() const {
  return precoding_info_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::precoding_info() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.precoding_info)
  return _internal_precoding_info();
}
inline void flex_dl_dci::_internal_set_precoding_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  precoding_info_ = value;
}
inline void flex_dl_dci::set_precoding_info(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_precoding_info(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.precoding_info)
}

// optional uint32 format = 12;
inline bool flex_dl_dci::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool flex_dl_dci::has_format() const {
  return _internal_has_format();
}
inline void flex_dl_dci::clear_format() {
  format_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_format() const {
  return format_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::format() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.format)
  return _internal_format();
}
inline void flex_dl_dci::_internal_set_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  format_ = value;
}
inline void flex_dl_dci::set_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.format)
}

// optional uint32 tpc = 13;
inline bool flex_dl_dci::_internal_has_tpc() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool flex_dl_dci::has_tpc() const {
  return _internal_has_tpc();
}
inline void flex_dl_dci::clear_tpc() {
  tpc_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_tpc() const {
  return tpc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::tpc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tpc)
  return _internal_tpc();
}
inline void flex_dl_dci::_internal_set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  tpc_ = value;
}
inline void flex_dl_dci::set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tpc(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tpc)
}

// optional uint32 harq_process = 14;
inline bool flex_dl_dci::_internal_has_harq_process() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool flex_dl_dci::has_harq_process() const {
  return _internal_has_harq_process();
}
inline void flex_dl_dci::clear_harq_process() {
  harq_process_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_harq_process() const {
  return harq_process_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::harq_process() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.harq_process)
  return _internal_harq_process();
}
inline void flex_dl_dci::_internal_set_harq_process(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  harq_process_ = value;
}
inline void flex_dl_dci::set_harq_process(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_harq_process(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.harq_process)
}

// optional uint32 dai = 15;
inline bool flex_dl_dci::_internal_has_dai() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool flex_dl_dci::has_dai() const {
  return _internal_has_dai();
}
inline void flex_dl_dci::clear_dai() {
  dai_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_dai() const {
  return dai_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::dai() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.dai)
  return _internal_dai();
}
inline void flex_dl_dci::_internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  dai_ = value;
}
inline void flex_dl_dci::set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dai(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.dai)
}

// optional uint32 vrb_format = 16;
inline bool flex_dl_dci::_internal_has_vrb_format() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool flex_dl_dci::has_vrb_format() const {
  return _internal_has_vrb_format();
}
inline void flex_dl_dci::clear_vrb_format() {
  vrb_format_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_vrb_format() const {
  return vrb_format_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::vrb_format() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.vrb_format)
  return _internal_vrb_format();
}
inline void flex_dl_dci::_internal_set_vrb_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  vrb_format_ = value;
}
inline void flex_dl_dci::set_vrb_format(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vrb_format(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.vrb_format)
}

// optional uint32 tb_swap = 17;
inline bool flex_dl_dci::_internal_has_tb_swap() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_tb_swap() const {
  return _internal_has_tb_swap();
}
inline void flex_dl_dci::clear_tb_swap() {
  tb_swap_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_tb_swap() const {
  return tb_swap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::tb_swap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tb_swap)
  return _internal_tb_swap();
}
inline void flex_dl_dci::_internal_set_tb_swap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  tb_swap_ = value;
}
inline void flex_dl_dci::set_tb_swap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tb_swap(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tb_swap)
}

// optional uint32 sps_release = 18;
inline bool flex_dl_dci::_internal_has_sps_release() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_sps_release() const {
  return _internal_has_sps_release();
}
inline void flex_dl_dci::clear_sps_release() {
  sps_release_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_sps_release() const {
  return sps_release_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::sps_release() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.sps_release)
  return _internal_sps_release();
}
inline void flex_dl_dci::_internal_set_sps_release(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  sps_release_ = value;
}
inline void flex_dl_dci::set_sps_release(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sps_release(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.sps_release)
}

// optional uint32 pdcch_order = 19;
inline bool flex_dl_dci::_internal_has_pdcch_order() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_pdcch_order() const {
  return _internal_has_pdcch_order();
}
inline void flex_dl_dci::clear_pdcch_order() {
  pdcch_order_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_pdcch_order() const {
  return pdcch_order_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::pdcch_order() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.pdcch_order)
  return _internal_pdcch_order();
}
inline void flex_dl_dci::_internal_set_pdcch_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  pdcch_order_ = value;
}
inline void flex_dl_dci::set_pdcch_order(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcch_order(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.pdcch_order)
}

// optional uint32 preamble_index = 20;
inline bool flex_dl_dci::_internal_has_preamble_index() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_preamble_index() const {
  return _internal_has_preamble_index();
}
inline void flex_dl_dci::clear_preamble_index() {
  preamble_index_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_preamble_index() const {
  return preamble_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::preamble_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.preamble_index)
  return _internal_preamble_index();
}
inline void flex_dl_dci::_internal_set_preamble_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  preamble_index_ = value;
}
inline void flex_dl_dci::set_preamble_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_preamble_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.preamble_index)
}

// optional uint32 prach_mask_index = 21;
inline bool flex_dl_dci::_internal_has_prach_mask_index() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_prach_mask_index() const {
  return _internal_has_prach_mask_index();
}
inline void flex_dl_dci::clear_prach_mask_index() {
  prach_mask_index_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_prach_mask_index() const {
  return prach_mask_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::prach_mask_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.prach_mask_index)
  return _internal_prach_mask_index();
}
inline void flex_dl_dci::_internal_set_prach_mask_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  prach_mask_index_ = value;
}
inline void flex_dl_dci::set_prach_mask_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_mask_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.prach_mask_index)
}

// optional uint32 n_gap = 22;
inline bool flex_dl_dci::_internal_has_n_gap() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_n_gap() const {
  return _internal_has_n_gap();
}
inline void flex_dl_dci::clear_n_gap() {
  n_gap_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_n_gap() const {
  return n_gap_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::n_gap() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.n_gap)
  return _internal_n_gap();
}
inline void flex_dl_dci::_internal_set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  n_gap_ = value;
}
inline void flex_dl_dci::set_n_gap(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_gap(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.n_gap)
}

// optional uint32 tbs_idx = 23;
inline bool flex_dl_dci::_internal_has_tbs_idx() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_tbs_idx() const {
  return _internal_has_tbs_idx();
}
inline void flex_dl_dci::clear_tbs_idx() {
  tbs_idx_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_tbs_idx() const {
  return tbs_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::tbs_idx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.tbs_idx)
  return _internal_tbs_idx();
}
inline void flex_dl_dci::_internal_set_tbs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  tbs_idx_ = value;
}
inline void flex_dl_dci::set_tbs_idx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbs_idx(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.tbs_idx)
}

// optional uint32 dl_power_offset = 24;
inline bool flex_dl_dci::_internal_has_dl_power_offset() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_dl_power_offset() const {
  return _internal_has_dl_power_offset();
}
inline void flex_dl_dci::clear_dl_power_offset() {
  dl_power_offset_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_dl_power_offset() const {
  return dl_power_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::dl_power_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.dl_power_offset)
  return _internal_dl_power_offset();
}
inline void flex_dl_dci::_internal_set_dl_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  dl_power_offset_ = value;
}
inline void flex_dl_dci::set_dl_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dl_power_offset(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.dl_power_offset)
}

// optional uint32 pdcch_power_offset = 25;
inline bool flex_dl_dci::_internal_has_pdcch_power_offset() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_pdcch_power_offset() const {
  return _internal_has_pdcch_power_offset();
}
inline void flex_dl_dci::clear_pdcch_power_offset() {
  pdcch_power_offset_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_pdcch_power_offset() const {
  return pdcch_power_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::pdcch_power_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.pdcch_power_offset)
  return _internal_pdcch_power_offset();
}
inline void flex_dl_dci::_internal_set_pdcch_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  pdcch_power_offset_ = value;
}
inline void flex_dl_dci::set_pdcch_power_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdcch_power_offset(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.pdcch_power_offset)
}

// optional uint32 cif_present = 26;
inline bool flex_dl_dci::_internal_has_cif_present() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_cif_present() const {
  return _internal_has_cif_present();
}
inline void flex_dl_dci::clear_cif_present() {
  cif_present_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_cif_present() const {
  return cif_present_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::cif_present() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cif_present)
  return _internal_cif_present();
}
inline void flex_dl_dci::_internal_set_cif_present(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  cif_present_ = value;
}
inline void flex_dl_dci::set_cif_present(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cif_present(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cif_present)
}

// optional uint32 cif = 27;
inline bool flex_dl_dci::_internal_has_cif() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool flex_dl_dci::has_cif() const {
  return _internal_has_cif();
}
inline void flex_dl_dci::clear_cif() {
  cif_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::_internal_cif() const {
  return cif_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_dci::cif() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_dci.cif)
  return _internal_cif();
}
inline void flex_dl_dci::_internal_set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  cif_ = value;
}
inline void flex_dl_dci::set_cif(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cif(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_dci.cif)
}

// -------------------------------------------------------------------

// flex_ul_dci

// optional uint32 rnti = 1;
inline bool flex_ul_dci::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_ul_dci::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_ul_dci::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rnti)
  return _internal_rnti();
}
inline void flex_ul_dci::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rnti_ = value;
}
inline void flex_ul_dci::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rnti)
}

// optional uint32 rb_start = 2;
inline bool flex_ul_dci::_internal_has_rb_start() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_ul_dci::has_rb_start() const {
  return _internal_has_rb_start();
}
inline void flex_ul_dci::clear_rb_start() {
  rb_start_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_rb_start() const {
  return rb_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::rb_start() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rb_start)
  return _internal_rb_start();
}
inline void flex_ul_dci::_internal_set_rb_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rb_start_ = value;
}
inline void flex_ul_dci::set_rb_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_start(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rb_start)
}

// optional uint32 rb_len = 3;
inline bool flex_ul_dci::_internal_has_rb_len() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_ul_dci::has_rb_len() const {
  return _internal_has_rb_len();
}
inline void flex_ul_dci::clear_rb_len() {
  rb_len_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_rb_len() const {
  return rb_len_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::rb_len() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rb_len)
  return _internal_rb_len();
}
inline void flex_ul_dci::_internal_set_rb_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rb_len_ = value;
}
inline void flex_ul_dci::set_rb_len(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rb_len(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rb_len)
}

// optional uint32 mcs = 4;
inline bool flex_ul_dci::_internal_has_mcs() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_ul_dci::has_mcs() const {
  return _internal_has_mcs();
}
inline void flex_ul_dci::clear_mcs() {
  mcs_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_mcs() const {
  return mcs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::mcs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.mcs)
  return _internal_mcs();
}
inline void flex_ul_dci::_internal_set_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  mcs_ = value;
}
inline void flex_ul_dci::set_mcs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mcs(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.mcs)
}

// optional uint32 cyclic_shift2 = 5;
inline bool flex_ul_dci::_internal_has_cyclic_shift2() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_ul_dci::has_cyclic_shift2() const {
  return _internal_has_cyclic_shift2();
}
inline void flex_ul_dci::clear_cyclic_shift2() {
  cyclic_shift2_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_cyclic_shift2() const {
  return cyclic_shift2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::cyclic_shift2() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.cyclic_shift2)
  return _internal_cyclic_shift2();
}
inline void flex_ul_dci::_internal_set_cyclic_shift2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  cyclic_shift2_ = value;
}
inline void flex_ul_dci::set_cyclic_shift2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cyclic_shift2(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.cyclic_shift2)
}

// optional uint32 freq_hop_flag = 6;
inline bool flex_ul_dci::_internal_has_freq_hop_flag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool flex_ul_dci::has_freq_hop_flag() const {
  return _internal_has_freq_hop_flag();
}
inline void flex_ul_dci::clear_freq_hop_flag() {
  freq_hop_flag_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_freq_hop_flag() const {
  return freq_hop_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::freq_hop_flag() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.freq_hop_flag)
  return _internal_freq_hop_flag();
}
inline void flex_ul_dci::_internal_set_freq_hop_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  freq_hop_flag_ = value;
}
inline void flex_ul_dci::set_freq_hop_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_freq_hop_flag(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.freq_hop_flag)
}

// optional uint32 freq_hop_map = 7;
inline bool flex_ul_dci::_internal_has_freq_hop_map() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool flex_ul_dci::has_freq_hop_map() const {
  return _internal_has_freq_hop_map();
}
inline void flex_ul_dci::clear_freq_hop_map() {
  freq_hop_map_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_freq_hop_map() const {
  return freq_hop_map_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::freq_hop_map() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.freq_hop_map)
  return _internal_freq_hop_map();
}
inline void flex_ul_dci::_internal_set_freq_hop_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  freq_hop_map_ = value;
}
inline void flex_ul_dci::set_freq_hop_map(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_freq_hop_map(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.freq_hop_map)
}

// optional uint32 ndi = 8;
inline bool flex_ul_dci::_internal_has_ndi() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool flex_ul_dci::has_ndi() const {
  return _internal_has_ndi();
}
inline void flex_ul_dci::clear_ndi() {
  ndi_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_ndi() const {
  return ndi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::ndi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.ndi)
  return _internal_ndi();
}
inline void flex_ul_dci::_internal_set_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  ndi_ = value;
}
inline void flex_ul_dci::set_ndi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ndi(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.ndi)
}

// optional uint32 rv = 9;
inline bool flex_ul_dci::_internal_has_rv() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool flex_ul_dci::has_rv() const {
  return _internal_has_rv();
}
inline void flex_ul_dci::clear_rv() {
  rv_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_rv() const {
  return rv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::rv() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.rv)
  return _internal_rv();
}
inline void flex_ul_dci::_internal_set_rv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  rv_ = value;
}
inline void flex_ul_dci::set_rv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rv(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.rv)
}

// optional uint32 harq_pid = 10;
inline bool flex_ul_dci::_internal_has_harq_pid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool flex_ul_dci::has_harq_pid() const {
  return _internal_has_harq_pid();
}
inline void flex_ul_dci::clear_harq_pid() {
  harq_pid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_harq_pid() const {
  return harq_pid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::harq_pid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.harq_pid)
  return _internal_harq_pid();
}
inline void flex_ul_dci::_internal_set_harq_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  harq_pid_ = value;
}
inline void flex_ul_dci::set_harq_pid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_harq_pid(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.harq_pid)
}

// optional uint32 ultx_mode = 11;
inline bool flex_ul_dci::_internal_has_ultx_mode() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool flex_ul_dci::has_ultx_mode() const {
  return _internal_has_ultx_mode();
}
inline void flex_ul_dci::clear_ultx_mode() {
  ultx_mode_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_ultx_mode() const {
  return ultx_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::ultx_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.ultx_mode)
  return _internal_ultx_mode();
}
inline void flex_ul_dci::_internal_set_ultx_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  ultx_mode_ = value;
}
inline void flex_ul_dci::set_ultx_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ultx_mode(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.ultx_mode)
}

// optional uint32 tbs_size = 12;
inline bool flex_ul_dci::_internal_has_tbs_size() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool flex_ul_dci::has_tbs_size() const {
  return _internal_has_tbs_size();
}
inline void flex_ul_dci::clear_tbs_size() {
  tbs_size_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_tbs_size() const {
  return tbs_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::tbs_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.tbs_size)
  return _internal_tbs_size();
}
inline void flex_ul_dci::_internal_set_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  tbs_size_ = value;
}
inline void flex_ul_dci::set_tbs_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tbs_size(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.tbs_size)
}

// optional uint32 n_srs = 13;
inline bool flex_ul_dci::_internal_has_n_srs() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool flex_ul_dci::has_n_srs() const {
  return _internal_has_n_srs();
}
inline void flex_ul_dci::clear_n_srs() {
  n_srs_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_n_srs() const {
  return n_srs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::n_srs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.n_srs)
  return _internal_n_srs();
}
inline void flex_ul_dci::_internal_set_n_srs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  n_srs_ = value;
}
inline void flex_ul_dci::set_n_srs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_srs(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.n_srs)
}

// optional uint32 res_alloc = 14;
inline bool flex_ul_dci::_internal_has_res_alloc() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool flex_ul_dci::has_res_alloc() const {
  return _internal_has_res_alloc();
}
inline void flex_ul_dci::clear_res_alloc() {
  res_alloc_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_res_alloc() const {
  return res_alloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::res_alloc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.res_alloc)
  return _internal_res_alloc();
}
inline void flex_ul_dci::_internal_set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  res_alloc_ = value;
}
inline void flex_ul_dci::set_res_alloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_alloc(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.res_alloc)
}

// optional uint32 size = 15;
inline bool flex_ul_dci::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool flex_ul_dci::has_size() const {
  return _internal_has_size();
}
inline void flex_ul_dci::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.size)
  return _internal_size();
}
inline void flex_ul_dci::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  size_ = value;
}
inline void flex_ul_dci::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.size)
}

// optional uint32 dai = 16;
inline bool flex_ul_dci::_internal_has_dai() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool flex_ul_dci::has_dai() const {
  return _internal_has_dai();
}
inline void flex_ul_dci::clear_dai() {
  dai_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::_internal_dai() const {
  return dai_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_dci::dai() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_dci.dai)
  return _internal_dai();
}
inline void flex_ul_dci::_internal_set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  dai_ = value;
}
inline void flex_ul_dci::set_dai(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dai(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_dci.dai)
}

// -------------------------------------------------------------------

// flex_rlc_pdu

// repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
inline int flex_rlc_pdu::_internal_rlc_pdu_tb_size() const {
  return rlc_pdu_tb_.size();
}
inline int flex_rlc_pdu::rlc_pdu_tb_size() const {
  return _internal_rlc_pdu_tb_size();
}
inline void flex_rlc_pdu::clear_rlc_pdu_tb() {
  rlc_pdu_tb_.Clear();
}
inline ::protocol::flex_rlc_pdu_tb* flex_rlc_pdu::mutable_rlc_pdu_tb(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >*
flex_rlc_pdu::mutable_rlc_pdu_tb() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return &rlc_pdu_tb_;
}
inline const ::protocol::flex_rlc_pdu_tb& flex_rlc_pdu::_internal_rlc_pdu_tb(int index) const {
  return rlc_pdu_tb_.Get(index);
}
inline const ::protocol::flex_rlc_pdu_tb& flex_rlc_pdu::rlc_pdu_tb(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return _internal_rlc_pdu_tb(index);
}
inline ::protocol::flex_rlc_pdu_tb* flex_rlc_pdu::_internal_add_rlc_pdu_tb() {
  return rlc_pdu_tb_.Add();
}
inline ::protocol::flex_rlc_pdu_tb* flex_rlc_pdu::add_rlc_pdu_tb() {
  // @@protoc_insertion_point(field_add:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return _internal_add_rlc_pdu_tb();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_pdu_tb >&
flex_rlc_pdu::rlc_pdu_tb() const {
  // @@protoc_insertion_point(field_list:protocol.flex_rlc_pdu.rlc_pdu_tb)
  return rlc_pdu_tb_;
}

// -------------------------------------------------------------------

// flex_rlc_pdu_tb

// optional uint32 logical_channel_id = 1;
inline bool flex_rlc_pdu_tb::_internal_has_logical_channel_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_rlc_pdu_tb::has_logical_channel_id() const {
  return _internal_has_logical_channel_id();
}
inline void flex_rlc_pdu_tb::clear_logical_channel_id() {
  logical_channel_id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_rlc_pdu_tb::_internal_logical_channel_id() const {
  return logical_channel_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_rlc_pdu_tb::logical_channel_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu_tb.logical_channel_id)
  return _internal_logical_channel_id();
}
inline void flex_rlc_pdu_tb::_internal_set_logical_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  logical_channel_id_ = value;
}
inline void flex_rlc_pdu_tb::set_logical_channel_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_logical_channel_id(value);
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_pdu_tb.logical_channel_id)
}

// optional uint32 size = 2;
inline bool flex_rlc_pdu_tb::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_rlc_pdu_tb::has_size() const {
  return _internal_has_size();
}
inline void flex_rlc_pdu_tb::clear_size() {
  size_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_rlc_pdu_tb::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_rlc_pdu_tb::size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_rlc_pdu_tb.size)
  return _internal_size();
}
inline void flex_rlc_pdu_tb::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  size_ = value;
}
inline void flex_rlc_pdu_tb::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:protocol.flex_rlc_pdu_tb.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::flex_dci_format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_dci_format>() {
  return ::protocol::flex_dci_format_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_vrb_format> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_vrb_format>() {
  return ::protocol::flex_vrb_format_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_ngap_val> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_ngap_val>() {
  return ::protocol::flex_ngap_val_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mac_5fprimitives_2eproto
