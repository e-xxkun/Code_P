// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time_common.proto

#include "time_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace protocol {
class flex_dl_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_info> _instance;
} _flex_dl_info_default_instance_;
class flex_ul_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ul_info> _instance;
} _flex_ul_info_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_dl_info_time_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_info_default_instance_;
    new (ptr) ::protocol::flex_dl_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_dl_info_time_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_dl_info_time_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_ul_info_time_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ul_info_default_instance_;
    new (ptr) ::protocol::flex_ul_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ul_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ul_info_time_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_ul_info_time_5fcommon_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_time_5fcommon_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_time_5fcommon_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_time_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_time_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_info, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_info, harq_process_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_info, harq_status_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_info, serv_cell_index_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, ul_reception_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, reception_status_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, tpc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, serv_cell_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_info, rssi_),
  0,
  ~0u,
  1,
  2,
  3,
  4,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::protocol::flex_dl_info)},
  { 13, 24, sizeof(::protocol::flex_ul_info)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ul_info_default_instance_),
};

const char descriptor_table_protodef_time_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021time_common.proto\022\010protocol\"c\n\014flex_dl"
  "_info\022\014\n\004rnti\030\001 \001(\r\022\027\n\017harq_process_id\030\002"
  " \001(\r\022\023\n\013harq_status\030\003 \003(\r\022\027\n\017serv_cell_i"
  "ndex\030\004 \001(\r\"\200\001\n\014flex_ul_info\022\014\n\004rnti\030\001 \001("
  "\r\022\024\n\014ul_reception\030\002 \003(\r\022\030\n\020reception_sta"
  "tus\030\003 \001(\r\022\013\n\003tpc\030\004 \001(\r\022\027\n\017serv_cell_inde"
  "x\030\005 \001(\r\022\014\n\004rssi\030\006 \001(\r*=\n\020flex_harq_statu"
  "s\022\014\n\010FLHS_ACK\020\000\022\r\n\tFLHS_NACK\020\001\022\014\n\010FLHS_D"
  "TX\020\002*I\n\025flex_reception_status\022\013\n\007FLRS_OK"
  "\020\000\022\017\n\013FLRS_NOT_OK\020\001\022\022\n\016FLRS_NOT_VALID\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_time_5fcommon_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_time_5fcommon_2eproto_sccs[2] = {
  &scc_info_flex_dl_info_time_5fcommon_2eproto.base,
  &scc_info_flex_ul_info_time_5fcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_time_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_time_5fcommon_2eproto = {
  false, false, descriptor_table_protodef_time_5fcommon_2eproto, "time_common.proto", 399,
  &descriptor_table_time_5fcommon_2eproto_once, descriptor_table_time_5fcommon_2eproto_sccs, descriptor_table_time_5fcommon_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_time_5fcommon_2eproto::offsets,
  file_level_metadata_time_5fcommon_2eproto, 2, file_level_enum_descriptors_time_5fcommon_2eproto, file_level_service_descriptors_time_5fcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_time_5fcommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_time_5fcommon_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_harq_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_time_5fcommon_2eproto);
  return file_level_enum_descriptors_time_5fcommon_2eproto[0];
}
bool flex_harq_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_reception_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_time_5fcommon_2eproto);
  return file_level_enum_descriptors_time_5fcommon_2eproto[1];
}
bool flex_reception_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void flex_dl_info::InitAsDefaultInstance() {
}
class flex_dl_info::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_info>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_harq_process_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serv_cell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

flex_dl_info::flex_dl_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  harq_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_info)
}
flex_dl_info::flex_dl_info(const flex_dl_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      harq_status_(from.harq_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&serv_cell_index_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(serv_cell_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_info)
}

void flex_dl_info::SharedCtor() {
  ::memset(&rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serv_cell_index_) -
      reinterpret_cast<char*>(&rnti_)) + sizeof(serv_cell_index_));
}

flex_dl_info::~flex_dl_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_dl_info::ArenaDtor(void* object) {
  flex_dl_info* _this = reinterpret_cast< flex_dl_info* >(object);
  (void)_this;
}
void flex_dl_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_info& flex_dl_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_info_time_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  harq_status_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&serv_cell_index_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(serv_cell_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 harq_process_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_harq_process_id(&has_bits);
          harq_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 harq_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_harq_status(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_harq_status(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 serv_cell_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_serv_cell_index(&has_bits);
          serv_cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional uint32 harq_process_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_harq_process_id(), target);
  }

  // repeated uint32 harq_status = 3;
  for (int i = 0, n = this->_internal_harq_status_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_harq_status(i), target);
  }

  // optional uint32 serv_cell_index = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_serv_cell_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_info)
  return target;
}

size_t flex_dl_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 harq_status = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->harq_status_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_harq_status_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 harq_process_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_harq_process_id());
    }

    // optional uint32 serv_cell_index = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_serv_cell_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_info)
    MergeFrom(*source);
  }
}

void flex_dl_info::MergeFrom(const flex_dl_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  harq_status_.MergeFrom(from.harq_status_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      harq_process_id_ = from.harq_process_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_info::CopyFrom(const flex_dl_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_info::IsInitialized() const {
  return true;
}

void flex_dl_info::InternalSwap(flex_dl_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  harq_status_.InternalSwap(&other->harq_status_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_dl_info, serv_cell_index_)
      + sizeof(flex_dl_info::serv_cell_index_)
      - PROTOBUF_FIELD_OFFSET(flex_dl_info, rnti_)>(
          reinterpret_cast<char*>(&rnti_),
          reinterpret_cast<char*>(&other->rnti_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ul_info::InitAsDefaultInstance() {
}
class flex_ul_info::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ul_info>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reception_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tpc(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_serv_cell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rssi(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

flex_ul_info::flex_ul_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ul_reception_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ul_info)
}
flex_ul_info::flex_ul_info(const flex_ul_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ul_reception_(from.ul_reception_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&rssi_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(rssi_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_info)
}

void flex_ul_info::SharedCtor() {
  ::memset(&rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rssi_) -
      reinterpret_cast<char*>(&rnti_)) + sizeof(rssi_));
}

flex_ul_info::~flex_ul_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ul_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_ul_info::ArenaDtor(void* object) {
  flex_ul_info* _this = reinterpret_cast< flex_ul_info* >(object);
  (void)_this;
}
void flex_ul_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ul_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ul_info& flex_ul_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ul_info_time_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_ul_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ul_reception_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rssi_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(rssi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ul_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ul_reception = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ul_reception(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ul_reception(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 reception_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_reception_status(&has_bits);
          reception_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tpc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tpc(&has_bits);
          tpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 serv_cell_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_serv_cell_index(&has_bits);
          serv_cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rssi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_rssi(&has_bits);
          rssi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ul_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // repeated uint32 ul_reception = 2;
  for (int i = 0, n = this->_internal_ul_reception_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ul_reception(i), target);
  }

  // optional uint32 reception_status = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_reception_status(), target);
  }

  // optional uint32 tpc = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tpc(), target);
  }

  // optional uint32 serv_cell_index = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_serv_cell_index(), target);
  }

  // optional uint32 rssi = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_rssi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_info)
  return target;
}

size_t flex_ul_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 ul_reception = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ul_reception_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ul_reception_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 reception_status = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_reception_status());
    }

    // optional uint32 tpc = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tpc());
    }

    // optional uint32 serv_cell_index = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_serv_cell_index());
    }

    // optional uint32 rssi = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rssi());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ul_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ul_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_info)
    MergeFrom(*source);
  }
}

void flex_ul_info::MergeFrom(const flex_ul_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ul_reception_.MergeFrom(from.ul_reception_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      reception_status_ = from.reception_status_;
    }
    if (cached_has_bits & 0x00000004u) {
      tpc_ = from.tpc_;
    }
    if (cached_has_bits & 0x00000008u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      rssi_ = from.rssi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_info::CopyFrom(const flex_ul_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_info::IsInitialized() const {
  return true;
}

void flex_ul_info::InternalSwap(flex_ul_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ul_reception_.InternalSwap(&other->ul_reception_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ul_info, rssi_)
      + sizeof(flex_ul_info::rssi_)
      - PROTOBUF_FIELD_OFFSET(flex_ul_info, rnti_)>(
          reinterpret_cast<char*>(&rnti_),
          reinterpret_cast<char*>(&other->rnti_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ul_info::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_info* Arena::CreateMaybeMessage< ::protocol::flex_dl_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_info >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ul_info* Arena::CreateMaybeMessage< ::protocol::flex_ul_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ul_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
