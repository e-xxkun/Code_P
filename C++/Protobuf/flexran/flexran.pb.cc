// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flexran.proto

#include "flexran.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_agent_reconfiguration_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_cell_config_config_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_cell_stats_report_stats_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_cell_stats_request_stats_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_complete_stats_request_stats_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_control_delegation_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_disconnect_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_controller_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_dl_broadcast_controller_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_controller_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_dl_data_controller_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_time_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_dl_info_time_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_flex_dl_mac_config_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_controller_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_dl_rar_controller_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_echo_reply_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_echo_request_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_enb_config_reply_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_enb_config_request_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_header_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_header_header_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_hello_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ho_command_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_lc_config_reply_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_lc_config_request_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_lc_ue_config_config_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_measurement_info_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_controller_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_pdcch_ofdm_sym_count_controller_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_rrc_triggering_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_s1ap_config_config_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_sf_trigger_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_stats_reply_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_flex_stats_request_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_flex_ue_config_config_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ue_config_reply_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ue_config_request_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ue_state_change_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_flex_ue_stats_report_stats_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ue_stats_request_stats_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_controller_5fcommands_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ul_data_controller_5fcommands_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_time_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ul_info_time_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ul_mac_config_flexran_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_flexran_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ul_sr_info_flexran_2eproto;
namespace protocol {
class flexran_messageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flexran_message> _instance;
  const ::protocol::flex_hello* hello_msg_;
  const ::protocol::flex_echo_request* echo_request_msg_;
  const ::protocol::flex_echo_reply* echo_reply_msg_;
  const ::protocol::flex_stats_request* stats_request_msg_;
  const ::protocol::flex_stats_reply* stats_reply_msg_;
  const ::protocol::flex_sf_trigger* sf_trigger_msg_;
  const ::protocol::flex_ul_sr_info* ul_sr_info_msg_;
  const ::protocol::flex_enb_config_request* enb_config_request_msg_;
  const ::protocol::flex_enb_config_reply* enb_config_reply_msg_;
  const ::protocol::flex_ue_config_request* ue_config_request_msg_;
  const ::protocol::flex_ue_config_reply* ue_config_reply_msg_;
  const ::protocol::flex_lc_config_request* lc_config_request_msg_;
  const ::protocol::flex_lc_config_reply* lc_config_reply_msg_;
  const ::protocol::flex_dl_mac_config* dl_mac_config_msg_;
  const ::protocol::flex_ue_state_change* ue_state_change_msg_;
  const ::protocol::flex_control_delegation* control_delegation_msg_;
  const ::protocol::flex_agent_reconfiguration* agent_reconfiguration_msg_;
  const ::protocol::flex_rrc_triggering* rrc_triggering_;
  const ::protocol::flex_ul_mac_config* ul_mac_config_msg_;
  const ::protocol::flex_disconnect* disconnect_msg_;
  const ::protocol::flex_ho_command* ho_command_;
} _flexran_message_default_instance_;
class flex_helloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_hello> _instance;
} _flex_hello_default_instance_;
class flex_echo_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_echo_request> _instance;
} _flex_echo_request_default_instance_;
class flex_echo_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_echo_reply> _instance;
} _flex_echo_reply_default_instance_;
class flex_stats_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_stats_request> _instance;
  const ::protocol::flex_complete_stats_request* complete_stats_request_;
  const ::protocol::flex_cell_stats_request* cell_stats_request_;
  const ::protocol::flex_ue_stats_request* ue_stats_request_;
} _flex_stats_request_default_instance_;
class flex_stats_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_stats_reply> _instance;
} _flex_stats_reply_default_instance_;
class flex_sf_triggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_sf_trigger> _instance;
} _flex_sf_trigger_default_instance_;
class flex_ul_sr_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ul_sr_info> _instance;
} _flex_ul_sr_info_default_instance_;
class flex_enb_config_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_enb_config_request> _instance;
} _flex_enb_config_request_default_instance_;
class flex_enb_config_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_enb_config_reply> _instance;
} _flex_enb_config_reply_default_instance_;
class flex_ue_config_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ue_config_request> _instance;
} _flex_ue_config_request_default_instance_;
class flex_ue_config_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ue_config_reply> _instance;
} _flex_ue_config_reply_default_instance_;
class flex_lc_config_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_lc_config_request> _instance;
} _flex_lc_config_request_default_instance_;
class flex_lc_config_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_lc_config_reply> _instance;
} _flex_lc_config_reply_default_instance_;
class flex_dl_mac_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_mac_config> _instance;
} _flex_dl_mac_config_default_instance_;
class flex_ul_mac_configDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ul_mac_config> _instance;
} _flex_ul_mac_config_default_instance_;
class flex_rrc_triggeringDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_rrc_triggering> _instance;
} _flex_rrc_triggering_default_instance_;
class flex_ho_commandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ho_command> _instance;
} _flex_ho_command_default_instance_;
class flex_ue_state_changeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ue_state_change> _instance;
} _flex_ue_state_change_default_instance_;
class flex_control_delegationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_control_delegation> _instance;
} _flex_control_delegation_default_instance_;
class flex_agent_reconfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_agent_reconfiguration> _instance;
} _flex_agent_reconfiguration_default_instance_;
class flex_echo_request_latencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_echo_request_latency> _instance;
} _flex_echo_request_latency_default_instance_;
class flex_echo_reply_latencyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_echo_reply_latency> _instance;
} _flex_echo_reply_latency_default_instance_;
class flex_disconnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_disconnect> _instance;
} _flex_disconnect_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_agent_reconfiguration_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_agent_reconfiguration_default_instance_;
    new (ptr) ::protocol::flex_agent_reconfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_agent_reconfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_agent_reconfiguration_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_agent_reconfiguration_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_control_delegation_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_control_delegation_default_instance_;
    new (ptr) ::protocol::flex_control_delegation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_control_delegation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_control_delegation_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_control_delegation_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_disconnect_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_disconnect_default_instance_;
    new (ptr) ::protocol::flex_disconnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_disconnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_disconnect_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_disconnect_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_dl_mac_config_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_mac_config_default_instance_;
    new (ptr) ::protocol::flex_dl_mac_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_mac_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_flex_dl_mac_config_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_flex_dl_mac_config_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_dl_data_controller_5fcommands_2eproto.base,
      &scc_info_flex_dl_rar_controller_5fcommands_2eproto.base,
      &scc_info_flex_dl_broadcast_controller_5fcommands_2eproto.base,
      &scc_info_flex_pdcch_ofdm_sym_count_controller_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_flex_echo_reply_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_echo_reply_default_instance_;
    new (ptr) ::protocol::flex_echo_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_echo_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_echo_reply_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_echo_reply_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_echo_reply_latency_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_echo_reply_latency_default_instance_;
    new (ptr) ::protocol::flex_echo_reply_latency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_echo_reply_latency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_echo_reply_latency_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_echo_reply_latency_flexran_2eproto}, {}};

static void InitDefaultsscc_info_flex_echo_request_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_echo_request_default_instance_;
    new (ptr) ::protocol::flex_echo_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_echo_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_echo_request_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_echo_request_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_echo_request_latency_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_echo_request_latency_default_instance_;
    new (ptr) ::protocol::flex_echo_request_latency();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_echo_request_latency::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_echo_request_latency_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_echo_request_latency_flexran_2eproto}, {}};

static void InitDefaultsscc_info_flex_enb_config_reply_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_enb_config_reply_default_instance_;
    new (ptr) ::protocol::flex_enb_config_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_enb_config_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_enb_config_reply_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_flex_enb_config_reply_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_cell_config_config_5fmessages_2eproto.base,
      &scc_info_flex_s1ap_config_config_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_enb_config_request_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_enb_config_request_default_instance_;
    new (ptr) ::protocol::flex_enb_config_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_enb_config_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_enb_config_request_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_enb_config_request_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_hello_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_hello_default_instance_;
    new (ptr) ::protocol::flex_hello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_hello::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_hello_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_hello_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_ho_command_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ho_command_default_instance_;
    new (ptr) ::protocol::flex_ho_command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ho_command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ho_command_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_ho_command_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_lc_config_reply_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_lc_config_reply_default_instance_;
    new (ptr) ::protocol::flex_lc_config_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_lc_config_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_lc_config_reply_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_lc_config_reply_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_lc_ue_config_config_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_lc_config_request_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_lc_config_request_default_instance_;
    new (ptr) ::protocol::flex_lc_config_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_lc_config_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_lc_config_request_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_lc_config_request_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_rrc_triggering_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_rrc_triggering_default_instance_;
    new (ptr) ::protocol::flex_rrc_triggering();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_rrc_triggering::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_rrc_triggering_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_rrc_triggering_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_measurement_info_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_sf_trigger_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_sf_trigger_default_instance_;
    new (ptr) ::protocol::flex_sf_trigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_sf_trigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_sf_trigger_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_flex_sf_trigger_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_dl_info_time_5fcommon_2eproto.base,
      &scc_info_flex_ul_info_time_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_stats_reply_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_stats_reply_default_instance_;
    new (ptr) ::protocol::flex_stats_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_stats_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_flex_stats_reply_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_flex_stats_reply_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_ue_stats_report_stats_5fmessages_2eproto.base,
      &scc_info_flex_cell_stats_report_stats_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_stats_request_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_stats_request_default_instance_;
    new (ptr) ::protocol::flex_stats_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_stats_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_flex_stats_request_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_flex_stats_request_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_complete_stats_request_stats_5fmessages_2eproto.base,
      &scc_info_flex_cell_stats_request_stats_5fmessages_2eproto.base,
      &scc_info_flex_ue_stats_request_stats_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_ue_config_reply_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ue_config_reply_default_instance_;
    new (ptr) ::protocol::flex_ue_config_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ue_config_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ue_config_reply_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_ue_config_reply_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_ue_config_config_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_ue_config_request_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ue_config_request_default_instance_;
    new (ptr) ::protocol::flex_ue_config_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ue_config_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ue_config_request_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_ue_config_request_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flex_ue_state_change_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ue_state_change_default_instance_;
    new (ptr) ::protocol::flex_ue_state_change();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ue_state_change::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ue_state_change_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_ue_state_change_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_ue_config_config_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_ul_mac_config_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ul_mac_config_default_instance_;
    new (ptr) ::protocol::flex_ul_mac_config();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ul_mac_config::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ul_mac_config_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_ul_mac_config_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,
      &scc_info_flex_ul_data_controller_5fcommands_2eproto.base,}};

static void InitDefaultsscc_info_flex_ul_sr_info_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ul_sr_info_default_instance_;
    new (ptr) ::protocol::flex_ul_sr_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ul_sr_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_ul_sr_info_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_ul_sr_info_flexran_2eproto}, {
      &scc_info_flex_header_header_2eproto.base,}};

static void InitDefaultsscc_info_flexran_message_flexran_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flexran_message_default_instance_;
    new (ptr) ::protocol::flexran_message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flexran_message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<21> scc_info_flexran_message_flexran_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 21, 0, InitDefaultsscc_info_flexran_message_flexran_2eproto}, {
      &scc_info_flex_hello_flexran_2eproto.base,
      &scc_info_flex_echo_request_flexran_2eproto.base,
      &scc_info_flex_echo_reply_flexran_2eproto.base,
      &scc_info_flex_stats_request_flexran_2eproto.base,
      &scc_info_flex_stats_reply_flexran_2eproto.base,
      &scc_info_flex_sf_trigger_flexran_2eproto.base,
      &scc_info_flex_ul_sr_info_flexran_2eproto.base,
      &scc_info_flex_enb_config_request_flexran_2eproto.base,
      &scc_info_flex_enb_config_reply_flexran_2eproto.base,
      &scc_info_flex_ue_config_request_flexran_2eproto.base,
      &scc_info_flex_ue_config_reply_flexran_2eproto.base,
      &scc_info_flex_lc_config_request_flexran_2eproto.base,
      &scc_info_flex_lc_config_reply_flexran_2eproto.base,
      &scc_info_flex_dl_mac_config_flexran_2eproto.base,
      &scc_info_flex_ue_state_change_flexran_2eproto.base,
      &scc_info_flex_control_delegation_flexran_2eproto.base,
      &scc_info_flex_agent_reconfiguration_flexran_2eproto.base,
      &scc_info_flex_rrc_triggering_flexran_2eproto.base,
      &scc_info_flex_ul_mac_config_flexran_2eproto.base,
      &scc_info_flex_disconnect_flexran_2eproto.base,
      &scc_info_flex_ho_command_flexran_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_flexran_2eproto[24];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_flexran_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_flexran_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_flexran_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flexran_message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flexran_message, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::flexran_message, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flexran_message, msg_dir_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, hello_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, echo_request_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, echo_reply_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, stats_request_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, stats_reply_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, sf_trigger_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, ul_sr_info_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, enb_config_request_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, enb_config_reply_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, ue_config_request_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, ue_config_reply_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, lc_config_request_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, lc_config_reply_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, dl_mac_config_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, ue_state_change_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, control_delegation_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, agent_reconfiguration_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, rrc_triggering_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, ul_mac_config_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, disconnect_msg_),
  offsetof(::protocol::flexran_messageDefaultTypeInternal, ho_command_),
  PROTOBUF_FIELD_OFFSET(::protocol::flexran_message, msg_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_hello, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_hello, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_hello, bs_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_hello, capabilities_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_hello, splits_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_request, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_request, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_request, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_reply, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_reply, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_reply, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_request, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_request, type_),
  offsetof(::protocol::flex_stats_requestDefaultTypeInternal, complete_stats_request_),
  offsetof(::protocol::flex_stats_requestDefaultTypeInternal, cell_stats_request_),
  offsetof(::protocol::flex_stats_requestDefaultTypeInternal, ue_stats_request_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_request, body_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_reply, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_reply, ue_report_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_stats_reply, cell_report_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sf_trigger, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sf_trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sf_trigger, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sf_trigger, sfn_sf_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sf_trigger, dl_info_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_sf_trigger, ul_info_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_sr_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_sr_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_sr_info, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_sr_info, sfn_sf_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_sr_info, rnti_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_request, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_reply, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_reply, enb_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_reply, cell_config_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_reply, device_spec_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_enb_config_reply, s1ap_),
  0,
  2,
  ~0u,
  3,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config_request, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config_reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config_reply, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_config_reply, ue_config_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config_request, header_),
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config_reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config_reply, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_lc_config_reply, lc_ue_config_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, sfn_sf_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, dl_ue_data_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, dl_rar_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, dl_broadcast_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_mac_config, ofdm_sym_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_mac_config, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_mac_config, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_mac_config, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_mac_config, sfn_sf_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_mac_config, ul_ue_data_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_triggering, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_triggering, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_triggering, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_triggering, rrc_trigger_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_triggering, meas_info_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ho_command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ho_command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ho_command, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ho_command, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ho_command, target_phy_cell_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_state_change, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_state_change, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_state_change, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_state_change, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_state_change, config_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_control_delegation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_control_delegation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_control_delegation, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_control_delegation, delegation_type_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_control_delegation, payload_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_control_delegation, name_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_agent_reconfiguration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_agent_reconfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_agent_reconfiguration, header_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_agent_reconfiguration, policy_),
  1,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_request_latency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_echo_reply_latency, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_disconnect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_disconnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_disconnect, header_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 28, sizeof(::protocol::flexran_message)},
  { 50, 59, sizeof(::protocol::flex_hello)},
  { 63, 69, sizeof(::protocol::flex_echo_request)},
  { 70, 76, sizeof(::protocol::flex_echo_reply)},
  { 77, 88, sizeof(::protocol::flex_stats_request)},
  { 93, 101, sizeof(::protocol::flex_stats_reply)},
  { 104, 113, sizeof(::protocol::flex_sf_trigger)},
  { 117, 125, sizeof(::protocol::flex_ul_sr_info)},
  { 128, 134, sizeof(::protocol::flex_enb_config_request)},
  { 135, 145, sizeof(::protocol::flex_enb_config_reply)},
  { 150, 156, sizeof(::protocol::flex_ue_config_request)},
  { 157, 164, sizeof(::protocol::flex_ue_config_reply)},
  { 166, 172, sizeof(::protocol::flex_lc_config_request)},
  { 173, 180, sizeof(::protocol::flex_lc_config_reply)},
  { 182, 193, sizeof(::protocol::flex_dl_mac_config)},
  { 199, 207, sizeof(::protocol::flex_ul_mac_config)},
  { 210, 218, sizeof(::protocol::flex_rrc_triggering)},
  { 221, 229, sizeof(::protocol::flex_ho_command)},
  { 232, 240, sizeof(::protocol::flex_ue_state_change)},
  { 243, 252, sizeof(::protocol::flex_control_delegation)},
  { 256, 263, sizeof(::protocol::flex_agent_reconfiguration)},
  { 265, -1, sizeof(::protocol::flex_echo_request_latency)},
  { 270, -1, sizeof(::protocol::flex_echo_reply_latency)},
  { 275, 281, sizeof(::protocol::flex_disconnect)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flexran_message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_hello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_echo_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_echo_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_stats_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_stats_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_sf_trigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ul_sr_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_enb_config_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_enb_config_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ue_config_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ue_config_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_lc_config_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_lc_config_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_mac_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ul_mac_config_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_rrc_triggering_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ho_command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ue_state_change_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_control_delegation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_agent_reconfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_echo_request_latency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_echo_reply_latency_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_disconnect_default_instance_),
};

const char descriptor_table_protodef_flexran_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rflexran.proto\022\010protocol\032\024stats_message"
  "s.proto\032\014header.proto\032\021time_common.proto"
  "\032\025config_messages.proto\032\031controller_comm"
  "ands.proto\032\023config_common.proto\"\251\n\n\017flex"
  "ran_message\022,\n\007msg_dir\030d \001(\0162\033.protocol."
  "flexran_direction\022)\n\thello_msg\030\001 \001(\0132\024.p"
  "rotocol.flex_helloH\000\0227\n\020echo_request_msg"
  "\030\002 \001(\0132\033.protocol.flex_echo_requestH\000\0223\n"
  "\016echo_reply_msg\030\003 \001(\0132\031.protocol.flex_ec"
  "ho_replyH\000\0229\n\021stats_request_msg\030\004 \001(\0132\034."
  "protocol.flex_stats_requestH\000\0225\n\017stats_r"
  "eply_msg\030\005 \001(\0132\032.protocol.flex_stats_rep"
  "lyH\000\0223\n\016sf_trigger_msg\030\006 \001(\0132\031.protocol."
  "flex_sf_triggerH\000\0223\n\016ul_sr_info_msg\030\007 \001("
  "\0132\031.protocol.flex_ul_sr_infoH\000\022C\n\026enb_co"
  "nfig_request_msg\030\010 \001(\0132!.protocol.flex_e"
  "nb_config_requestH\000\022\?\n\024enb_config_reply_"
  "msg\030\t \001(\0132\037.protocol.flex_enb_config_rep"
  "lyH\000\022A\n\025ue_config_request_msg\030\n \001(\0132 .pr"
  "otocol.flex_ue_config_requestH\000\022=\n\023ue_co"
  "nfig_reply_msg\030\013 \001(\0132\036.protocol.flex_ue_"
  "config_replyH\000\022A\n\025lc_config_request_msg\030"
  "\014 \001(\0132 .protocol.flex_lc_config_requestH"
  "\000\022=\n\023lc_config_reply_msg\030\r \001(\0132\036.protoco"
  "l.flex_lc_config_replyH\000\0229\n\021dl_mac_confi"
  "g_msg\030\016 \001(\0132\034.protocol.flex_dl_mac_confi"
  "gH\000\022=\n\023ue_state_change_msg\030\017 \001(\0132\036.proto"
  "col.flex_ue_state_changeH\000\022C\n\026control_de"
  "legation_msg\030\020 \001(\0132!.protocol.flex_contr"
  "ol_delegationH\000\022I\n\031agent_reconfiguration"
  "_msg\030\021 \001(\0132$.protocol.flex_agent_reconfi"
  "gurationH\000\0227\n\016rrc_triggering\030\022 \001(\0132\035.pro"
  "tocol.flex_rrc_triggeringH\000\0229\n\021ul_mac_co"
  "nfig_msg\030\023 \001(\0132\034.protocol.flex_ul_mac_co"
  "nfigH\000\0223\n\016disconnect_msg\030\024 \001(\0132\031.protoco"
  "l.flex_disconnectH\000\022/\n\nho_command\030\025 \001(\0132"
  "\031.protocol.flex_ho_commandH\000B\005\n\003msg\"\237\001\n\n"
  "flex_hello\022%\n\006header\030\001 \001(\0132\025.protocol.fl"
  "ex_header\022\r\n\005bs_id\030\002 \001(\004\0222\n\014capabilities"
  "\030\003 \003(\0162\034.protocol.flex_bs_capability\022\'\n\006"
  "splits\030\004 \003(\0162\027.protocol.flex_bs_split\"A\n"
  "\021flex_echo_request\022%\n\006header\030\001 \001(\0132\025.pro"
  "tocol.flex_header*\005\010d\020\310\001\"\?\n\017flex_echo_re"
  "ply\022%\n\006header\030\001 \001(\0132\025.protocol.flex_head"
  "er*\005\010d\020\310\001\"\263\002\n\022flex_stats_request\022%\n\006head"
  "er\030\001 \001(\0132\025.protocol.flex_header\022\'\n\004type\030"
  "\002 \001(\0162\031.protocol.flex_stats_type\022G\n\026comp"
  "lete_stats_request\030\003 \001(\0132%.protocol.flex"
  "_complete_stats_requestH\000\022\?\n\022cell_stats_"
  "request\030\004 \001(\0132!.protocol.flex_cell_stats"
  "_requestH\000\022;\n\020ue_stats_request\030\005 \001(\0132\037.p"
  "rotocol.flex_ue_stats_requestH\000B\006\n\004body\""
  "\243\001\n\020flex_stats_reply\022%\n\006header\030\001 \001(\0132\025.p"
  "rotocol.flex_header\0221\n\tue_report\030\002 \003(\0132\036"
  ".protocol.flex_ue_stats_report\0225\n\013cell_r"
  "eport\030\003 \003(\0132 .protocol.flex_cell_stats_r"
  "eport\"\232\001\n\017flex_sf_trigger\022%\n\006header\030\001 \001("
  "\0132\025.protocol.flex_header\022\016\n\006sfn_sf\030\002 \001(\r"
  "\022\'\n\007dl_info\030\003 \003(\0132\026.protocol.flex_dl_inf"
  "o\022\'\n\007ul_info\030\004 \003(\0132\026.protocol.flex_ul_in"
  "fo\"V\n\017flex_ul_sr_info\022%\n\006header\030\001 \001(\0132\025."
  "protocol.flex_header\022\016\n\006sfn_sf\030\002 \001(\r\022\014\n\004"
  "rnti\030\003 \003(\r\"@\n\027flex_enb_config_request\022%\n"
  "\006header\030\001 \001(\0132\025.protocol.flex_header\"\276\001\n"
  "\025flex_enb_config_reply\022%\n\006header\030\001 \001(\0132\025"
  ".protocol.flex_header\022\016\n\006eNB_id\030\002 \001(\004\022/\n"
  "\013cell_config\030\003 \003(\0132\032.protocol.flex_cell_"
  "config\022\023\n\013device_spec\030\004 \001(\r\022(\n\004s1ap\030\005 \001("
  "\0132\032.protocol.flex_s1ap_config\"\?\n\026flex_ue"
  "_config_request\022%\n\006header\030\001 \001(\0132\025.protoc"
  "ol.flex_header\"j\n\024flex_ue_config_reply\022%"
  "\n\006header\030\001 \001(\0132\025.protocol.flex_header\022+\n"
  "\tue_config\030\002 \003(\0132\030.protocol.flex_ue_conf"
  "ig\"\?\n\026flex_lc_config_request\022%\n\006header\030\001"
  " \001(\0132\025.protocol.flex_header\"p\n\024flex_lc_c"
  "onfig_reply\022%\n\006header\030\001 \001(\0132\025.protocol.f"
  "lex_header\0221\n\014lc_ue_config\030\002 \003(\0132\033.proto"
  "col.flex_lc_ue_config\"\210\002\n\022flex_dl_mac_co"
  "nfig\022%\n\006header\030\001 \001(\0132\025.protocol.flex_hea"
  "der\022\016\n\006sfn_sf\030\002 \001(\r\022*\n\ndl_ue_data\030\003 \003(\0132"
  "\026.protocol.flex_dl_data\022%\n\006dl_rar\030\004 \003(\0132"
  "\025.protocol.flex_dl_rar\0221\n\014dl_broadcast\030\005"
  " \003(\0132\033.protocol.flex_dl_broadcast\0225\n\010ofd"
  "m_sym\030\006 \003(\0132#.protocol.flex_pdcch_ofdm_s"
  "ym_count\"w\n\022flex_ul_mac_config\022%\n\006header"
  "\030\001 \001(\0132\025.protocol.flex_header\022\016\n\006sfn_sf\030"
  "\002 \001(\r\022*\n\nul_ue_data\030\003 \003(\0132\026.protocol.fle"
  "x_ul_data\"\205\001\n\023flex_rrc_triggering\022%\n\006hea"
  "der\030\001 \001(\0132\025.protocol.flex_header\022\023\n\013rrc_"
  "trigger\030\002 \001(\t\0222\n\tmeas_info\030\003 \001(\0132\037.proto"
  "col.flex_measurement_info\"b\n\017flex_ho_com"
  "mand\022%\n\006header\030\001 \001(\0132\025.protocol.flex_hea"
  "der\022\014\n\004rnti\030\002 \001(\r\022\032\n\022target_phy_cell_id\030"
  "\003 \001(\r\"u\n\024flex_ue_state_change\022%\n\006header\030"
  "\001 \001(\0132\025.protocol.flex_header\022\014\n\004type\030\002 \001"
  "(\r\022(\n\006config\030\003 \001(\0132\030.protocol.flex_ue_co"
  "nfig\"x\n\027flex_control_delegation\022%\n\006heade"
  "r\030\001 \001(\0132\025.protocol.flex_header\022\027\n\017delega"
  "tion_type\030\002 \001(\r\022\017\n\007payload\030\003 \001(\014\022\014\n\004name"
  "\030\004 \001(\t\"S\n\032flex_agent_reconfiguration\022%\n\006"
  "header\030\001 \001(\0132\025.protocol.flex_header\022\016\n\006p"
  "olicy\030\002 \001(\t\"I\n\031flex_echo_request_latency"
  "2,\n\007latency\022\033.protocol.flex_echo_request"
  "\030d \001(\r\"E\n\027flex_echo_reply_latency2*\n\007lat"
  "ency\022\031.protocol.flex_echo_reply\030d \001(\r\"8\n"
  "\017flex_disconnect\022%\n\006header\030\001 \001(\0132\025.proto"
  "col.flex_header*j\n\021flexran_direction\022\013\n\007"
  "NOT_SET\020\000\022\026\n\022INITIATING_MESSAGE\020\001\022\026\n\022SUC"
  "CESSFUL_OUTCOME\020\002\022\030\n\024UNSUCCESSFUL_OUTCOM"
  "E\020\003*\262\002\n\013flexran_err\022\n\n\006NO_ERR\020\000\022\032\n\rMSG_D"
  "EQUEUING\020\377\377\377\377\377\377\377\377\377\001\022\032\n\rMSG_ENQUEUING\020\376\377\377"
  "\377\377\377\377\377\377\001\022\031\n\014MSG_DECODING\020\375\377\377\377\377\377\377\377\377\001\022\031\n\014MS"
  "G_ENCODING\020\374\377\377\377\377\377\377\377\377\001\022\026\n\tMSG_BUILD\020\373\377\377\377\377"
  "\377\377\377\377\001\022\036\n\021MSG_NOT_SUPPORTED\020\372\377\377\377\377\377\377\377\377\001\022\034\n"
  "\017MSG_NOT_HANDLED\020\371\377\377\377\377\377\377\377\377\001\022\036\n\021MSG_NOT_V"
  "ALIDATED\020\370\377\377\377\377\377\377\377\377\001\022\032\n\rMSG_OUT_DATED\020\367\377\377"
  "\377\377\377\377\377\377\001\022\027\n\nUNEXPECTED\020\234\377\377\377\377\377\377\377\377\001*p\n\022flex"
  "_bs_capability\022\t\n\005LOPHY\020\000\022\t\n\005HIPHY\020\001\022\t\n\005"
  "LOMAC\020\002\022\t\n\005HIMAC\020\003\022\007\n\003RLC\020\004\022\010\n\004PDCP\020\005\022\010\n"
  "\004SDAP\020\006\022\007\n\003RRC\020\007\022\010\n\004S1AP\020\010*\?\n\rflex_bs_sp"
  "lit\022\006\n\002F1\020\000\022\t\n\005nFAPI\020\001\022\007\n\003IF4\020\002\022\t\n\005IF4p5"
  "\020\003\022\007\n\003IF5\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_flexran_2eproto_deps[6] = {
  &::descriptor_table_config_5fcommon_2eproto,
  &::descriptor_table_config_5fmessages_2eproto,
  &::descriptor_table_controller_5fcommands_2eproto,
  &::descriptor_table_header_2eproto,
  &::descriptor_table_stats_5fmessages_2eproto,
  &::descriptor_table_time_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_flexran_2eproto_sccs[24] = {
  &scc_info_flex_agent_reconfiguration_flexran_2eproto.base,
  &scc_info_flex_control_delegation_flexran_2eproto.base,
  &scc_info_flex_disconnect_flexran_2eproto.base,
  &scc_info_flex_dl_mac_config_flexran_2eproto.base,
  &scc_info_flex_echo_reply_flexran_2eproto.base,
  &scc_info_flex_echo_reply_latency_flexran_2eproto.base,
  &scc_info_flex_echo_request_flexran_2eproto.base,
  &scc_info_flex_echo_request_latency_flexran_2eproto.base,
  &scc_info_flex_enb_config_reply_flexran_2eproto.base,
  &scc_info_flex_enb_config_request_flexran_2eproto.base,
  &scc_info_flex_hello_flexran_2eproto.base,
  &scc_info_flex_ho_command_flexran_2eproto.base,
  &scc_info_flex_lc_config_reply_flexran_2eproto.base,
  &scc_info_flex_lc_config_request_flexran_2eproto.base,
  &scc_info_flex_rrc_triggering_flexran_2eproto.base,
  &scc_info_flex_sf_trigger_flexran_2eproto.base,
  &scc_info_flex_stats_reply_flexran_2eproto.base,
  &scc_info_flex_stats_request_flexran_2eproto.base,
  &scc_info_flex_ue_config_reply_flexran_2eproto.base,
  &scc_info_flex_ue_config_request_flexran_2eproto.base,
  &scc_info_flex_ue_state_change_flexran_2eproto.base,
  &scc_info_flex_ul_mac_config_flexran_2eproto.base,
  &scc_info_flex_ul_sr_info_flexran_2eproto.base,
  &scc_info_flexran_message_flexran_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_flexran_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_flexran_2eproto = {
  false, false, descriptor_table_protodef_flexran_2eproto, "flexran.proto", 4851,
  &descriptor_table_flexran_2eproto_once, descriptor_table_flexran_2eproto_sccs, descriptor_table_flexran_2eproto_deps, 24, 6,
  schemas, file_default_instances, TableStruct_flexran_2eproto::offsets,
  file_level_metadata_flexran_2eproto, 24, file_level_enum_descriptors_flexran_2eproto, file_level_service_descriptors_flexran_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_flexran_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_flexran_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flexran_direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flexran_2eproto);
  return file_level_enum_descriptors_flexran_2eproto[0];
}
bool flexran_direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flexran_err_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flexran_2eproto);
  return file_level_enum_descriptors_flexran_2eproto[1];
}
bool flexran_err_IsValid(int value) {
  switch (value) {
    case -100:
    case -9:
    case -8:
    case -7:
    case -6:
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 0:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_bs_capability_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flexran_2eproto);
  return file_level_enum_descriptors_flexran_2eproto[2];
}
bool flex_bs_capability_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_bs_split_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_flexran_2eproto);
  return file_level_enum_descriptors_flexran_2eproto[3];
}
bool flex_bs_split_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void flexran_message::InitAsDefaultInstance() {
  ::protocol::_flexran_message_default_instance_.hello_msg_ = const_cast< ::protocol::flex_hello*>(
      ::protocol::flex_hello::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.echo_request_msg_ = const_cast< ::protocol::flex_echo_request*>(
      ::protocol::flex_echo_request::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.echo_reply_msg_ = const_cast< ::protocol::flex_echo_reply*>(
      ::protocol::flex_echo_reply::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.stats_request_msg_ = const_cast< ::protocol::flex_stats_request*>(
      ::protocol::flex_stats_request::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.stats_reply_msg_ = const_cast< ::protocol::flex_stats_reply*>(
      ::protocol::flex_stats_reply::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.sf_trigger_msg_ = const_cast< ::protocol::flex_sf_trigger*>(
      ::protocol::flex_sf_trigger::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.ul_sr_info_msg_ = const_cast< ::protocol::flex_ul_sr_info*>(
      ::protocol::flex_ul_sr_info::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.enb_config_request_msg_ = const_cast< ::protocol::flex_enb_config_request*>(
      ::protocol::flex_enb_config_request::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.enb_config_reply_msg_ = const_cast< ::protocol::flex_enb_config_reply*>(
      ::protocol::flex_enb_config_reply::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.ue_config_request_msg_ = const_cast< ::protocol::flex_ue_config_request*>(
      ::protocol::flex_ue_config_request::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.ue_config_reply_msg_ = const_cast< ::protocol::flex_ue_config_reply*>(
      ::protocol::flex_ue_config_reply::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.lc_config_request_msg_ = const_cast< ::protocol::flex_lc_config_request*>(
      ::protocol::flex_lc_config_request::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.lc_config_reply_msg_ = const_cast< ::protocol::flex_lc_config_reply*>(
      ::protocol::flex_lc_config_reply::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.dl_mac_config_msg_ = const_cast< ::protocol::flex_dl_mac_config*>(
      ::protocol::flex_dl_mac_config::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.ue_state_change_msg_ = const_cast< ::protocol::flex_ue_state_change*>(
      ::protocol::flex_ue_state_change::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.control_delegation_msg_ = const_cast< ::protocol::flex_control_delegation*>(
      ::protocol::flex_control_delegation::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.agent_reconfiguration_msg_ = const_cast< ::protocol::flex_agent_reconfiguration*>(
      ::protocol::flex_agent_reconfiguration::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.rrc_triggering_ = const_cast< ::protocol::flex_rrc_triggering*>(
      ::protocol::flex_rrc_triggering::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.ul_mac_config_msg_ = const_cast< ::protocol::flex_ul_mac_config*>(
      ::protocol::flex_ul_mac_config::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.disconnect_msg_ = const_cast< ::protocol::flex_disconnect*>(
      ::protocol::flex_disconnect::internal_default_instance());
  ::protocol::_flexran_message_default_instance_.ho_command_ = const_cast< ::protocol::flex_ho_command*>(
      ::protocol::flex_ho_command::internal_default_instance());
}
class flexran_message::_Internal {
 public:
  using HasBits = decltype(std::declval<flexran_message>()._has_bits_);
  static void set_has_msg_dir(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protocol::flex_hello& hello_msg(const flexran_message* msg);
  static const ::protocol::flex_echo_request& echo_request_msg(const flexran_message* msg);
  static const ::protocol::flex_echo_reply& echo_reply_msg(const flexran_message* msg);
  static const ::protocol::flex_stats_request& stats_request_msg(const flexran_message* msg);
  static const ::protocol::flex_stats_reply& stats_reply_msg(const flexran_message* msg);
  static const ::protocol::flex_sf_trigger& sf_trigger_msg(const flexran_message* msg);
  static const ::protocol::flex_ul_sr_info& ul_sr_info_msg(const flexran_message* msg);
  static const ::protocol::flex_enb_config_request& enb_config_request_msg(const flexran_message* msg);
  static const ::protocol::flex_enb_config_reply& enb_config_reply_msg(const flexran_message* msg);
  static const ::protocol::flex_ue_config_request& ue_config_request_msg(const flexran_message* msg);
  static const ::protocol::flex_ue_config_reply& ue_config_reply_msg(const flexran_message* msg);
  static const ::protocol::flex_lc_config_request& lc_config_request_msg(const flexran_message* msg);
  static const ::protocol::flex_lc_config_reply& lc_config_reply_msg(const flexran_message* msg);
  static const ::protocol::flex_dl_mac_config& dl_mac_config_msg(const flexran_message* msg);
  static const ::protocol::flex_ue_state_change& ue_state_change_msg(const flexran_message* msg);
  static const ::protocol::flex_control_delegation& control_delegation_msg(const flexran_message* msg);
  static const ::protocol::flex_agent_reconfiguration& agent_reconfiguration_msg(const flexran_message* msg);
  static const ::protocol::flex_rrc_triggering& rrc_triggering(const flexran_message* msg);
  static const ::protocol::flex_ul_mac_config& ul_mac_config_msg(const flexran_message* msg);
  static const ::protocol::flex_disconnect& disconnect_msg(const flexran_message* msg);
  static const ::protocol::flex_ho_command& ho_command(const flexran_message* msg);
};

const ::protocol::flex_hello&
flexran_message::_Internal::hello_msg(const flexran_message* msg) {
  return *msg->msg_.hello_msg_;
}
const ::protocol::flex_echo_request&
flexran_message::_Internal::echo_request_msg(const flexran_message* msg) {
  return *msg->msg_.echo_request_msg_;
}
const ::protocol::flex_echo_reply&
flexran_message::_Internal::echo_reply_msg(const flexran_message* msg) {
  return *msg->msg_.echo_reply_msg_;
}
const ::protocol::flex_stats_request&
flexran_message::_Internal::stats_request_msg(const flexran_message* msg) {
  return *msg->msg_.stats_request_msg_;
}
const ::protocol::flex_stats_reply&
flexran_message::_Internal::stats_reply_msg(const flexran_message* msg) {
  return *msg->msg_.stats_reply_msg_;
}
const ::protocol::flex_sf_trigger&
flexran_message::_Internal::sf_trigger_msg(const flexran_message* msg) {
  return *msg->msg_.sf_trigger_msg_;
}
const ::protocol::flex_ul_sr_info&
flexran_message::_Internal::ul_sr_info_msg(const flexran_message* msg) {
  return *msg->msg_.ul_sr_info_msg_;
}
const ::protocol::flex_enb_config_request&
flexran_message::_Internal::enb_config_request_msg(const flexran_message* msg) {
  return *msg->msg_.enb_config_request_msg_;
}
const ::protocol::flex_enb_config_reply&
flexran_message::_Internal::enb_config_reply_msg(const flexran_message* msg) {
  return *msg->msg_.enb_config_reply_msg_;
}
const ::protocol::flex_ue_config_request&
flexran_message::_Internal::ue_config_request_msg(const flexran_message* msg) {
  return *msg->msg_.ue_config_request_msg_;
}
const ::protocol::flex_ue_config_reply&
flexran_message::_Internal::ue_config_reply_msg(const flexran_message* msg) {
  return *msg->msg_.ue_config_reply_msg_;
}
const ::protocol::flex_lc_config_request&
flexran_message::_Internal::lc_config_request_msg(const flexran_message* msg) {
  return *msg->msg_.lc_config_request_msg_;
}
const ::protocol::flex_lc_config_reply&
flexran_message::_Internal::lc_config_reply_msg(const flexran_message* msg) {
  return *msg->msg_.lc_config_reply_msg_;
}
const ::protocol::flex_dl_mac_config&
flexran_message::_Internal::dl_mac_config_msg(const flexran_message* msg) {
  return *msg->msg_.dl_mac_config_msg_;
}
const ::protocol::flex_ue_state_change&
flexran_message::_Internal::ue_state_change_msg(const flexran_message* msg) {
  return *msg->msg_.ue_state_change_msg_;
}
const ::protocol::flex_control_delegation&
flexran_message::_Internal::control_delegation_msg(const flexran_message* msg) {
  return *msg->msg_.control_delegation_msg_;
}
const ::protocol::flex_agent_reconfiguration&
flexran_message::_Internal::agent_reconfiguration_msg(const flexran_message* msg) {
  return *msg->msg_.agent_reconfiguration_msg_;
}
const ::protocol::flex_rrc_triggering&
flexran_message::_Internal::rrc_triggering(const flexran_message* msg) {
  return *msg->msg_.rrc_triggering_;
}
const ::protocol::flex_ul_mac_config&
flexran_message::_Internal::ul_mac_config_msg(const flexran_message* msg) {
  return *msg->msg_.ul_mac_config_msg_;
}
const ::protocol::flex_disconnect&
flexran_message::_Internal::disconnect_msg(const flexran_message* msg) {
  return *msg->msg_.disconnect_msg_;
}
const ::protocol::flex_ho_command&
flexran_message::_Internal::ho_command(const flexran_message* msg) {
  return *msg->msg_.ho_command_;
}
void flexran_message::set_allocated_hello_msg(::protocol::flex_hello* hello_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (hello_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hello_msg);
    if (message_arena != submessage_arena) {
      hello_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hello_msg, submessage_arena);
    }
    set_has_hello_msg();
    msg_.hello_msg_ = hello_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.hello_msg)
}
void flexran_message::set_allocated_echo_request_msg(::protocol::flex_echo_request* echo_request_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_request_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(echo_request_msg);
    if (message_arena != submessage_arena) {
      echo_request_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo_request_msg, submessage_arena);
    }
    set_has_echo_request_msg();
    msg_.echo_request_msg_ = echo_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.echo_request_msg)
}
void flexran_message::set_allocated_echo_reply_msg(::protocol::flex_echo_reply* echo_reply_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (echo_reply_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(echo_reply_msg);
    if (message_arena != submessage_arena) {
      echo_reply_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, echo_reply_msg, submessage_arena);
    }
    set_has_echo_reply_msg();
    msg_.echo_reply_msg_ = echo_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.echo_reply_msg)
}
void flexran_message::set_allocated_stats_request_msg(::protocol::flex_stats_request* stats_request_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (stats_request_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats_request_msg);
    if (message_arena != submessage_arena) {
      stats_request_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_request_msg, submessage_arena);
    }
    set_has_stats_request_msg();
    msg_.stats_request_msg_ = stats_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.stats_request_msg)
}
void flexran_message::set_allocated_stats_reply_msg(::protocol::flex_stats_reply* stats_reply_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (stats_reply_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stats_reply_msg);
    if (message_arena != submessage_arena) {
      stats_reply_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stats_reply_msg, submessage_arena);
    }
    set_has_stats_reply_msg();
    msg_.stats_reply_msg_ = stats_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.stats_reply_msg)
}
void flexran_message::set_allocated_sf_trigger_msg(::protocol::flex_sf_trigger* sf_trigger_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (sf_trigger_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sf_trigger_msg);
    if (message_arena != submessage_arena) {
      sf_trigger_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sf_trigger_msg, submessage_arena);
    }
    set_has_sf_trigger_msg();
    msg_.sf_trigger_msg_ = sf_trigger_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.sf_trigger_msg)
}
void flexran_message::set_allocated_ul_sr_info_msg(::protocol::flex_ul_sr_info* ul_sr_info_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (ul_sr_info_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ul_sr_info_msg);
    if (message_arena != submessage_arena) {
      ul_sr_info_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ul_sr_info_msg, submessage_arena);
    }
    set_has_ul_sr_info_msg();
    msg_.ul_sr_info_msg_ = ul_sr_info_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ul_sr_info_msg)
}
void flexran_message::set_allocated_enb_config_request_msg(::protocol::flex_enb_config_request* enb_config_request_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (enb_config_request_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(enb_config_request_msg);
    if (message_arena != submessage_arena) {
      enb_config_request_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enb_config_request_msg, submessage_arena);
    }
    set_has_enb_config_request_msg();
    msg_.enb_config_request_msg_ = enb_config_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.enb_config_request_msg)
}
void flexran_message::set_allocated_enb_config_reply_msg(::protocol::flex_enb_config_reply* enb_config_reply_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (enb_config_reply_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(enb_config_reply_msg);
    if (message_arena != submessage_arena) {
      enb_config_reply_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enb_config_reply_msg, submessage_arena);
    }
    set_has_enb_config_reply_msg();
    msg_.enb_config_reply_msg_ = enb_config_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.enb_config_reply_msg)
}
void flexran_message::set_allocated_ue_config_request_msg(::protocol::flex_ue_config_request* ue_config_request_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (ue_config_request_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ue_config_request_msg);
    if (message_arena != submessage_arena) {
      ue_config_request_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue_config_request_msg, submessage_arena);
    }
    set_has_ue_config_request_msg();
    msg_.ue_config_request_msg_ = ue_config_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ue_config_request_msg)
}
void flexran_message::set_allocated_ue_config_reply_msg(::protocol::flex_ue_config_reply* ue_config_reply_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (ue_config_reply_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ue_config_reply_msg);
    if (message_arena != submessage_arena) {
      ue_config_reply_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue_config_reply_msg, submessage_arena);
    }
    set_has_ue_config_reply_msg();
    msg_.ue_config_reply_msg_ = ue_config_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ue_config_reply_msg)
}
void flexran_message::set_allocated_lc_config_request_msg(::protocol::flex_lc_config_request* lc_config_request_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (lc_config_request_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lc_config_request_msg);
    if (message_arena != submessage_arena) {
      lc_config_request_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lc_config_request_msg, submessage_arena);
    }
    set_has_lc_config_request_msg();
    msg_.lc_config_request_msg_ = lc_config_request_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.lc_config_request_msg)
}
void flexran_message::set_allocated_lc_config_reply_msg(::protocol::flex_lc_config_reply* lc_config_reply_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (lc_config_reply_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lc_config_reply_msg);
    if (message_arena != submessage_arena) {
      lc_config_reply_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lc_config_reply_msg, submessage_arena);
    }
    set_has_lc_config_reply_msg();
    msg_.lc_config_reply_msg_ = lc_config_reply_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.lc_config_reply_msg)
}
void flexran_message::set_allocated_dl_mac_config_msg(::protocol::flex_dl_mac_config* dl_mac_config_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (dl_mac_config_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dl_mac_config_msg);
    if (message_arena != submessage_arena) {
      dl_mac_config_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dl_mac_config_msg, submessage_arena);
    }
    set_has_dl_mac_config_msg();
    msg_.dl_mac_config_msg_ = dl_mac_config_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.dl_mac_config_msg)
}
void flexran_message::set_allocated_ue_state_change_msg(::protocol::flex_ue_state_change* ue_state_change_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (ue_state_change_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ue_state_change_msg);
    if (message_arena != submessage_arena) {
      ue_state_change_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue_state_change_msg, submessage_arena);
    }
    set_has_ue_state_change_msg();
    msg_.ue_state_change_msg_ = ue_state_change_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ue_state_change_msg)
}
void flexran_message::set_allocated_control_delegation_msg(::protocol::flex_control_delegation* control_delegation_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (control_delegation_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(control_delegation_msg);
    if (message_arena != submessage_arena) {
      control_delegation_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_delegation_msg, submessage_arena);
    }
    set_has_control_delegation_msg();
    msg_.control_delegation_msg_ = control_delegation_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.control_delegation_msg)
}
void flexran_message::set_allocated_agent_reconfiguration_msg(::protocol::flex_agent_reconfiguration* agent_reconfiguration_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (agent_reconfiguration_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent_reconfiguration_msg);
    if (message_arena != submessage_arena) {
      agent_reconfiguration_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent_reconfiguration_msg, submessage_arena);
    }
    set_has_agent_reconfiguration_msg();
    msg_.agent_reconfiguration_msg_ = agent_reconfiguration_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.agent_reconfiguration_msg)
}
void flexran_message::set_allocated_rrc_triggering(::protocol::flex_rrc_triggering* rrc_triggering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (rrc_triggering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rrc_triggering);
    if (message_arena != submessage_arena) {
      rrc_triggering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rrc_triggering, submessage_arena);
    }
    set_has_rrc_triggering();
    msg_.rrc_triggering_ = rrc_triggering;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.rrc_triggering)
}
void flexran_message::set_allocated_ul_mac_config_msg(::protocol::flex_ul_mac_config* ul_mac_config_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (ul_mac_config_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ul_mac_config_msg);
    if (message_arena != submessage_arena) {
      ul_mac_config_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ul_mac_config_msg, submessage_arena);
    }
    set_has_ul_mac_config_msg();
    msg_.ul_mac_config_msg_ = ul_mac_config_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ul_mac_config_msg)
}
void flexran_message::set_allocated_disconnect_msg(::protocol::flex_disconnect* disconnect_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (disconnect_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(disconnect_msg);
    if (message_arena != submessage_arena) {
      disconnect_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnect_msg, submessage_arena);
    }
    set_has_disconnect_msg();
    msg_.disconnect_msg_ = disconnect_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.disconnect_msg)
}
void flexran_message::set_allocated_ho_command(::protocol::flex_ho_command* ho_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (ho_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ho_command);
    if (message_arena != submessage_arena) {
      ho_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ho_command, submessage_arena);
    }
    set_has_ho_command();
    msg_.ho_command_ = ho_command;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flexran_message.ho_command)
}
flexran_message::flexran_message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flexran_message)
}
flexran_message::flexran_message(const flexran_message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_dir_ = from.msg_dir_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kHelloMsg: {
      _internal_mutable_hello_msg()->::protocol::flex_hello::MergeFrom(from._internal_hello_msg());
      break;
    }
    case kEchoRequestMsg: {
      _internal_mutable_echo_request_msg()->::protocol::flex_echo_request::MergeFrom(from._internal_echo_request_msg());
      break;
    }
    case kEchoReplyMsg: {
      _internal_mutable_echo_reply_msg()->::protocol::flex_echo_reply::MergeFrom(from._internal_echo_reply_msg());
      break;
    }
    case kStatsRequestMsg: {
      _internal_mutable_stats_request_msg()->::protocol::flex_stats_request::MergeFrom(from._internal_stats_request_msg());
      break;
    }
    case kStatsReplyMsg: {
      _internal_mutable_stats_reply_msg()->::protocol::flex_stats_reply::MergeFrom(from._internal_stats_reply_msg());
      break;
    }
    case kSfTriggerMsg: {
      _internal_mutable_sf_trigger_msg()->::protocol::flex_sf_trigger::MergeFrom(from._internal_sf_trigger_msg());
      break;
    }
    case kUlSrInfoMsg: {
      _internal_mutable_ul_sr_info_msg()->::protocol::flex_ul_sr_info::MergeFrom(from._internal_ul_sr_info_msg());
      break;
    }
    case kEnbConfigRequestMsg: {
      _internal_mutable_enb_config_request_msg()->::protocol::flex_enb_config_request::MergeFrom(from._internal_enb_config_request_msg());
      break;
    }
    case kEnbConfigReplyMsg: {
      _internal_mutable_enb_config_reply_msg()->::protocol::flex_enb_config_reply::MergeFrom(from._internal_enb_config_reply_msg());
      break;
    }
    case kUeConfigRequestMsg: {
      _internal_mutable_ue_config_request_msg()->::protocol::flex_ue_config_request::MergeFrom(from._internal_ue_config_request_msg());
      break;
    }
    case kUeConfigReplyMsg: {
      _internal_mutable_ue_config_reply_msg()->::protocol::flex_ue_config_reply::MergeFrom(from._internal_ue_config_reply_msg());
      break;
    }
    case kLcConfigRequestMsg: {
      _internal_mutable_lc_config_request_msg()->::protocol::flex_lc_config_request::MergeFrom(from._internal_lc_config_request_msg());
      break;
    }
    case kLcConfigReplyMsg: {
      _internal_mutable_lc_config_reply_msg()->::protocol::flex_lc_config_reply::MergeFrom(from._internal_lc_config_reply_msg());
      break;
    }
    case kDlMacConfigMsg: {
      _internal_mutable_dl_mac_config_msg()->::protocol::flex_dl_mac_config::MergeFrom(from._internal_dl_mac_config_msg());
      break;
    }
    case kUeStateChangeMsg: {
      _internal_mutable_ue_state_change_msg()->::protocol::flex_ue_state_change::MergeFrom(from._internal_ue_state_change_msg());
      break;
    }
    case kControlDelegationMsg: {
      _internal_mutable_control_delegation_msg()->::protocol::flex_control_delegation::MergeFrom(from._internal_control_delegation_msg());
      break;
    }
    case kAgentReconfigurationMsg: {
      _internal_mutable_agent_reconfiguration_msg()->::protocol::flex_agent_reconfiguration::MergeFrom(from._internal_agent_reconfiguration_msg());
      break;
    }
    case kRrcTriggering: {
      _internal_mutable_rrc_triggering()->::protocol::flex_rrc_triggering::MergeFrom(from._internal_rrc_triggering());
      break;
    }
    case kUlMacConfigMsg: {
      _internal_mutable_ul_mac_config_msg()->::protocol::flex_ul_mac_config::MergeFrom(from._internal_ul_mac_config_msg());
      break;
    }
    case kDisconnectMsg: {
      _internal_mutable_disconnect_msg()->::protocol::flex_disconnect::MergeFrom(from._internal_disconnect_msg());
      break;
    }
    case kHoCommand: {
      _internal_mutable_ho_command()->::protocol::flex_ho_command::MergeFrom(from._internal_ho_command());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flexran_message)
}

void flexran_message::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flexran_message_flexran_2eproto.base);
  msg_dir_ = 0;
  clear_has_msg();
}

flexran_message::~flexran_message() {
  // @@protoc_insertion_point(destructor:protocol.flexran_message)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flexran_message::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void flexran_message::ArenaDtor(void* object) {
  flexran_message* _this = reinterpret_cast< flexran_message* >(object);
  (void)_this;
}
void flexran_message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flexran_message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flexran_message& flexran_message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flexran_message_flexran_2eproto.base);
  return *internal_default_instance();
}


void flexran_message::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flexran_message)
  switch (msg_case()) {
    case kHelloMsg: {
      if (GetArena() == nullptr) {
        delete msg_.hello_msg_;
      }
      break;
    }
    case kEchoRequestMsg: {
      if (GetArena() == nullptr) {
        delete msg_.echo_request_msg_;
      }
      break;
    }
    case kEchoReplyMsg: {
      if (GetArena() == nullptr) {
        delete msg_.echo_reply_msg_;
      }
      break;
    }
    case kStatsRequestMsg: {
      if (GetArena() == nullptr) {
        delete msg_.stats_request_msg_;
      }
      break;
    }
    case kStatsReplyMsg: {
      if (GetArena() == nullptr) {
        delete msg_.stats_reply_msg_;
      }
      break;
    }
    case kSfTriggerMsg: {
      if (GetArena() == nullptr) {
        delete msg_.sf_trigger_msg_;
      }
      break;
    }
    case kUlSrInfoMsg: {
      if (GetArena() == nullptr) {
        delete msg_.ul_sr_info_msg_;
      }
      break;
    }
    case kEnbConfigRequestMsg: {
      if (GetArena() == nullptr) {
        delete msg_.enb_config_request_msg_;
      }
      break;
    }
    case kEnbConfigReplyMsg: {
      if (GetArena() == nullptr) {
        delete msg_.enb_config_reply_msg_;
      }
      break;
    }
    case kUeConfigRequestMsg: {
      if (GetArena() == nullptr) {
        delete msg_.ue_config_request_msg_;
      }
      break;
    }
    case kUeConfigReplyMsg: {
      if (GetArena() == nullptr) {
        delete msg_.ue_config_reply_msg_;
      }
      break;
    }
    case kLcConfigRequestMsg: {
      if (GetArena() == nullptr) {
        delete msg_.lc_config_request_msg_;
      }
      break;
    }
    case kLcConfigReplyMsg: {
      if (GetArena() == nullptr) {
        delete msg_.lc_config_reply_msg_;
      }
      break;
    }
    case kDlMacConfigMsg: {
      if (GetArena() == nullptr) {
        delete msg_.dl_mac_config_msg_;
      }
      break;
    }
    case kUeStateChangeMsg: {
      if (GetArena() == nullptr) {
        delete msg_.ue_state_change_msg_;
      }
      break;
    }
    case kControlDelegationMsg: {
      if (GetArena() == nullptr) {
        delete msg_.control_delegation_msg_;
      }
      break;
    }
    case kAgentReconfigurationMsg: {
      if (GetArena() == nullptr) {
        delete msg_.agent_reconfiguration_msg_;
      }
      break;
    }
    case kRrcTriggering: {
      if (GetArena() == nullptr) {
        delete msg_.rrc_triggering_;
      }
      break;
    }
    case kUlMacConfigMsg: {
      if (GetArena() == nullptr) {
        delete msg_.ul_mac_config_msg_;
      }
      break;
    }
    case kDisconnectMsg: {
      if (GetArena() == nullptr) {
        delete msg_.disconnect_msg_;
      }
      break;
    }
    case kHoCommand: {
      if (GetArena() == nullptr) {
        delete msg_.ho_command_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void flexran_message::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flexran_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_dir_ = 0;
  clear_msg();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flexran_message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .protocol.flex_hello hello_msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hello_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_echo_request echo_request_msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo_request_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_echo_reply echo_reply_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_echo_reply_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_stats_request stats_request_msg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_request_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_stats_reply stats_reply_msg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats_reply_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_sf_trigger sf_trigger_msg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sf_trigger_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_ul_sr_info ul_sr_info_msg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ul_sr_info_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_enb_config_request enb_config_request_msg = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_enb_config_request_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_enb_config_reply enb_config_reply_msg = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_enb_config_reply_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_ue_config_request ue_config_request_msg = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_ue_config_request_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_ue_config_reply ue_config_reply_msg = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_ue_config_reply_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_lc_config_request lc_config_request_msg = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_lc_config_request_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_lc_config_reply lc_config_reply_msg = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_lc_config_reply_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_dl_mac_config dl_mac_config_msg = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl_mac_config_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_ue_state_change ue_state_change_msg = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_ue_state_change_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_control_delegation control_delegation_msg = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_delegation_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_agent_reconfiguration agent_reconfiguration_msg = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_reconfiguration_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_rrc_triggering rrc_triggering = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_rrc_triggering(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_ul_mac_config ul_mac_config_msg = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_ul_mac_config_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_disconnect disconnect_msg = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnect_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_ho_command ho_command = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_ho_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flexran_direction msg_dir = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protocol::flexran_direction_IsValid(val))) {
            _internal_set_msg_dir(static_cast<::protocol::flexran_direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(100, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flexran_message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flexran_message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (msg_case()) {
    case kHelloMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          1, _Internal::hello_msg(this), target, stream);
      break;
    }
    case kEchoRequestMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          2, _Internal::echo_request_msg(this), target, stream);
      break;
    }
    case kEchoReplyMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::echo_reply_msg(this), target, stream);
      break;
    }
    case kStatsRequestMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::stats_request_msg(this), target, stream);
      break;
    }
    case kStatsReplyMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::stats_reply_msg(this), target, stream);
      break;
    }
    case kSfTriggerMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::sf_trigger_msg(this), target, stream);
      break;
    }
    case kUlSrInfoMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::ul_sr_info_msg(this), target, stream);
      break;
    }
    case kEnbConfigRequestMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::enb_config_request_msg(this), target, stream);
      break;
    }
    case kEnbConfigReplyMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::enb_config_reply_msg(this), target, stream);
      break;
    }
    case kUeConfigRequestMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::ue_config_request_msg(this), target, stream);
      break;
    }
    case kUeConfigReplyMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::ue_config_reply_msg(this), target, stream);
      break;
    }
    case kLcConfigRequestMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::lc_config_request_msg(this), target, stream);
      break;
    }
    case kLcConfigReplyMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          13, _Internal::lc_config_reply_msg(this), target, stream);
      break;
    }
    case kDlMacConfigMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          14, _Internal::dl_mac_config_msg(this), target, stream);
      break;
    }
    case kUeStateChangeMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          15, _Internal::ue_state_change_msg(this), target, stream);
      break;
    }
    case kControlDelegationMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          16, _Internal::control_delegation_msg(this), target, stream);
      break;
    }
    case kAgentReconfigurationMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          17, _Internal::agent_reconfiguration_msg(this), target, stream);
      break;
    }
    case kRrcTriggering: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          18, _Internal::rrc_triggering(this), target, stream);
      break;
    }
    case kUlMacConfigMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          19, _Internal::ul_mac_config_msg(this), target, stream);
      break;
    }
    case kDisconnectMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          20, _Internal::disconnect_msg(this), target, stream);
      break;
    }
    case kHoCommand: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          21, _Internal::ho_command(this), target, stream);
      break;
    }
    default: ;
  }
  cached_has_bits = _has_bits_[0];
  // optional .protocol.flexran_direction msg_dir = 100;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      100, this->_internal_msg_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flexran_message)
  return target;
}

size_t flexran_message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flexran_message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.flexran_direction msg_dir = 100;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_msg_dir());
  }

  switch (msg_case()) {
    // .protocol.flex_hello hello_msg = 1;
    case kHelloMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.hello_msg_);
      break;
    }
    // .protocol.flex_echo_request echo_request_msg = 2;
    case kEchoRequestMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.echo_request_msg_);
      break;
    }
    // .protocol.flex_echo_reply echo_reply_msg = 3;
    case kEchoReplyMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.echo_reply_msg_);
      break;
    }
    // .protocol.flex_stats_request stats_request_msg = 4;
    case kStatsRequestMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.stats_request_msg_);
      break;
    }
    // .protocol.flex_stats_reply stats_reply_msg = 5;
    case kStatsReplyMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.stats_reply_msg_);
      break;
    }
    // .protocol.flex_sf_trigger sf_trigger_msg = 6;
    case kSfTriggerMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.sf_trigger_msg_);
      break;
    }
    // .protocol.flex_ul_sr_info ul_sr_info_msg = 7;
    case kUlSrInfoMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ul_sr_info_msg_);
      break;
    }
    // .protocol.flex_enb_config_request enb_config_request_msg = 8;
    case kEnbConfigRequestMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.enb_config_request_msg_);
      break;
    }
    // .protocol.flex_enb_config_reply enb_config_reply_msg = 9;
    case kEnbConfigReplyMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.enb_config_reply_msg_);
      break;
    }
    // .protocol.flex_ue_config_request ue_config_request_msg = 10;
    case kUeConfigRequestMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ue_config_request_msg_);
      break;
    }
    // .protocol.flex_ue_config_reply ue_config_reply_msg = 11;
    case kUeConfigReplyMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ue_config_reply_msg_);
      break;
    }
    // .protocol.flex_lc_config_request lc_config_request_msg = 12;
    case kLcConfigRequestMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.lc_config_request_msg_);
      break;
    }
    // .protocol.flex_lc_config_reply lc_config_reply_msg = 13;
    case kLcConfigReplyMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.lc_config_reply_msg_);
      break;
    }
    // .protocol.flex_dl_mac_config dl_mac_config_msg = 14;
    case kDlMacConfigMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.dl_mac_config_msg_);
      break;
    }
    // .protocol.flex_ue_state_change ue_state_change_msg = 15;
    case kUeStateChangeMsg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ue_state_change_msg_);
      break;
    }
    // .protocol.flex_control_delegation control_delegation_msg = 16;
    case kControlDelegationMsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.control_delegation_msg_);
      break;
    }
    // .protocol.flex_agent_reconfiguration agent_reconfiguration_msg = 17;
    case kAgentReconfigurationMsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.agent_reconfiguration_msg_);
      break;
    }
    // .protocol.flex_rrc_triggering rrc_triggering = 18;
    case kRrcTriggering: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.rrc_triggering_);
      break;
    }
    // .protocol.flex_ul_mac_config ul_mac_config_msg = 19;
    case kUlMacConfigMsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ul_mac_config_msg_);
      break;
    }
    // .protocol.flex_disconnect disconnect_msg = 20;
    case kDisconnectMsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.disconnect_msg_);
      break;
    }
    // .protocol.flex_ho_command ho_command = 21;
    case kHoCommand: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.ho_command_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flexran_message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flexran_message)
  GOOGLE_DCHECK_NE(&from, this);
  const flexran_message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flexran_message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flexran_message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flexran_message)
    MergeFrom(*source);
  }
}

void flexran_message::MergeFrom(const flexran_message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flexran_message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_msg_dir()) {
    _internal_set_msg_dir(from._internal_msg_dir());
  }
  switch (from.msg_case()) {
    case kHelloMsg: {
      _internal_mutable_hello_msg()->::protocol::flex_hello::MergeFrom(from._internal_hello_msg());
      break;
    }
    case kEchoRequestMsg: {
      _internal_mutable_echo_request_msg()->::protocol::flex_echo_request::MergeFrom(from._internal_echo_request_msg());
      break;
    }
    case kEchoReplyMsg: {
      _internal_mutable_echo_reply_msg()->::protocol::flex_echo_reply::MergeFrom(from._internal_echo_reply_msg());
      break;
    }
    case kStatsRequestMsg: {
      _internal_mutable_stats_request_msg()->::protocol::flex_stats_request::MergeFrom(from._internal_stats_request_msg());
      break;
    }
    case kStatsReplyMsg: {
      _internal_mutable_stats_reply_msg()->::protocol::flex_stats_reply::MergeFrom(from._internal_stats_reply_msg());
      break;
    }
    case kSfTriggerMsg: {
      _internal_mutable_sf_trigger_msg()->::protocol::flex_sf_trigger::MergeFrom(from._internal_sf_trigger_msg());
      break;
    }
    case kUlSrInfoMsg: {
      _internal_mutable_ul_sr_info_msg()->::protocol::flex_ul_sr_info::MergeFrom(from._internal_ul_sr_info_msg());
      break;
    }
    case kEnbConfigRequestMsg: {
      _internal_mutable_enb_config_request_msg()->::protocol::flex_enb_config_request::MergeFrom(from._internal_enb_config_request_msg());
      break;
    }
    case kEnbConfigReplyMsg: {
      _internal_mutable_enb_config_reply_msg()->::protocol::flex_enb_config_reply::MergeFrom(from._internal_enb_config_reply_msg());
      break;
    }
    case kUeConfigRequestMsg: {
      _internal_mutable_ue_config_request_msg()->::protocol::flex_ue_config_request::MergeFrom(from._internal_ue_config_request_msg());
      break;
    }
    case kUeConfigReplyMsg: {
      _internal_mutable_ue_config_reply_msg()->::protocol::flex_ue_config_reply::MergeFrom(from._internal_ue_config_reply_msg());
      break;
    }
    case kLcConfigRequestMsg: {
      _internal_mutable_lc_config_request_msg()->::protocol::flex_lc_config_request::MergeFrom(from._internal_lc_config_request_msg());
      break;
    }
    case kLcConfigReplyMsg: {
      _internal_mutable_lc_config_reply_msg()->::protocol::flex_lc_config_reply::MergeFrom(from._internal_lc_config_reply_msg());
      break;
    }
    case kDlMacConfigMsg: {
      _internal_mutable_dl_mac_config_msg()->::protocol::flex_dl_mac_config::MergeFrom(from._internal_dl_mac_config_msg());
      break;
    }
    case kUeStateChangeMsg: {
      _internal_mutable_ue_state_change_msg()->::protocol::flex_ue_state_change::MergeFrom(from._internal_ue_state_change_msg());
      break;
    }
    case kControlDelegationMsg: {
      _internal_mutable_control_delegation_msg()->::protocol::flex_control_delegation::MergeFrom(from._internal_control_delegation_msg());
      break;
    }
    case kAgentReconfigurationMsg: {
      _internal_mutable_agent_reconfiguration_msg()->::protocol::flex_agent_reconfiguration::MergeFrom(from._internal_agent_reconfiguration_msg());
      break;
    }
    case kRrcTriggering: {
      _internal_mutable_rrc_triggering()->::protocol::flex_rrc_triggering::MergeFrom(from._internal_rrc_triggering());
      break;
    }
    case kUlMacConfigMsg: {
      _internal_mutable_ul_mac_config_msg()->::protocol::flex_ul_mac_config::MergeFrom(from._internal_ul_mac_config_msg());
      break;
    }
    case kDisconnectMsg: {
      _internal_mutable_disconnect_msg()->::protocol::flex_disconnect::MergeFrom(from._internal_disconnect_msg());
      break;
    }
    case kHoCommand: {
      _internal_mutable_ho_command()->::protocol::flex_ho_command::MergeFrom(from._internal_ho_command());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void flexran_message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flexran_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flexran_message::CopyFrom(const flexran_message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flexran_message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flexran_message::IsInitialized() const {
  switch (msg_case()) {
    case kHelloMsg: {
      break;
    }
    case kEchoRequestMsg: {
      if (has_echo_request_msg()) {
        if (!this->echo_request_msg().IsInitialized()) return false;
      }
      break;
    }
    case kEchoReplyMsg: {
      if (has_echo_reply_msg()) {
        if (!this->echo_reply_msg().IsInitialized()) return false;
      }
      break;
    }
    case kStatsRequestMsg: {
      break;
    }
    case kStatsReplyMsg: {
      break;
    }
    case kSfTriggerMsg: {
      break;
    }
    case kUlSrInfoMsg: {
      break;
    }
    case kEnbConfigRequestMsg: {
      break;
    }
    case kEnbConfigReplyMsg: {
      break;
    }
    case kUeConfigRequestMsg: {
      break;
    }
    case kUeConfigReplyMsg: {
      break;
    }
    case kLcConfigRequestMsg: {
      break;
    }
    case kLcConfigReplyMsg: {
      break;
    }
    case kDlMacConfigMsg: {
      break;
    }
    case kUeStateChangeMsg: {
      break;
    }
    case kControlDelegationMsg: {
      break;
    }
    case kAgentReconfigurationMsg: {
      break;
    }
    case kRrcTriggering: {
      break;
    }
    case kUlMacConfigMsg: {
      break;
    }
    case kDisconnectMsg: {
      break;
    }
    case kHoCommand: {
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return true;
}

void flexran_message::InternalSwap(flexran_message* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(msg_dir_, other->msg_dir_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata flexran_message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_hello::InitAsDefaultInstance() {
  ::protocol::_flex_hello_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_hello::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_hello>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_hello* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bs_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_hello::_Internal::header(const flex_hello* msg) {
  return *msg->header_;
}
void flex_hello::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_hello::flex_hello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  capabilities_(arena),
  splits_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_hello)
}
flex_hello::flex_hello(const flex_hello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      capabilities_(from.capabilities_),
      splits_(from.splits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  bs_id_ = from.bs_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_hello)
}

void flex_hello::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_hello_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bs_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(bs_id_));
}

flex_hello::~flex_hello() {
  // @@protoc_insertion_point(destructor:protocol.flex_hello)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_hello::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_hello::ArenaDtor(void* object) {
  flex_hello* _this = reinterpret_cast< flex_hello* >(object);
  (void)_this;
}
void flex_hello::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_hello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_hello& flex_hello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_hello_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_hello::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capabilities_.Clear();
  splits_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  bs_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_hello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 bs_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_bs_id(&has_bits);
          bs_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_bs_capability capabilities = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protocol::flex_bs_capability_IsValid(val))) {
              _internal_add_capabilities(static_cast<::protocol::flex_bs_capability>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_capabilities(), ptr, ctx, ::protocol::flex_bs_capability_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_bs_split splits = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protocol::flex_bs_split_IsValid(val))) {
              _internal_add_splits(static_cast<::protocol::flex_bs_split>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_splits(), ptr, ctx, ::protocol::flex_bs_split_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_hello::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint64 bs_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_bs_id(), target);
  }

  // repeated .protocol.flex_bs_capability capabilities = 3;
  for (int i = 0, n = this->_internal_capabilities_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        3, this->_internal_capabilities(i), target);
  }

  // repeated .protocol.flex_bs_split splits = 4;
  for (int i = 0, n = this->_internal_splits_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        4, this->_internal_splits(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_hello)
  return target;
}

size_t flex_hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_hello)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_bs_capability capabilities = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_capabilities_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_capabilities(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .protocol.flex_bs_split splits = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_splits_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_splits(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint64 bs_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_bs_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_hello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_hello)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_hello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_hello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_hello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_hello)
    MergeFrom(*source);
  }
}

void flex_hello::MergeFrom(const flex_hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  capabilities_.MergeFrom(from.capabilities_);
  splits_.MergeFrom(from.splits_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      bs_id_ = from.bs_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_hello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_hello::CopyFrom(const flex_hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_hello::IsInitialized() const {
  return true;
}

void flex_hello::InternalSwap(flex_hello* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  capabilities_.InternalSwap(&other->capabilities_);
  splits_.InternalSwap(&other->splits_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_hello, bs_id_)
      + sizeof(flex_hello::bs_id_)
      - PROTOBUF_FIELD_OFFSET(flex_hello, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_hello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_echo_request::InitAsDefaultInstance() {
  ::protocol::_flex_echo_request_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_echo_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_echo_request>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_echo_request* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_echo_request::_Internal::header(const flex_echo_request* msg) {
  return *msg->header_;
}
void flex_echo_request::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_echo_request::flex_echo_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_echo_request)
}
flex_echo_request::flex_echo_request(const flex_echo_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_request)
}

void flex_echo_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_echo_request_flexran_2eproto.base);
  header_ = nullptr;
}

flex_echo_request::~flex_echo_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_echo_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_echo_request::ArenaDtor(void* object) {
  flex_echo_request* _this = reinterpret_cast< flex_echo_request* >(object);
  (void)_this;
}
void flex_echo_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_echo_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_echo_request& flex_echo_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_echo_request_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_echo_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_echo_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 1600u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_echo_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // Extension range [100, 200)
  target = _extensions_._InternalSerialize(
      100, 200, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_request)
  return target;
}

size_t flex_echo_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_request)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_echo_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_echo_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_request)
    MergeFrom(*source);
  }
}

void flex_echo_request::MergeFrom(const flex_echo_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_request)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_echo_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_request::CopyFrom(const flex_echo_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_request::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void flex_echo_request::InternalSwap(flex_echo_request* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_echo_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_echo_reply::InitAsDefaultInstance() {
  ::protocol::_flex_echo_reply_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_echo_reply::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_echo_reply>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_echo_reply* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_echo_reply::_Internal::header(const flex_echo_reply* msg) {
  return *msg->header_;
}
void flex_echo_reply::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_echo_reply::flex_echo_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  _extensions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_echo_reply)
}
flex_echo_reply::flex_echo_reply(const flex_echo_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_reply)
}

void flex_echo_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_echo_reply_flexran_2eproto.base);
  header_ = nullptr;
}

flex_echo_reply::~flex_echo_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_echo_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_echo_reply::ArenaDtor(void* object) {
  flex_echo_reply* _this = reinterpret_cast< flex_echo_reply* >(object);
  (void)_this;
}
void flex_echo_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_echo_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_echo_reply& flex_echo_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_echo_reply_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_echo_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_echo_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
      if ((800u <= tag && tag < 1600u)) {
        ptr = _extensions_.ParseField(tag, ptr,
            internal_default_instance(), &_internal_metadata_, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_echo_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // Extension range [100, 200)
  target = _extensions_._InternalSerialize(
      100, 200, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_reply)
  return target;
}

size_t flex_echo_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_reply)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_echo_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_echo_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_reply)
    MergeFrom(*source);
  }
}

void flex_echo_reply::MergeFrom(const flex_echo_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_echo_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_reply::CopyFrom(const flex_echo_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_reply::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void flex_echo_reply::InternalSwap(flex_echo_reply* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_echo_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_stats_request::InitAsDefaultInstance() {
  ::protocol::_flex_stats_request_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  ::protocol::_flex_stats_request_default_instance_.complete_stats_request_ = const_cast< ::protocol::flex_complete_stats_request*>(
      ::protocol::flex_complete_stats_request::internal_default_instance());
  ::protocol::_flex_stats_request_default_instance_.cell_stats_request_ = const_cast< ::protocol::flex_cell_stats_request*>(
      ::protocol::flex_cell_stats_request::internal_default_instance());
  ::protocol::_flex_stats_request_default_instance_.ue_stats_request_ = const_cast< ::protocol::flex_ue_stats_request*>(
      ::protocol::flex_ue_stats_request::internal_default_instance());
}
class flex_stats_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_stats_request>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_stats_request* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protocol::flex_complete_stats_request& complete_stats_request(const flex_stats_request* msg);
  static const ::protocol::flex_cell_stats_request& cell_stats_request(const flex_stats_request* msg);
  static const ::protocol::flex_ue_stats_request& ue_stats_request(const flex_stats_request* msg);
};

const ::protocol::flex_header&
flex_stats_request::_Internal::header(const flex_stats_request* msg) {
  return *msg->header_;
}
const ::protocol::flex_complete_stats_request&
flex_stats_request::_Internal::complete_stats_request(const flex_stats_request* msg) {
  return *msg->body_.complete_stats_request_;
}
const ::protocol::flex_cell_stats_request&
flex_stats_request::_Internal::cell_stats_request(const flex_stats_request* msg) {
  return *msg->body_.cell_stats_request_;
}
const ::protocol::flex_ue_stats_request&
flex_stats_request::_Internal::ue_stats_request(const flex_stats_request* msg) {
  return *msg->body_.ue_stats_request_;
}
void flex_stats_request::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_stats_request::set_allocated_complete_stats_request(::protocol::flex_complete_stats_request* complete_stats_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_body();
  if (complete_stats_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(complete_stats_request)->GetArena();
    if (message_arena != submessage_arena) {
      complete_stats_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, complete_stats_request, submessage_arena);
    }
    set_has_complete_stats_request();
    body_.complete_stats_request_ = complete_stats_request;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_request.complete_stats_request)
}
void flex_stats_request::clear_complete_stats_request() {
  if (_internal_has_complete_stats_request()) {
    if (GetArena() == nullptr) {
      delete body_.complete_stats_request_;
    }
    clear_has_body();
  }
}
void flex_stats_request::set_allocated_cell_stats_request(::protocol::flex_cell_stats_request* cell_stats_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_body();
  if (cell_stats_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_stats_request)->GetArena();
    if (message_arena != submessage_arena) {
      cell_stats_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_stats_request, submessage_arena);
    }
    set_has_cell_stats_request();
    body_.cell_stats_request_ = cell_stats_request;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_request.cell_stats_request)
}
void flex_stats_request::clear_cell_stats_request() {
  if (_internal_has_cell_stats_request()) {
    if (GetArena() == nullptr) {
      delete body_.cell_stats_request_;
    }
    clear_has_body();
  }
}
void flex_stats_request::set_allocated_ue_stats_request(::protocol::flex_ue_stats_request* ue_stats_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_body();
  if (ue_stats_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_stats_request)->GetArena();
    if (message_arena != submessage_arena) {
      ue_stats_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue_stats_request, submessage_arena);
    }
    set_has_ue_stats_request();
    body_.ue_stats_request_ = ue_stats_request;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_stats_request.ue_stats_request)
}
void flex_stats_request::clear_ue_stats_request() {
  if (_internal_has_ue_stats_request()) {
    if (GetArena() == nullptr) {
      delete body_.ue_stats_request_;
    }
    clear_has_body();
  }
}
flex_stats_request::flex_stats_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_stats_request)
}
flex_stats_request::flex_stats_request(const flex_stats_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  type_ = from.type_;
  clear_has_body();
  switch (from.body_case()) {
    case kCompleteStatsRequest: {
      _internal_mutable_complete_stats_request()->::protocol::flex_complete_stats_request::MergeFrom(from._internal_complete_stats_request());
      break;
    }
    case kCellStatsRequest: {
      _internal_mutable_cell_stats_request()->::protocol::flex_cell_stats_request::MergeFrom(from._internal_cell_stats_request());
      break;
    }
    case kUeStatsRequest: {
      _internal_mutable_ue_stats_request()->::protocol::flex_ue_stats_request::MergeFrom(from._internal_ue_stats_request());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_stats_request)
}

void flex_stats_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_stats_request_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
  clear_has_body();
}

flex_stats_request::~flex_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_stats_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_stats_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_body()) {
    clear_body();
  }
}

void flex_stats_request::ArenaDtor(void* object) {
  flex_stats_request* _this = reinterpret_cast< flex_stats_request* >(object);
  (void)_this;
}
void flex_stats_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_stats_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_stats_request& flex_stats_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_stats_request_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_stats_request::clear_body() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flex_stats_request)
  switch (body_case()) {
    case kCompleteStatsRequest: {
      if (GetArena() == nullptr) {
        delete body_.complete_stats_request_;
      }
      break;
    }
    case kCellStatsRequest: {
      if (GetArena() == nullptr) {
        delete body_.cell_stats_request_;
      }
      break;
    }
    case kUeStatsRequest: {
      if (GetArena() == nullptr) {
        delete body_.ue_stats_request_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void flex_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  type_ = 0;
  clear_body();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_stats_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_stats_type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protocol::flex_stats_type_IsValid(val))) {
            _internal_set_type(static_cast<::protocol::flex_stats_type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // .protocol.flex_complete_stats_request complete_stats_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_complete_stats_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_cell_stats_request cell_stats_request = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_stats_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_ue_stats_request ue_stats_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ue_stats_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_stats_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional .protocol.flex_stats_type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  switch (body_case()) {
    case kCompleteStatsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          3, _Internal::complete_stats_request(this), target, stream);
      break;
    }
    case kCellStatsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::cell_stats_request(this), target, stream);
      break;
    }
    case kUeStatsRequest: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::ue_stats_request(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_stats_request)
  return target;
}

size_t flex_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_stats_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .protocol.flex_stats_type type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (body_case()) {
    // .protocol.flex_complete_stats_request complete_stats_request = 3;
    case kCompleteStatsRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.complete_stats_request_);
      break;
    }
    // .protocol.flex_cell_stats_request cell_stats_request = 4;
    case kCellStatsRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.cell_stats_request_);
      break;
    }
    // .protocol.flex_ue_stats_request ue_stats_request = 5;
    case kUeStatsRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *body_.ue_stats_request_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_stats_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_stats_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_stats_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_stats_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_stats_request)
    MergeFrom(*source);
  }
}

void flex_stats_request::MergeFrom(const flex_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.body_case()) {
    case kCompleteStatsRequest: {
      _internal_mutable_complete_stats_request()->::protocol::flex_complete_stats_request::MergeFrom(from._internal_complete_stats_request());
      break;
    }
    case kCellStatsRequest: {
      _internal_mutable_cell_stats_request()->::protocol::flex_cell_stats_request::MergeFrom(from._internal_cell_stats_request());
      break;
    }
    case kUeStatsRequest: {
      _internal_mutable_ue_stats_request()->::protocol::flex_ue_stats_request::MergeFrom(from._internal_ue_stats_request());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
}

void flex_stats_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_stats_request::CopyFrom(const flex_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_stats_request::IsInitialized() const {
  return true;
}

void flex_stats_request::InternalSwap(flex_stats_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_stats_request, type_)
      + sizeof(flex_stats_request::type_)
      - PROTOBUF_FIELD_OFFSET(flex_stats_request, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
  swap(body_, other->body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_stats_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_stats_reply::InitAsDefaultInstance() {
  ::protocol::_flex_stats_reply_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_stats_reply::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_stats_reply>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_stats_reply* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_stats_reply::_Internal::header(const flex_stats_reply* msg) {
  return *msg->header_;
}
void flex_stats_reply::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_stats_reply::clear_ue_report() {
  ue_report_.Clear();
}
void flex_stats_reply::clear_cell_report() {
  cell_report_.Clear();
}
flex_stats_reply::flex_stats_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ue_report_(arena),
  cell_report_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_stats_reply)
}
flex_stats_reply::flex_stats_reply(const flex_stats_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ue_report_(from.ue_report_),
      cell_report_(from.cell_report_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_stats_reply)
}

void flex_stats_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_stats_reply_flexran_2eproto.base);
  header_ = nullptr;
}

flex_stats_reply::~flex_stats_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_stats_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_stats_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_stats_reply::ArenaDtor(void* object) {
  flex_stats_reply* _this = reinterpret_cast< flex_stats_reply* >(object);
  (void)_this;
}
void flex_stats_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_stats_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_stats_reply& flex_stats_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_stats_reply_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_stats_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_stats_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_report_.Clear();
  cell_report_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_stats_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_ue_stats_report ue_report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ue_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_cell_stats_report cell_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_stats_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_stats_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .protocol.flex_ue_stats_report ue_report = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ue_report_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ue_report(i), target, stream);
  }

  // repeated .protocol.flex_cell_stats_report cell_report = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_report_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cell_report(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_stats_reply)
  return target;
}

size_t flex_stats_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_stats_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_ue_stats_report ue_report = 2;
  total_size += 1UL * this->_internal_ue_report_size();
  for (const auto& msg : this->ue_report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_cell_stats_report cell_report = 3;
  total_size += 1UL * this->_internal_cell_report_size();
  for (const auto& msg : this->cell_report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_stats_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_stats_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_stats_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_stats_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_stats_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_stats_reply)
    MergeFrom(*source);
  }
}

void flex_stats_reply::MergeFrom(const flex_stats_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_stats_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ue_report_.MergeFrom(from.ue_report_);
  cell_report_.MergeFrom(from.cell_report_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_stats_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_stats_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_stats_reply::CopyFrom(const flex_stats_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_stats_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_stats_reply::IsInitialized() const {
  return true;
}

void flex_stats_reply::InternalSwap(flex_stats_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ue_report_.InternalSwap(&other->ue_report_);
  cell_report_.InternalSwap(&other->cell_report_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_stats_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_sf_trigger::InitAsDefaultInstance() {
  ::protocol::_flex_sf_trigger_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_sf_trigger::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_sf_trigger>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_sf_trigger* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sfn_sf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_sf_trigger::_Internal::header(const flex_sf_trigger* msg) {
  return *msg->header_;
}
void flex_sf_trigger::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_sf_trigger::clear_dl_info() {
  dl_info_.Clear();
}
void flex_sf_trigger::clear_ul_info() {
  ul_info_.Clear();
}
flex_sf_trigger::flex_sf_trigger(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dl_info_(arena),
  ul_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_sf_trigger)
}
flex_sf_trigger::flex_sf_trigger(const flex_sf_trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dl_info_(from.dl_info_),
      ul_info_(from.ul_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_sf_trigger)
}

void flex_sf_trigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_sf_trigger_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sfn_sf_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sfn_sf_));
}

flex_sf_trigger::~flex_sf_trigger() {
  // @@protoc_insertion_point(destructor:protocol.flex_sf_trigger)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_sf_trigger::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_sf_trigger::ArenaDtor(void* object) {
  flex_sf_trigger* _this = reinterpret_cast< flex_sf_trigger* >(object);
  (void)_this;
}
void flex_sf_trigger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_sf_trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_sf_trigger& flex_sf_trigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_sf_trigger_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_sf_trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_sf_trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dl_info_.Clear();
  ul_info_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_sf_trigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sfn_sf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sfn_sf(&has_bits);
          sfn_sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_dl_info dl_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dl_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_ul_info ul_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ul_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_sf_trigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_sf_trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sfn_sf(), target);
  }

  // repeated .protocol.flex_dl_info dl_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dl_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dl_info(i), target, stream);
  }

  // repeated .protocol.flex_ul_info ul_info = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ul_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_ul_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_sf_trigger)
  return target;
}

size_t flex_sf_trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_sf_trigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_dl_info dl_info = 3;
  total_size += 1UL * this->_internal_dl_info_size();
  for (const auto& msg : this->dl_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_ul_info ul_info = 4;
  total_size += 1UL * this->_internal_ul_info_size();
  for (const auto& msg : this->ul_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 sfn_sf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sfn_sf());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_sf_trigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_sf_trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_sf_trigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_sf_trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_sf_trigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_sf_trigger)
    MergeFrom(*source);
  }
}

void flex_sf_trigger::MergeFrom(const flex_sf_trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_sf_trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dl_info_.MergeFrom(from.dl_info_);
  ul_info_.MergeFrom(from.ul_info_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_sf_trigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_sf_trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_sf_trigger::CopyFrom(const flex_sf_trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_sf_trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_sf_trigger::IsInitialized() const {
  return true;
}

void flex_sf_trigger::InternalSwap(flex_sf_trigger* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dl_info_.InternalSwap(&other->dl_info_);
  ul_info_.InternalSwap(&other->ul_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_sf_trigger, sfn_sf_)
      + sizeof(flex_sf_trigger::sfn_sf_)
      - PROTOBUF_FIELD_OFFSET(flex_sf_trigger, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_sf_trigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ul_sr_info::InitAsDefaultInstance() {
  ::protocol::_flex_ul_sr_info_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_ul_sr_info::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ul_sr_info>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_ul_sr_info* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sfn_sf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_ul_sr_info::_Internal::header(const flex_ul_sr_info* msg) {
  return *msg->header_;
}
void flex_ul_sr_info::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_ul_sr_info::flex_ul_sr_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rnti_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ul_sr_info)
}
flex_ul_sr_info::flex_ul_sr_info(const flex_ul_sr_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rnti_(from.rnti_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_sr_info)
}

void flex_ul_sr_info::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ul_sr_info_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sfn_sf_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sfn_sf_));
}

flex_ul_sr_info::~flex_ul_sr_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_sr_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ul_sr_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_ul_sr_info::ArenaDtor(void* object) {
  flex_ul_sr_info* _this = reinterpret_cast< flex_ul_sr_info* >(object);
  (void)_this;
}
void flex_ul_sr_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ul_sr_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ul_sr_info& flex_ul_sr_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ul_sr_info_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_ul_sr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_sr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rnti_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ul_sr_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sfn_sf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sfn_sf(&has_bits);
          sfn_sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rnti = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rnti(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rnti(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ul_sr_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_sr_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sfn_sf(), target);
  }

  // repeated uint32 rnti = 3;
  for (int i = 0, n = this->_internal_rnti_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rnti(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_sr_info)
  return target;
}

size_t flex_ul_sr_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_sr_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 rnti = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rnti_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rnti_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 sfn_sf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sfn_sf());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ul_sr_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_sr_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_sr_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ul_sr_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_sr_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_sr_info)
    MergeFrom(*source);
  }
}

void flex_ul_sr_info::MergeFrom(const flex_ul_sr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_sr_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rnti_.MergeFrom(from.rnti_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_sr_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_sr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_sr_info::CopyFrom(const flex_ul_sr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_sr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_sr_info::IsInitialized() const {
  return true;
}

void flex_ul_sr_info::InternalSwap(flex_ul_sr_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rnti_.InternalSwap(&other->rnti_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ul_sr_info, sfn_sf_)
      + sizeof(flex_ul_sr_info::sfn_sf_)
      - PROTOBUF_FIELD_OFFSET(flex_ul_sr_info, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ul_sr_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_enb_config_request::InitAsDefaultInstance() {
  ::protocol::_flex_enb_config_request_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_enb_config_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_enb_config_request>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_enb_config_request* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_enb_config_request::_Internal::header(const flex_enb_config_request* msg) {
  return *msg->header_;
}
void flex_enb_config_request::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_enb_config_request::flex_enb_config_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_enb_config_request)
}
flex_enb_config_request::flex_enb_config_request(const flex_enb_config_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_enb_config_request)
}

void flex_enb_config_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_enb_config_request_flexran_2eproto.base);
  header_ = nullptr;
}

flex_enb_config_request::~flex_enb_config_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_enb_config_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_enb_config_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_enb_config_request::ArenaDtor(void* object) {
  flex_enb_config_request* _this = reinterpret_cast< flex_enb_config_request* >(object);
  (void)_this;
}
void flex_enb_config_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_enb_config_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_enb_config_request& flex_enb_config_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_enb_config_request_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_enb_config_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_enb_config_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_enb_config_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_enb_config_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_enb_config_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_enb_config_request)
  return target;
}

size_t flex_enb_config_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_enb_config_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_enb_config_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_enb_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_enb_config_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_enb_config_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_enb_config_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_enb_config_request)
    MergeFrom(*source);
  }
}

void flex_enb_config_request::MergeFrom(const flex_enb_config_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_enb_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_enb_config_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_enb_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_enb_config_request::CopyFrom(const flex_enb_config_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_enb_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_enb_config_request::IsInitialized() const {
  return true;
}

void flex_enb_config_request::InternalSwap(flex_enb_config_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_enb_config_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_enb_config_reply::InitAsDefaultInstance() {
  ::protocol::_flex_enb_config_reply_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  ::protocol::_flex_enb_config_reply_default_instance_._instance.get_mutable()->s1ap_ = const_cast< ::protocol::flex_s1ap_config*>(
      ::protocol::flex_s1ap_config::internal_default_instance());
}
class flex_enb_config_reply::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_enb_config_reply>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_enb_config_reply* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enb_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_device_spec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protocol::flex_s1ap_config& s1ap(const flex_enb_config_reply* msg);
  static void set_has_s1ap(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_enb_config_reply::_Internal::header(const flex_enb_config_reply* msg) {
  return *msg->header_;
}
const ::protocol::flex_s1ap_config&
flex_enb_config_reply::_Internal::s1ap(const flex_enb_config_reply* msg) {
  return *msg->s1ap_;
}
void flex_enb_config_reply::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_enb_config_reply::clear_cell_config() {
  cell_config_.Clear();
}
void flex_enb_config_reply::clear_s1ap() {
  if (s1ap_ != nullptr) s1ap_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
flex_enb_config_reply::flex_enb_config_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_enb_config_reply)
}
flex_enb_config_reply::flex_enb_config_reply(const flex_enb_config_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_config_(from.cell_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_s1ap()) {
    s1ap_ = new ::protocol::flex_s1ap_config(*from.s1ap_);
  } else {
    s1ap_ = nullptr;
  }
  ::memcpy(&enb_id_, &from.enb_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_spec_) -
    reinterpret_cast<char*>(&enb_id_)) + sizeof(device_spec_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_enb_config_reply)
}

void flex_enb_config_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_enb_config_reply_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_spec_) -
      reinterpret_cast<char*>(&header_)) + sizeof(device_spec_));
}

flex_enb_config_reply::~flex_enb_config_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_enb_config_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_enb_config_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete s1ap_;
}

void flex_enb_config_reply::ArenaDtor(void* object) {
  flex_enb_config_reply* _this = reinterpret_cast< flex_enb_config_reply* >(object);
  (void)_this;
}
void flex_enb_config_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_enb_config_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_enb_config_reply& flex_enb_config_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_enb_config_reply_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_enb_config_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_enb_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(s1ap_ != nullptr);
      s1ap_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&enb_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&device_spec_) -
        reinterpret_cast<char*>(&enb_id_)) + sizeof(device_spec_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_enb_config_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 eNB_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enb_id(&has_bits);
          enb_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_cell_config cell_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cell_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 device_spec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_device_spec(&has_bits);
          device_spec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_s1ap_config s1ap = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_s1ap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_enb_config_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_enb_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint64 eNB_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_enb_id(), target);
  }

  // repeated .protocol.flex_cell_config cell_config = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cell_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_cell_config(i), target, stream);
  }

  // optional uint32 device_spec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_device_spec(), target);
  }

  // optional .protocol.flex_s1ap_config s1ap = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::s1ap(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_enb_config_reply)
  return target;
}

size_t flex_enb_config_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_enb_config_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_cell_config cell_config = 3;
  total_size += 1UL * this->_internal_cell_config_size();
  for (const auto& msg : this->cell_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .protocol.flex_s1ap_config s1ap = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *s1ap_);
    }

    // optional uint64 eNB_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_enb_id());
    }

    // optional uint32 device_spec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_device_spec());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_enb_config_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_enb_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_enb_config_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_enb_config_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_enb_config_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_enb_config_reply)
    MergeFrom(*source);
  }
}

void flex_enb_config_reply::MergeFrom(const flex_enb_config_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_enb_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_config_.MergeFrom(from.cell_config_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_s1ap()->::protocol::flex_s1ap_config::MergeFrom(from._internal_s1ap());
    }
    if (cached_has_bits & 0x00000004u) {
      enb_id_ = from.enb_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      device_spec_ = from.device_spec_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_enb_config_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_enb_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_enb_config_reply::CopyFrom(const flex_enb_config_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_enb_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_enb_config_reply::IsInitialized() const {
  return true;
}

void flex_enb_config_reply::InternalSwap(flex_enb_config_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_config_.InternalSwap(&other->cell_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_enb_config_reply, device_spec_)
      + sizeof(flex_enb_config_reply::device_spec_)
      - PROTOBUF_FIELD_OFFSET(flex_enb_config_reply, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_enb_config_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ue_config_request::InitAsDefaultInstance() {
  ::protocol::_flex_ue_config_request_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_ue_config_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ue_config_request>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_ue_config_request* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_ue_config_request::_Internal::header(const flex_ue_config_request* msg) {
  return *msg->header_;
}
void flex_ue_config_request::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_ue_config_request::flex_ue_config_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ue_config_request)
}
flex_ue_config_request::flex_ue_config_request(const flex_ue_config_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_config_request)
}

void flex_ue_config_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ue_config_request_flexran_2eproto.base);
  header_ = nullptr;
}

flex_ue_config_request::~flex_ue_config_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_config_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ue_config_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_ue_config_request::ArenaDtor(void* object) {
  flex_ue_config_request* _this = reinterpret_cast< flex_ue_config_request* >(object);
  (void)_this;
}
void flex_ue_config_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ue_config_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ue_config_request& flex_ue_config_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ue_config_request_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_ue_config_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_config_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ue_config_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ue_config_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_config_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_config_request)
  return target;
}

size_t flex_ue_config_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_config_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ue_config_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_config_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ue_config_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_config_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_config_request)
    MergeFrom(*source);
  }
}

void flex_ue_config_request::MergeFrom(const flex_ue_config_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_ue_config_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_config_request::CopyFrom(const flex_ue_config_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_config_request::IsInitialized() const {
  return true;
}

void flex_ue_config_request::InternalSwap(flex_ue_config_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ue_config_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ue_config_reply::InitAsDefaultInstance() {
  ::protocol::_flex_ue_config_reply_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_ue_config_reply::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ue_config_reply>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_ue_config_reply* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_ue_config_reply::_Internal::header(const flex_ue_config_reply* msg) {
  return *msg->header_;
}
void flex_ue_config_reply::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_config_reply::clear_ue_config() {
  ue_config_.Clear();
}
flex_ue_config_reply::flex_ue_config_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ue_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ue_config_reply)
}
flex_ue_config_reply::flex_ue_config_reply(const flex_ue_config_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ue_config_(from.ue_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_config_reply)
}

void flex_ue_config_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ue_config_reply_flexran_2eproto.base);
  header_ = nullptr;
}

flex_ue_config_reply::~flex_ue_config_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_config_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ue_config_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_ue_config_reply::ArenaDtor(void* object) {
  flex_ue_config_reply* _this = reinterpret_cast< flex_ue_config_reply* >(object);
  (void)_this;
}
void flex_ue_config_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ue_config_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ue_config_reply& flex_ue_config_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ue_config_reply_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_ue_config_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ue_config_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_ue_config ue_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ue_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ue_config_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .protocol.flex_ue_config ue_config = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ue_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ue_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_config_reply)
  return target;
}

size_t flex_ue_config_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_config_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_ue_config ue_config = 2;
  total_size += 1UL * this->_internal_ue_config_size();
  for (const auto& msg : this->ue_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ue_config_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_config_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ue_config_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_config_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_config_reply)
    MergeFrom(*source);
  }
}

void flex_ue_config_reply::MergeFrom(const flex_ue_config_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ue_config_.MergeFrom(from.ue_config_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_ue_config_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_config_reply::CopyFrom(const flex_ue_config_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_config_reply::IsInitialized() const {
  return true;
}

void flex_ue_config_reply::InternalSwap(flex_ue_config_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ue_config_.InternalSwap(&other->ue_config_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ue_config_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_lc_config_request::InitAsDefaultInstance() {
  ::protocol::_flex_lc_config_request_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_lc_config_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_lc_config_request>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_lc_config_request* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_lc_config_request::_Internal::header(const flex_lc_config_request* msg) {
  return *msg->header_;
}
void flex_lc_config_request::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_lc_config_request::flex_lc_config_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_lc_config_request)
}
flex_lc_config_request::flex_lc_config_request(const flex_lc_config_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_config_request)
}

void flex_lc_config_request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_lc_config_request_flexran_2eproto.base);
  header_ = nullptr;
}

flex_lc_config_request::~flex_lc_config_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_config_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_lc_config_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_lc_config_request::ArenaDtor(void* object) {
  flex_lc_config_request* _this = reinterpret_cast< flex_lc_config_request* >(object);
  (void)_this;
}
void flex_lc_config_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_lc_config_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_lc_config_request& flex_lc_config_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_lc_config_request_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_lc_config_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_config_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_lc_config_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_lc_config_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_config_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_config_request)
  return target;
}

size_t flex_lc_config_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_config_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_lc_config_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_config_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_lc_config_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_config_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_config_request)
    MergeFrom(*source);
  }
}

void flex_lc_config_request::MergeFrom(const flex_lc_config_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_config_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_lc_config_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_config_request::CopyFrom(const flex_lc_config_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_config_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_config_request::IsInitialized() const {
  return true;
}

void flex_lc_config_request::InternalSwap(flex_lc_config_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_lc_config_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_lc_config_reply::InitAsDefaultInstance() {
  ::protocol::_flex_lc_config_reply_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_lc_config_reply::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_lc_config_reply>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_lc_config_reply* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_lc_config_reply::_Internal::header(const flex_lc_config_reply* msg) {
  return *msg->header_;
}
void flex_lc_config_reply::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_lc_config_reply::clear_lc_ue_config() {
  lc_ue_config_.Clear();
}
flex_lc_config_reply::flex_lc_config_reply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  lc_ue_config_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_lc_config_reply)
}
flex_lc_config_reply::flex_lc_config_reply(const flex_lc_config_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      lc_ue_config_(from.lc_ue_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_lc_config_reply)
}

void flex_lc_config_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_lc_config_reply_flexran_2eproto.base);
  header_ = nullptr;
}

flex_lc_config_reply::~flex_lc_config_reply() {
  // @@protoc_insertion_point(destructor:protocol.flex_lc_config_reply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_lc_config_reply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_lc_config_reply::ArenaDtor(void* object) {
  flex_lc_config_reply* _this = reinterpret_cast< flex_lc_config_reply* >(object);
  (void)_this;
}
void flex_lc_config_reply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_lc_config_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_lc_config_reply& flex_lc_config_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_lc_config_reply_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_lc_config_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_lc_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lc_ue_config_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_lc_config_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lc_ue_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_lc_config_reply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_lc_config_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lc_ue_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lc_ue_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_lc_config_reply)
  return target;
}

size_t flex_lc_config_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_lc_config_reply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_lc_ue_config lc_ue_config = 2;
  total_size += 1UL * this->_internal_lc_ue_config_size();
  for (const auto& msg : this->lc_ue_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_lc_config_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_lc_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_lc_config_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_lc_config_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_lc_config_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_lc_config_reply)
    MergeFrom(*source);
  }
}

void flex_lc_config_reply::MergeFrom(const flex_lc_config_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_lc_config_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lc_ue_config_.MergeFrom(from.lc_ue_config_);
  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_lc_config_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_lc_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_lc_config_reply::CopyFrom(const flex_lc_config_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_lc_config_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_lc_config_reply::IsInitialized() const {
  return true;
}

void flex_lc_config_reply::InternalSwap(flex_lc_config_reply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lc_ue_config_.InternalSwap(&other->lc_ue_config_);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_lc_config_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_dl_mac_config::InitAsDefaultInstance() {
  ::protocol::_flex_dl_mac_config_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_dl_mac_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_mac_config>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_dl_mac_config* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sfn_sf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_dl_mac_config::_Internal::header(const flex_dl_mac_config* msg) {
  return *msg->header_;
}
void flex_dl_mac_config::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_dl_mac_config::clear_dl_ue_data() {
  dl_ue_data_.Clear();
}
void flex_dl_mac_config::clear_dl_rar() {
  dl_rar_.Clear();
}
void flex_dl_mac_config::clear_dl_broadcast() {
  dl_broadcast_.Clear();
}
void flex_dl_mac_config::clear_ofdm_sym() {
  ofdm_sym_.Clear();
}
flex_dl_mac_config::flex_dl_mac_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dl_ue_data_(arena),
  dl_rar_(arena),
  dl_broadcast_(arena),
  ofdm_sym_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_mac_config)
}
flex_dl_mac_config::flex_dl_mac_config(const flex_dl_mac_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dl_ue_data_(from.dl_ue_data_),
      dl_rar_(from.dl_rar_),
      dl_broadcast_(from.dl_broadcast_),
      ofdm_sym_(from.ofdm_sym_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_mac_config)
}

void flex_dl_mac_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_dl_mac_config_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sfn_sf_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sfn_sf_));
}

flex_dl_mac_config::~flex_dl_mac_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_mac_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_mac_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_dl_mac_config::ArenaDtor(void* object) {
  flex_dl_mac_config* _this = reinterpret_cast< flex_dl_mac_config* >(object);
  (void)_this;
}
void flex_dl_mac_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_mac_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_mac_config& flex_dl_mac_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_mac_config_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_mac_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_mac_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dl_ue_data_.Clear();
  dl_rar_.Clear();
  dl_broadcast_.Clear();
  ofdm_sym_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_mac_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sfn_sf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sfn_sf(&has_bits);
          sfn_sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_dl_data dl_ue_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dl_ue_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_dl_rar dl_rar = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dl_rar(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dl_broadcast(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ofdm_sym(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_mac_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_mac_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sfn_sf(), target);
  }

  // repeated .protocol.flex_dl_data dl_ue_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dl_ue_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dl_ue_data(i), target, stream);
  }

  // repeated .protocol.flex_dl_rar dl_rar = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dl_rar_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_dl_rar(i), target, stream);
  }

  // repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dl_broadcast_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_dl_broadcast(i), target, stream);
  }

  // repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ofdm_sym_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_ofdm_sym(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_mac_config)
  return target;
}

size_t flex_dl_mac_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_mac_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_dl_data dl_ue_data = 3;
  total_size += 1UL * this->_internal_dl_ue_data_size();
  for (const auto& msg : this->dl_ue_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_dl_rar dl_rar = 4;
  total_size += 1UL * this->_internal_dl_rar_size();
  for (const auto& msg : this->dl_rar_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_dl_broadcast dl_broadcast = 5;
  total_size += 1UL * this->_internal_dl_broadcast_size();
  for (const auto& msg : this->dl_broadcast_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_pdcch_ofdm_sym_count ofdm_sym = 6;
  total_size += 1UL * this->_internal_ofdm_sym_size();
  for (const auto& msg : this->ofdm_sym_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 sfn_sf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sfn_sf());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_mac_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_mac_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_mac_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_mac_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_mac_config)
    MergeFrom(*source);
  }
}

void flex_dl_mac_config::MergeFrom(const flex_dl_mac_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dl_ue_data_.MergeFrom(from.dl_ue_data_);
  dl_rar_.MergeFrom(from.dl_rar_);
  dl_broadcast_.MergeFrom(from.dl_broadcast_);
  ofdm_sym_.MergeFrom(from.ofdm_sym_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_mac_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_mac_config::CopyFrom(const flex_dl_mac_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_mac_config::IsInitialized() const {
  return true;
}

void flex_dl_mac_config::InternalSwap(flex_dl_mac_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dl_ue_data_.InternalSwap(&other->dl_ue_data_);
  dl_rar_.InternalSwap(&other->dl_rar_);
  dl_broadcast_.InternalSwap(&other->dl_broadcast_);
  ofdm_sym_.InternalSwap(&other->ofdm_sym_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_dl_mac_config, sfn_sf_)
      + sizeof(flex_dl_mac_config::sfn_sf_)
      - PROTOBUF_FIELD_OFFSET(flex_dl_mac_config, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_mac_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ul_mac_config::InitAsDefaultInstance() {
  ::protocol::_flex_ul_mac_config_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_ul_mac_config::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ul_mac_config>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_ul_mac_config* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sfn_sf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_ul_mac_config::_Internal::header(const flex_ul_mac_config* msg) {
  return *msg->header_;
}
void flex_ul_mac_config::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ul_mac_config::clear_ul_ue_data() {
  ul_ue_data_.Clear();
}
flex_ul_mac_config::flex_ul_mac_config(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ul_ue_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ul_mac_config)
}
flex_ul_mac_config::flex_ul_mac_config(const flex_ul_mac_config& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ul_ue_data_(from.ul_ue_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  sfn_sf_ = from.sfn_sf_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_mac_config)
}

void flex_ul_mac_config::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ul_mac_config_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sfn_sf_) -
      reinterpret_cast<char*>(&header_)) + sizeof(sfn_sf_));
}

flex_ul_mac_config::~flex_ul_mac_config() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_mac_config)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ul_mac_config::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_ul_mac_config::ArenaDtor(void* object) {
  flex_ul_mac_config* _this = reinterpret_cast< flex_ul_mac_config* >(object);
  (void)_this;
}
void flex_ul_mac_config::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ul_mac_config::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ul_mac_config& flex_ul_mac_config::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ul_mac_config_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_ul_mac_config::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_mac_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ul_ue_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  sfn_sf_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ul_mac_config::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sfn_sf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sfn_sf(&has_bits);
          sfn_sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_ul_data ul_ue_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ul_ue_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ul_mac_config::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_mac_config)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 sfn_sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sfn_sf(), target);
  }

  // repeated .protocol.flex_ul_data ul_ue_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ul_ue_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ul_ue_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_mac_config)
  return target;
}

size_t flex_ul_mac_config::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_mac_config)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_ul_data ul_ue_data = 3;
  total_size += 1UL * this->_internal_ul_ue_data_size();
  for (const auto& msg : this->ul_ue_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 sfn_sf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sfn_sf());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ul_mac_config::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_mac_config* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ul_mac_config>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_mac_config)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_mac_config)
    MergeFrom(*source);
  }
}

void flex_ul_mac_config::MergeFrom(const flex_ul_mac_config& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_mac_config)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ul_ue_data_.MergeFrom(from.ul_ue_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      sfn_sf_ = from.sfn_sf_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_mac_config::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_mac_config::CopyFrom(const flex_ul_mac_config& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_mac_config)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_mac_config::IsInitialized() const {
  return true;
}

void flex_ul_mac_config::InternalSwap(flex_ul_mac_config* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ul_ue_data_.InternalSwap(&other->ul_ue_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ul_mac_config, sfn_sf_)
      + sizeof(flex_ul_mac_config::sfn_sf_)
      - PROTOBUF_FIELD_OFFSET(flex_ul_mac_config, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ul_mac_config::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_rrc_triggering::InitAsDefaultInstance() {
  ::protocol::_flex_rrc_triggering_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  ::protocol::_flex_rrc_triggering_default_instance_._instance.get_mutable()->meas_info_ = const_cast< ::protocol::flex_measurement_info*>(
      ::protocol::flex_measurement_info::internal_default_instance());
}
class flex_rrc_triggering::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_rrc_triggering>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_rrc_triggering* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rrc_trigger(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protocol::flex_measurement_info& meas_info(const flex_rrc_triggering* msg);
  static void set_has_meas_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protocol::flex_header&
flex_rrc_triggering::_Internal::header(const flex_rrc_triggering* msg) {
  return *msg->header_;
}
const ::protocol::flex_measurement_info&
flex_rrc_triggering::_Internal::meas_info(const flex_rrc_triggering* msg) {
  return *msg->meas_info_;
}
void flex_rrc_triggering::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void flex_rrc_triggering::clear_meas_info() {
  if (meas_info_ != nullptr) meas_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
flex_rrc_triggering::flex_rrc_triggering(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_rrc_triggering)
}
flex_rrc_triggering::flex_rrc_triggering(const flex_rrc_triggering& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rrc_trigger_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rrc_trigger()) {
    rrc_trigger_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_rrc_trigger(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_meas_info()) {
    meas_info_ = new ::protocol::flex_measurement_info(*from.meas_info_);
  } else {
    meas_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rrc_triggering)
}

void flex_rrc_triggering::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_rrc_triggering_flexran_2eproto.base);
  rrc_trigger_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&meas_info_) -
      reinterpret_cast<char*>(&header_)) + sizeof(meas_info_));
}

flex_rrc_triggering::~flex_rrc_triggering() {
  // @@protoc_insertion_point(destructor:protocol.flex_rrc_triggering)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_rrc_triggering::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rrc_trigger_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete meas_info_;
}

void flex_rrc_triggering::ArenaDtor(void* object) {
  flex_rrc_triggering* _this = reinterpret_cast< flex_rrc_triggering* >(object);
  (void)_this;
}
void flex_rrc_triggering::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_rrc_triggering::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_rrc_triggering& flex_rrc_triggering::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_rrc_triggering_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_rrc_triggering::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rrc_triggering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      rrc_trigger_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(meas_info_ != nullptr);
      meas_info_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_rrc_triggering::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rrc_trigger = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rrc_trigger();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_rrc_triggering.rrc_trigger");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_measurement_info meas_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_meas_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_rrc_triggering::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rrc_triggering)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string rrc_trigger = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rrc_trigger().data(), static_cast<int>(this->_internal_rrc_trigger().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_rrc_triggering.rrc_trigger");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rrc_trigger(), target);
  }

  // optional .protocol.flex_measurement_info meas_info = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::meas_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rrc_triggering)
  return target;
}

size_t flex_rrc_triggering::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rrc_triggering)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string rrc_trigger = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rrc_trigger());
    }

    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .protocol.flex_measurement_info meas_info = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meas_info_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_rrc_triggering::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rrc_triggering)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rrc_triggering* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_rrc_triggering>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rrc_triggering)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rrc_triggering)
    MergeFrom(*source);
  }
}

void flex_rrc_triggering::MergeFrom(const flex_rrc_triggering& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rrc_triggering)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_rrc_trigger(from._internal_rrc_trigger());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_meas_info()->::protocol::flex_measurement_info::MergeFrom(from._internal_meas_info());
    }
  }
}

void flex_rrc_triggering::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rrc_triggering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rrc_triggering::CopyFrom(const flex_rrc_triggering& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rrc_triggering)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rrc_triggering::IsInitialized() const {
  return true;
}

void flex_rrc_triggering::InternalSwap(flex_rrc_triggering* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rrc_trigger_.Swap(&other->rrc_trigger_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_rrc_triggering, meas_info_)
      + sizeof(flex_rrc_triggering::meas_info_)
      - PROTOBUF_FIELD_OFFSET(flex_rrc_triggering, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_rrc_triggering::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ho_command::InitAsDefaultInstance() {
  ::protocol::_flex_ho_command_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_ho_command::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ho_command>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_ho_command* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_target_phy_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::protocol::flex_header&
flex_ho_command::_Internal::header(const flex_ho_command* msg) {
  return *msg->header_;
}
void flex_ho_command::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_ho_command::flex_ho_command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ho_command)
}
flex_ho_command::flex_ho_command(const flex_ho_command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&target_phy_cell_id_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(target_phy_cell_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ho_command)
}

void flex_ho_command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ho_command_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_phy_cell_id_) -
      reinterpret_cast<char*>(&header_)) + sizeof(target_phy_cell_id_));
}

flex_ho_command::~flex_ho_command() {
  // @@protoc_insertion_point(destructor:protocol.flex_ho_command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ho_command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_ho_command::ArenaDtor(void* object) {
  flex_ho_command* _this = reinterpret_cast< flex_ho_command* >(object);
  (void)_this;
}
void flex_ho_command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ho_command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ho_command& flex_ho_command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ho_command_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_ho_command::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ho_command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&target_phy_cell_id_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(target_phy_cell_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ho_command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rnti = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 target_phy_cell_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_target_phy_cell_id(&has_bits);
          target_phy_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ho_command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ho_command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 rnti = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rnti(), target);
  }

  // optional uint32 target_phy_cell_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_target_phy_cell_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ho_command)
  return target;
}

size_t flex_ho_command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ho_command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 rnti = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 target_phy_cell_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_target_phy_cell_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ho_command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ho_command)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ho_command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ho_command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ho_command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ho_command)
    MergeFrom(*source);
  }
}

void flex_ho_command::MergeFrom(const flex_ho_command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ho_command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_phy_cell_id_ = from.target_phy_cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ho_command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ho_command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ho_command::CopyFrom(const flex_ho_command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ho_command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ho_command::IsInitialized() const {
  return true;
}

void flex_ho_command::InternalSwap(flex_ho_command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ho_command, target_phy_cell_id_)
      + sizeof(flex_ho_command::target_phy_cell_id_)
      - PROTOBUF_FIELD_OFFSET(flex_ho_command, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ho_command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ue_state_change::InitAsDefaultInstance() {
  ::protocol::_flex_ue_state_change_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
  ::protocol::_flex_ue_state_change_default_instance_._instance.get_mutable()->config_ = const_cast< ::protocol::flex_ue_config*>(
      ::protocol::flex_ue_config::internal_default_instance());
}
class flex_ue_state_change::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ue_state_change>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_ue_state_change* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_ue_config& config(const flex_ue_state_change* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_ue_state_change::_Internal::header(const flex_ue_state_change* msg) {
  return *msg->header_;
}
const ::protocol::flex_ue_config&
flex_ue_state_change::_Internal::config(const flex_ue_state_change* msg) {
  return *msg->config_;
}
void flex_ue_state_change::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_state_change::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
flex_ue_state_change::flex_ue_state_change(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ue_state_change)
}
flex_ue_state_change::flex_ue_state_change(const flex_ue_state_change& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::protocol::flex_ue_config(*from.config_);
  } else {
    config_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_state_change)
}

void flex_ue_state_change::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ue_state_change_flexran_2eproto.base);
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(type_));
}

flex_ue_state_change::~flex_ue_state_change() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_state_change)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ue_state_change::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete config_;
}

void flex_ue_state_change::ArenaDtor(void* object) {
  flex_ue_state_change* _this = reinterpret_cast< flex_ue_state_change* >(object);
  (void)_this;
}
void flex_ue_state_change::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ue_state_change::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ue_state_change& flex_ue_state_change::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ue_state_change_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_ue_state_change::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_state_change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ue_state_change::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_ue_config config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ue_state_change::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_state_change)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_type(), target);
  }

  // optional .protocol.flex_ue_config config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_state_change)
  return target;
}

size_t flex_ue_state_change::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_state_change)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .protocol.flex_ue_config config = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional uint32 type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ue_state_change::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_state_change)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_state_change* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ue_state_change>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_state_change)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_state_change)
    MergeFrom(*source);
  }
}

void flex_ue_state_change::MergeFrom(const flex_ue_state_change& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_state_change)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_config()->::protocol::flex_ue_config::MergeFrom(from._internal_config());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_state_change::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_state_change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_state_change::CopyFrom(const flex_ue_state_change& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_state_change)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_state_change::IsInitialized() const {
  return true;
}

void flex_ue_state_change::InternalSwap(flex_ue_state_change* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ue_state_change, type_)
      + sizeof(flex_ue_state_change::type_)
      - PROTOBUF_FIELD_OFFSET(flex_ue_state_change, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ue_state_change::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_control_delegation::InitAsDefaultInstance() {
  ::protocol::_flex_control_delegation_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_control_delegation::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_control_delegation>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_control_delegation* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_delegation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_header&
flex_control_delegation::_Internal::header(const flex_control_delegation* msg) {
  return *msg->header_;
}
void flex_control_delegation::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
flex_control_delegation::flex_control_delegation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_control_delegation)
}
flex_control_delegation::flex_control_delegation(const flex_control_delegation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_payload()) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_payload(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  delegation_type_ = from.delegation_type_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_control_delegation)
}

void flex_control_delegation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_control_delegation_flexran_2eproto.base);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delegation_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(delegation_type_));
}

flex_control_delegation::~flex_control_delegation() {
  // @@protoc_insertion_point(destructor:protocol.flex_control_delegation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_control_delegation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void flex_control_delegation::ArenaDtor(void* object) {
  flex_control_delegation* _this = reinterpret_cast< flex_control_delegation* >(object);
  (void)_this;
}
void flex_control_delegation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_control_delegation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_control_delegation& flex_control_delegation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_control_delegation_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_control_delegation::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_control_delegation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  delegation_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_control_delegation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 delegation_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delegation_type(&has_bits);
          delegation_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_control_delegation.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_control_delegation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_control_delegation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 delegation_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_delegation_type(), target);
  }

  // optional bytes payload = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // optional string name = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_control_delegation.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_control_delegation)
  return target;
}

size_t flex_control_delegation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_control_delegation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes payload = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_payload());
    }

    // optional string name = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint32 delegation_type = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_delegation_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_control_delegation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_control_delegation)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_control_delegation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_control_delegation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_control_delegation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_control_delegation)
    MergeFrom(*source);
  }
}

void flex_control_delegation::MergeFrom(const flex_control_delegation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_control_delegation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000008u) {
      delegation_type_ = from.delegation_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_control_delegation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_control_delegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_control_delegation::CopyFrom(const flex_control_delegation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_control_delegation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_control_delegation::IsInitialized() const {
  return true;
}

void flex_control_delegation::InternalSwap(flex_control_delegation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  payload_.Swap(&other->payload_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_control_delegation, delegation_type_)
      + sizeof(flex_control_delegation::delegation_type_)
      - PROTOBUF_FIELD_OFFSET(flex_control_delegation, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_control_delegation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_agent_reconfiguration::InitAsDefaultInstance() {
  ::protocol::_flex_agent_reconfiguration_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_agent_reconfiguration::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_agent_reconfiguration>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_agent_reconfiguration* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_policy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_agent_reconfiguration::_Internal::header(const flex_agent_reconfiguration* msg) {
  return *msg->header_;
}
void flex_agent_reconfiguration::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
flex_agent_reconfiguration::flex_agent_reconfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_agent_reconfiguration)
}
flex_agent_reconfiguration::flex_agent_reconfiguration(const flex_agent_reconfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_policy()) {
    policy_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_policy(),
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_agent_reconfiguration)
}

void flex_agent_reconfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_agent_reconfiguration_flexran_2eproto.base);
  policy_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  header_ = nullptr;
}

flex_agent_reconfiguration::~flex_agent_reconfiguration() {
  // @@protoc_insertion_point(destructor:protocol.flex_agent_reconfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_agent_reconfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  policy_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void flex_agent_reconfiguration::ArenaDtor(void* object) {
  flex_agent_reconfiguration* _this = reinterpret_cast< flex_agent_reconfiguration* >(object);
  (void)_this;
}
void flex_agent_reconfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_agent_reconfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_agent_reconfiguration& flex_agent_reconfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_agent_reconfiguration_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_agent_reconfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_agent_reconfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      policy_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_agent_reconfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string policy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_policy();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_agent_reconfiguration.policy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_agent_reconfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_agent_reconfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string policy = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_policy().data(), static_cast<int>(this->_internal_policy().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_agent_reconfiguration.policy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_agent_reconfiguration)
  return target;
}

size_t flex_agent_reconfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_agent_reconfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string policy = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_policy());
    }

    // optional .protocol.flex_header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_agent_reconfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_agent_reconfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_agent_reconfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_agent_reconfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_agent_reconfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_agent_reconfiguration)
    MergeFrom(*source);
  }
}

void flex_agent_reconfiguration::MergeFrom(const flex_agent_reconfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_agent_reconfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_policy(from._internal_policy());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
    }
  }
}

void flex_agent_reconfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_agent_reconfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_agent_reconfiguration::CopyFrom(const flex_agent_reconfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_agent_reconfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_agent_reconfiguration::IsInitialized() const {
  return true;
}

void flex_agent_reconfiguration::InternalSwap(flex_agent_reconfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  policy_.Swap(&other->policy_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_agent_reconfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_echo_request_latency::InitAsDefaultInstance() {
}
class flex_echo_request_latency::_Internal {
 public:
};

flex_echo_request_latency::flex_echo_request_latency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_echo_request_latency)
}
flex_echo_request_latency::flex_echo_request_latency(const flex_echo_request_latency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_request_latency)
}

void flex_echo_request_latency::SharedCtor() {
}

flex_echo_request_latency::~flex_echo_request_latency() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_request_latency)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_echo_request_latency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_echo_request_latency::ArenaDtor(void* object) {
  flex_echo_request_latency* _this = reinterpret_cast< flex_echo_request_latency* >(object);
  (void)_this;
}
void flex_echo_request_latency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_echo_request_latency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_echo_request_latency& flex_echo_request_latency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_echo_request_latency_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_echo_request_latency::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_request_latency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_echo_request_latency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_echo_request_latency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_request_latency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_request_latency)
  return target;
}

size_t flex_echo_request_latency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_request_latency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_echo_request_latency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_request_latency)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_request_latency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_echo_request_latency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_request_latency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_request_latency)
    MergeFrom(*source);
  }
}

void flex_echo_request_latency::MergeFrom(const flex_echo_request_latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_request_latency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void flex_echo_request_latency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_request_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_request_latency::CopyFrom(const flex_echo_request_latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_request_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_request_latency::IsInitialized() const {
  return true;
}

void flex_echo_request_latency::InternalSwap(flex_echo_request_latency* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_echo_request_latency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_echo_reply_latency::InitAsDefaultInstance() {
}
class flex_echo_reply_latency::_Internal {
 public:
};

flex_echo_reply_latency::flex_echo_reply_latency(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_echo_reply_latency)
}
flex_echo_reply_latency::flex_echo_reply_latency(const flex_echo_reply_latency& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_echo_reply_latency)
}

void flex_echo_reply_latency::SharedCtor() {
}

flex_echo_reply_latency::~flex_echo_reply_latency() {
  // @@protoc_insertion_point(destructor:protocol.flex_echo_reply_latency)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_echo_reply_latency::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_echo_reply_latency::ArenaDtor(void* object) {
  flex_echo_reply_latency* _this = reinterpret_cast< flex_echo_reply_latency* >(object);
  (void)_this;
}
void flex_echo_reply_latency::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_echo_reply_latency::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_echo_reply_latency& flex_echo_reply_latency::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_echo_reply_latency_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_echo_reply_latency::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_echo_reply_latency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_echo_reply_latency::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_echo_reply_latency::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_echo_reply_latency)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_echo_reply_latency)
  return target;
}

size_t flex_echo_reply_latency::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_echo_reply_latency)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_echo_reply_latency::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_echo_reply_latency)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_echo_reply_latency* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_echo_reply_latency>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_echo_reply_latency)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_echo_reply_latency)
    MergeFrom(*source);
  }
}

void flex_echo_reply_latency::MergeFrom(const flex_echo_reply_latency& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_echo_reply_latency)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void flex_echo_reply_latency::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_echo_reply_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_echo_reply_latency::CopyFrom(const flex_echo_reply_latency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_echo_reply_latency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_echo_reply_latency::IsInitialized() const {
  return true;
}

void flex_echo_reply_latency::InternalSwap(flex_echo_reply_latency* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_echo_reply_latency::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_disconnect::InitAsDefaultInstance() {
  ::protocol::_flex_disconnect_default_instance_._instance.get_mutable()->header_ = const_cast< ::protocol::flex_header*>(
      ::protocol::flex_header::internal_default_instance());
}
class flex_disconnect::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_disconnect>()._has_bits_);
  static const ::protocol::flex_header& header(const flex_disconnect* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_header&
flex_disconnect::_Internal::header(const flex_disconnect* msg) {
  return *msg->header_;
}
void flex_disconnect::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_disconnect::flex_disconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_disconnect)
}
flex_disconnect::flex_disconnect(const flex_disconnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::protocol::flex_header(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_disconnect)
}

void flex_disconnect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_disconnect_flexran_2eproto.base);
  header_ = nullptr;
}

flex_disconnect::~flex_disconnect() {
  // @@protoc_insertion_point(destructor:protocol.flex_disconnect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_disconnect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void flex_disconnect::ArenaDtor(void* object) {
  flex_disconnect* _this = reinterpret_cast< flex_disconnect* >(object);
  (void)_this;
}
void flex_disconnect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_disconnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_disconnect& flex_disconnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_disconnect_flexran_2eproto.base);
  return *internal_default_instance();
}


void flex_disconnect::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_disconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_disconnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_disconnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_disconnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_disconnect)
  return target;
}

size_t flex_disconnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_disconnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protocol.flex_header header = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_disconnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_disconnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_disconnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_disconnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_disconnect)
    MergeFrom(*source);
  }
}

void flex_disconnect::MergeFrom(const flex_disconnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_disconnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::protocol::flex_header::MergeFrom(from._internal_header());
  }
}

void flex_disconnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_disconnect::CopyFrom(const flex_disconnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_disconnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_disconnect::IsInitialized() const {
  return true;
}

void flex_disconnect::InternalSwap(flex_disconnect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_disconnect::GetMetadata() const {
  return GetMetadataStatic();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_echo_request_latency::kLatencyFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protocol::flex_echo_request,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  flex_echo_request_latency::latency(kLatencyFieldNumber, 0u);
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int flex_echo_reply_latency::kLatencyFieldNumber;
#endif
::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::protocol::flex_echo_reply,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< ::PROTOBUF_NAMESPACE_ID::uint32 >, 13, false >
  flex_echo_reply_latency::latency(kLatencyFieldNumber, 0u);

// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flexran_message* Arena::CreateMaybeMessage< ::protocol::flexran_message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flexran_message >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_hello* Arena::CreateMaybeMessage< ::protocol::flex_hello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_hello >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_echo_request* Arena::CreateMaybeMessage< ::protocol::flex_echo_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_echo_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_echo_reply* Arena::CreateMaybeMessage< ::protocol::flex_echo_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_echo_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_stats_request* Arena::CreateMaybeMessage< ::protocol::flex_stats_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_stats_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_stats_reply* Arena::CreateMaybeMessage< ::protocol::flex_stats_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_stats_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_sf_trigger* Arena::CreateMaybeMessage< ::protocol::flex_sf_trigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_sf_trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ul_sr_info* Arena::CreateMaybeMessage< ::protocol::flex_ul_sr_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ul_sr_info >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_enb_config_request* Arena::CreateMaybeMessage< ::protocol::flex_enb_config_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_enb_config_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_enb_config_reply* Arena::CreateMaybeMessage< ::protocol::flex_enb_config_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_enb_config_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ue_config_request* Arena::CreateMaybeMessage< ::protocol::flex_ue_config_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ue_config_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ue_config_reply* Arena::CreateMaybeMessage< ::protocol::flex_ue_config_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ue_config_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_lc_config_request* Arena::CreateMaybeMessage< ::protocol::flex_lc_config_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_lc_config_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_lc_config_reply* Arena::CreateMaybeMessage< ::protocol::flex_lc_config_reply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_lc_config_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_mac_config* Arena::CreateMaybeMessage< ::protocol::flex_dl_mac_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_mac_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ul_mac_config* Arena::CreateMaybeMessage< ::protocol::flex_ul_mac_config >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ul_mac_config >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_rrc_triggering* Arena::CreateMaybeMessage< ::protocol::flex_rrc_triggering >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_rrc_triggering >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ho_command* Arena::CreateMaybeMessage< ::protocol::flex_ho_command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ho_command >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ue_state_change* Arena::CreateMaybeMessage< ::protocol::flex_ue_state_change >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ue_state_change >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_control_delegation* Arena::CreateMaybeMessage< ::protocol::flex_control_delegation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_control_delegation >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_agent_reconfiguration* Arena::CreateMaybeMessage< ::protocol::flex_agent_reconfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_agent_reconfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_echo_request_latency* Arena::CreateMaybeMessage< ::protocol::flex_echo_request_latency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_echo_request_latency >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_echo_reply_latency* Arena::CreateMaybeMessage< ::protocol::flex_echo_reply_latency >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_echo_reply_latency >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_disconnect* Arena::CreateMaybeMessage< ::protocol::flex_disconnect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_disconnect >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
