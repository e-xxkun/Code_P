// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: time_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_time_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_time_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_time_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_time_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_time_5fcommon_2eproto;
namespace protocol {
class flex_dl_info;
class flex_dl_infoDefaultTypeInternal;
extern flex_dl_infoDefaultTypeInternal _flex_dl_info_default_instance_;
class flex_ul_info;
class flex_ul_infoDefaultTypeInternal;
extern flex_ul_infoDefaultTypeInternal _flex_ul_info_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::flex_dl_info* Arena::CreateMaybeMessage<::protocol::flex_dl_info>(Arena*);
template<> ::protocol::flex_ul_info* Arena::CreateMaybeMessage<::protocol::flex_ul_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum flex_harq_status : int {
  FLHS_ACK = 0,
  FLHS_NACK = 1,
  FLHS_DTX = 2
};
bool flex_harq_status_IsValid(int value);
constexpr flex_harq_status flex_harq_status_MIN = FLHS_ACK;
constexpr flex_harq_status flex_harq_status_MAX = FLHS_DTX;
constexpr int flex_harq_status_ARRAYSIZE = flex_harq_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_harq_status_descriptor();
template<typename T>
inline const std::string& flex_harq_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_harq_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_harq_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_harq_status_descriptor(), enum_t_value);
}
inline bool flex_harq_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_harq_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_harq_status>(
    flex_harq_status_descriptor(), name, value);
}
enum flex_reception_status : int {
  FLRS_OK = 0,
  FLRS_NOT_OK = 1,
  FLRS_NOT_VALID = 2
};
bool flex_reception_status_IsValid(int value);
constexpr flex_reception_status flex_reception_status_MIN = FLRS_OK;
constexpr flex_reception_status flex_reception_status_MAX = FLRS_NOT_VALID;
constexpr int flex_reception_status_ARRAYSIZE = flex_reception_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_reception_status_descriptor();
template<typename T>
inline const std::string& flex_reception_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_reception_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_reception_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_reception_status_descriptor(), enum_t_value);
}
inline bool flex_reception_status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_reception_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_reception_status>(
    flex_reception_status_descriptor(), name, value);
}
// ===================================================================

class flex_dl_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_dl_info) */ {
 public:
  inline flex_dl_info() : flex_dl_info(nullptr) {}
  virtual ~flex_dl_info();

  flex_dl_info(const flex_dl_info& from);
  flex_dl_info(flex_dl_info&& from) noexcept
    : flex_dl_info() {
    *this = ::std::move(from);
  }

  inline flex_dl_info& operator=(const flex_dl_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_dl_info& operator=(flex_dl_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_dl_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_dl_info* internal_default_instance() {
    return reinterpret_cast<const flex_dl_info*>(
               &_flex_dl_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(flex_dl_info& a, flex_dl_info& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_dl_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_dl_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_dl_info* New() const final {
    return CreateMaybeMessage<flex_dl_info>(nullptr);
  }

  flex_dl_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_dl_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_dl_info& from);
  void MergeFrom(const flex_dl_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_dl_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_dl_info";
  }
  protected:
  explicit flex_dl_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_time_5fcommon_2eproto);
    return ::descriptor_table_time_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHarqStatusFieldNumber = 3,
    kRntiFieldNumber = 1,
    kHarqProcessIdFieldNumber = 2,
    kServCellIndexFieldNumber = 4,
  };
  // repeated uint32 harq_status = 3;
  int harq_status_size() const;
  private:
  int _internal_harq_status_size() const;
  public:
  void clear_harq_status();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_harq_status(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_harq_status() const;
  void _internal_add_harq_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_harq_status();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 harq_status(int index) const;
  void set_harq_status(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_harq_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      harq_status() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_harq_status();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 harq_process_id = 2;
  bool has_harq_process_id() const;
  private:
  bool _internal_has_harq_process_id() const;
  public:
  void clear_harq_process_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 harq_process_id() const;
  void set_harq_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_harq_process_id() const;
  void _internal_set_harq_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 serv_cell_index = 4;
  bool has_serv_cell_index() const;
  private:
  bool _internal_has_serv_cell_index() const;
  public:
  void clear_serv_cell_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 serv_cell_index() const;
  void set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serv_cell_index() const;
  void _internal_set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_dl_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > harq_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 harq_process_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serv_cell_index_;
  friend struct ::TableStruct_time_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_ul_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ul_info) */ {
 public:
  inline flex_ul_info() : flex_ul_info(nullptr) {}
  virtual ~flex_ul_info();

  flex_ul_info(const flex_ul_info& from);
  flex_ul_info(flex_ul_info&& from) noexcept
    : flex_ul_info() {
    *this = ::std::move(from);
  }

  inline flex_ul_info& operator=(const flex_ul_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_ul_info& operator=(flex_ul_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_ul_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_ul_info* internal_default_instance() {
    return reinterpret_cast<const flex_ul_info*>(
               &_flex_ul_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(flex_ul_info& a, flex_ul_info& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_ul_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_ul_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_ul_info* New() const final {
    return CreateMaybeMessage<flex_ul_info>(nullptr);
  }

  flex_ul_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_ul_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_ul_info& from);
  void MergeFrom(const flex_ul_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_ul_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_ul_info";
  }
  protected:
  explicit flex_ul_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_time_5fcommon_2eproto);
    return ::descriptor_table_time_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUlReceptionFieldNumber = 2,
    kRntiFieldNumber = 1,
    kReceptionStatusFieldNumber = 3,
    kTpcFieldNumber = 4,
    kServCellIndexFieldNumber = 5,
    kRssiFieldNumber = 6,
  };
  // repeated uint32 ul_reception = 2;
  int ul_reception_size() const;
  private:
  int _internal_ul_reception_size() const;
  public:
  void clear_ul_reception();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ul_reception(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_ul_reception() const;
  void _internal_add_ul_reception(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_ul_reception();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_reception(int index) const;
  void set_ul_reception(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_ul_reception(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      ul_reception() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_ul_reception();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 reception_status = 3;
  bool has_reception_status() const;
  private:
  bool _internal_has_reception_status() const;
  public:
  void clear_reception_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 reception_status() const;
  void set_reception_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_reception_status() const;
  void _internal_set_reception_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tpc = 4;
  bool has_tpc() const;
  private:
  bool _internal_has_tpc() const;
  public:
  void clear_tpc();
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc() const;
  void set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tpc() const;
  void _internal_set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 serv_cell_index = 5;
  bool has_serv_cell_index() const;
  private:
  bool _internal_has_serv_cell_index() const;
  public:
  void clear_serv_cell_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 serv_cell_index() const;
  void set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_serv_cell_index() const;
  void _internal_set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 rssi = 6;
  bool has_rssi() const;
  private:
  bool _internal_has_rssi() const;
  public:
  void clear_rssi();
  ::PROTOBUF_NAMESPACE_ID::uint32 rssi() const;
  void set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rssi() const;
  void _internal_set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_ul_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > ul_reception_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 reception_status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tpc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 serv_cell_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rssi_;
  friend struct ::TableStruct_time_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// flex_dl_info

// optional uint32 rnti = 1;
inline bool flex_dl_info::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_dl_info::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_dl_info::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.rnti)
  return _internal_rnti();
}
inline void flex_dl_info::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rnti_ = value;
}
inline void flex_dl_info::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.rnti)
}

// optional uint32 harq_process_id = 2;
inline bool flex_dl_info::_internal_has_harq_process_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_dl_info::has_harq_process_id() const {
  return _internal_has_harq_process_id();
}
inline void flex_dl_info::clear_harq_process_id() {
  harq_process_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::_internal_harq_process_id() const {
  return harq_process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::harq_process_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.harq_process_id)
  return _internal_harq_process_id();
}
inline void flex_dl_info::_internal_set_harq_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  harq_process_id_ = value;
}
inline void flex_dl_info::set_harq_process_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_harq_process_id(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.harq_process_id)
}

// repeated uint32 harq_status = 3;
inline int flex_dl_info::_internal_harq_status_size() const {
  return harq_status_.size();
}
inline int flex_dl_info::harq_status_size() const {
  return _internal_harq_status_size();
}
inline void flex_dl_info::clear_harq_status() {
  harq_status_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::_internal_harq_status(int index) const {
  return harq_status_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::harq_status(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.harq_status)
  return _internal_harq_status(index);
}
inline void flex_dl_info::set_harq_status(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  harq_status_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.harq_status)
}
inline void flex_dl_info::_internal_add_harq_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  harq_status_.Add(value);
}
inline void flex_dl_info::add_harq_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_harq_status(value);
  // @@protoc_insertion_point(field_add:protocol.flex_dl_info.harq_status)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_info::_internal_harq_status() const {
  return harq_status_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_dl_info::harq_status() const {
  // @@protoc_insertion_point(field_list:protocol.flex_dl_info.harq_status)
  return _internal_harq_status();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_info::_internal_mutable_harq_status() {
  return &harq_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_dl_info::mutable_harq_status() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_dl_info.harq_status)
  return _internal_mutable_harq_status();
}

// optional uint32 serv_cell_index = 4;
inline bool flex_dl_info::_internal_has_serv_cell_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_dl_info::has_serv_cell_index() const {
  return _internal_has_serv_cell_index();
}
inline void flex_dl_info::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::_internal_serv_cell_index() const {
  return serv_cell_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_dl_info::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_dl_info.serv_cell_index)
  return _internal_serv_cell_index();
}
inline void flex_dl_info::_internal_set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  serv_cell_index_ = value;
}
inline void flex_dl_info::set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serv_cell_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_dl_info.serv_cell_index)
}

// -------------------------------------------------------------------

// flex_ul_info

// optional uint32 rnti = 1;
inline bool flex_ul_info::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_ul_info::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_ul_info::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.rnti)
  return _internal_rnti();
}
inline void flex_ul_info::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rnti_ = value;
}
inline void flex_ul_info::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.rnti)
}

// repeated uint32 ul_reception = 2;
inline int flex_ul_info::_internal_ul_reception_size() const {
  return ul_reception_.size();
}
inline int flex_ul_info::ul_reception_size() const {
  return _internal_ul_reception_size();
}
inline void flex_ul_info::clear_ul_reception() {
  ul_reception_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::_internal_ul_reception(int index) const {
  return ul_reception_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::ul_reception(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.ul_reception)
  return _internal_ul_reception(index);
}
inline void flex_ul_info::set_ul_reception(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ul_reception_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.ul_reception)
}
inline void flex_ul_info::_internal_add_ul_reception(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  ul_reception_.Add(value);
}
inline void flex_ul_info::add_ul_reception(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_ul_reception(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ul_info.ul_reception)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_ul_info::_internal_ul_reception() const {
  return ul_reception_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_ul_info::ul_reception() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ul_info.ul_reception)
  return _internal_ul_reception();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_ul_info::_internal_mutable_ul_reception() {
  return &ul_reception_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_ul_info::mutable_ul_reception() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ul_info.ul_reception)
  return _internal_mutable_ul_reception();
}

// optional uint32 reception_status = 3;
inline bool flex_ul_info::_internal_has_reception_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_ul_info::has_reception_status() const {
  return _internal_has_reception_status();
}
inline void flex_ul_info::clear_reception_status() {
  reception_status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::_internal_reception_status() const {
  return reception_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::reception_status() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.reception_status)
  return _internal_reception_status();
}
inline void flex_ul_info::_internal_set_reception_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  reception_status_ = value;
}
inline void flex_ul_info::set_reception_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_reception_status(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.reception_status)
}

// optional uint32 tpc = 4;
inline bool flex_ul_info::_internal_has_tpc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_ul_info::has_tpc() const {
  return _internal_has_tpc();
}
inline void flex_ul_info::clear_tpc() {
  tpc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::_internal_tpc() const {
  return tpc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::tpc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.tpc)
  return _internal_tpc();
}
inline void flex_ul_info::_internal_set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tpc_ = value;
}
inline void flex_ul_info::set_tpc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tpc(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.tpc)
}

// optional uint32 serv_cell_index = 5;
inline bool flex_ul_info::_internal_has_serv_cell_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_ul_info::has_serv_cell_index() const {
  return _internal_has_serv_cell_index();
}
inline void flex_ul_info::clear_serv_cell_index() {
  serv_cell_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::_internal_serv_cell_index() const {
  return serv_cell_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::serv_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.serv_cell_index)
  return _internal_serv_cell_index();
}
inline void flex_ul_info::_internal_set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  serv_cell_index_ = value;
}
inline void flex_ul_info::set_serv_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_serv_cell_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.serv_cell_index)
}

// optional uint32 rssi = 6;
inline bool flex_ul_info::_internal_has_rssi() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_ul_info::has_rssi() const {
  return _internal_has_rssi();
}
inline void flex_ul_info::clear_rssi() {
  rssi_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::_internal_rssi() const {
  return rssi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ul_info::rssi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ul_info.rssi)
  return _internal_rssi();
}
inline void flex_ul_info::_internal_set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  rssi_ = value;
}
inline void flex_ul_info::set_rssi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rssi(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ul_info.rssi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::flex_harq_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_harq_status>() {
  return ::protocol::flex_harq_status_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_reception_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_reception_status>() {
  return ::protocol::flex_reception_status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_time_5fcommon_2eproto
