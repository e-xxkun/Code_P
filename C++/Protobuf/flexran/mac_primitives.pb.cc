// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mac_primitives.proto

#include "mac_primitives.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mac_5fprimitives_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_rlc_pdu_tb_mac_5fprimitives_2eproto;
namespace protocol {
class flex_dl_dciDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_dci> _instance;
} _flex_dl_dci_default_instance_;
class flex_ul_dciDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ul_dci> _instance;
} _flex_ul_dci_default_instance_;
class flex_rlc_pduDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_rlc_pdu> _instance;
} _flex_rlc_pdu_default_instance_;
class flex_rlc_pdu_tbDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_rlc_pdu_tb> _instance;
} _flex_rlc_pdu_tb_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_dl_dci_mac_5fprimitives_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_dci_default_instance_;
    new (ptr) ::protocol::flex_dl_dci();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_dci::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_dl_dci_mac_5fprimitives_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_dl_dci_mac_5fprimitives_2eproto}, {}};

static void InitDefaultsscc_info_flex_rlc_pdu_mac_5fprimitives_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_rlc_pdu_default_instance_;
    new (ptr) ::protocol::flex_rlc_pdu();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_rlc_pdu::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_rlc_pdu_mac_5fprimitives_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_rlc_pdu_mac_5fprimitives_2eproto}, {
      &scc_info_flex_rlc_pdu_tb_mac_5fprimitives_2eproto.base,}};

static void InitDefaultsscc_info_flex_rlc_pdu_tb_mac_5fprimitives_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_rlc_pdu_tb_default_instance_;
    new (ptr) ::protocol::flex_rlc_pdu_tb();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_rlc_pdu_tb::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_rlc_pdu_tb_mac_5fprimitives_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_rlc_pdu_tb_mac_5fprimitives_2eproto}, {}};

static void InitDefaultsscc_info_flex_ul_dci_mac_5fprimitives_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ul_dci_default_instance_;
    new (ptr) ::protocol::flex_ul_dci();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ul_dci::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ul_dci_mac_5fprimitives_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_ul_dci_mac_5fprimitives_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mac_5fprimitives_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mac_5fprimitives_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mac_5fprimitives_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mac_5fprimitives_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, res_alloc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, rb_bitmap_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, rb_shift_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, tbs_size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, mcs_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, ndi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, rv_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, cce_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, aggr_level_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, precoding_info_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, format_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, tpc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, harq_process_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, dai_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, vrb_format_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, tb_swap_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, sps_release_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, pdcch_order_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, preamble_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, prach_mask_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, n_gap_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, tbs_idx_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, dl_power_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, pdcch_power_offset_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, cif_present_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_dci, cif_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, rb_start_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, rb_len_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, mcs_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, cyclic_shift2_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, freq_hop_flag_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, freq_hop_map_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, ndi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, rv_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, harq_pid_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, ultx_mode_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, tbs_size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, n_srs_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, res_alloc_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_dci, dai_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_pdu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_pdu, rlc_pdu_tb_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_pdu_tb, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_pdu_tb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_pdu_tb, logical_channel_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_pdu_tb, size_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 32, sizeof(::protocol::flex_dl_dci)},
  { 59, 80, sizeof(::protocol::flex_ul_dci)},
  { 96, -1, sizeof(::protocol::flex_rlc_pdu)},
  { 102, 109, sizeof(::protocol::flex_rlc_pdu_tb)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_dci_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ul_dci_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_rlc_pdu_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_rlc_pdu_tb_default_instance_),
};

const char descriptor_table_protodef_mac_5fprimitives_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024mac_primitives.proto\022\010protocol\"\202\004\n\013fle"
  "x_dl_dci\022\014\n\004rnti\030\001 \001(\r\022\021\n\tres_alloc\030\002 \001("
  "\r\022\021\n\trb_bitmap\030\003 \001(\r\022\020\n\010rb_shift\030\004 \001(\r\022\020"
  "\n\010tbs_size\030\005 \003(\r\022\013\n\003mcs\030\006 \003(\r\022\013\n\003ndi\030\007 \003"
  "(\r\022\n\n\002rv\030\010 \003(\r\022\021\n\tcce_index\030\t \001(\r\022\022\n\nagg"
  "r_level\030\n \001(\r\022\026\n\016precoding_info\030\013 \001(\r\022\016\n"
  "\006format\030\014 \001(\r\022\013\n\003tpc\030\r \001(\r\022\024\n\014harq_proce"
  "ss\030\016 \001(\r\022\013\n\003dai\030\017 \001(\r\022\022\n\nvrb_format\030\020 \001("
  "\r\022\017\n\007tb_swap\030\021 \001(\r\022\023\n\013sps_release\030\022 \001(\r\022"
  "\023\n\013pdcch_order\030\023 \001(\r\022\026\n\016preamble_index\030\024"
  " \001(\r\022\030\n\020prach_mask_index\030\025 \001(\r\022\r\n\005n_gap\030"
  "\026 \001(\r\022\017\n\007tbs_idx\030\027 \001(\r\022\027\n\017dl_power_offse"
  "t\030\030 \001(\r\022\032\n\022pdcch_power_offset\030\031 \001(\r\022\023\n\013c"
  "if_present\030\032 \001(\r\022\013\n\003cif\030\033 \001(\r\"\233\002\n\013flex_u"
  "l_dci\022\014\n\004rnti\030\001 \001(\r\022\020\n\010rb_start\030\002 \001(\r\022\016\n"
  "\006rb_len\030\003 \001(\r\022\013\n\003mcs\030\004 \001(\r\022\025\n\rcyclic_shi"
  "ft2\030\005 \001(\r\022\025\n\rfreq_hop_flag\030\006 \001(\r\022\024\n\014freq"
  "_hop_map\030\007 \001(\r\022\013\n\003ndi\030\010 \001(\r\022\n\n\002rv\030\t \001(\r\022"
  "\020\n\010harq_pid\030\n \001(\r\022\021\n\tultx_mode\030\013 \001(\r\022\020\n\010"
  "tbs_size\030\014 \001(\r\022\r\n\005n_srs\030\r \001(\r\022\021\n\tres_all"
  "oc\030\016 \001(\r\022\014\n\004size\030\017 \001(\r\022\013\n\003dai\030\020 \001(\r\"=\n\014f"
  "lex_rlc_pdu\022-\n\nrlc_pdu_tb\030\001 \003(\0132\031.protoc"
  "ol.flex_rlc_pdu_tb\";\n\017flex_rlc_pdu_tb\022\032\n"
  "\022logical_channel_id\030\001 \001(\r\022\014\n\004size\030\002 \001(\r*"
  "\244\001\n\017flex_dci_format\022\014\n\010FLDCIF_1\020\000\022\r\n\tFLD"
  "CIF_1A\020\001\022\r\n\tFLDCIF_1B\020\002\022\r\n\tFLDCIF_1C\020\003\022\r"
  "\n\tFLDCIF_1D\020\004\022\014\n\010FLDCIF_2\020\005\022\r\n\tFLDCIF_2A"
  "\020\006\022\r\n\tFLDCIF_2B\020\007\022\014\n\010FLDCIF_3\020\010\022\r\n\tFLDCI"
  "F_3A\020\t*\?\n\017flex_vrb_format\022\024\n\020FLVRBF_LOCA"
  "LIZED\020\000\022\026\n\022FLVRBF_DISTRIBUTED\020\001*)\n\rflex_"
  "ngap_val\022\013\n\007FLNGV_1\020\000\022\013\n\007FLNGV_2\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mac_5fprimitives_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mac_5fprimitives_2eproto_sccs[4] = {
  &scc_info_flex_dl_dci_mac_5fprimitives_2eproto.base,
  &scc_info_flex_rlc_pdu_mac_5fprimitives_2eproto.base,
  &scc_info_flex_rlc_pdu_tb_mac_5fprimitives_2eproto.base,
  &scc_info_flex_ul_dci_mac_5fprimitives_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mac_5fprimitives_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mac_5fprimitives_2eproto = {
  false, false, descriptor_table_protodef_mac_5fprimitives_2eproto, "mac_primitives.proto", 1234,
  &descriptor_table_mac_5fprimitives_2eproto_once, descriptor_table_mac_5fprimitives_2eproto_sccs, descriptor_table_mac_5fprimitives_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_mac_5fprimitives_2eproto::offsets,
  file_level_metadata_mac_5fprimitives_2eproto, 4, file_level_enum_descriptors_mac_5fprimitives_2eproto, file_level_service_descriptors_mac_5fprimitives_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mac_5fprimitives_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mac_5fprimitives_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_dci_format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mac_5fprimitives_2eproto);
  return file_level_enum_descriptors_mac_5fprimitives_2eproto[0];
}
bool flex_dci_format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_vrb_format_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mac_5fprimitives_2eproto);
  return file_level_enum_descriptors_mac_5fprimitives_2eproto[1];
}
bool flex_vrb_format_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ngap_val_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mac_5fprimitives_2eproto);
  return file_level_enum_descriptors_mac_5fprimitives_2eproto[2];
}
bool flex_ngap_val_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void flex_dl_dci::InitAsDefaultInstance() {
}
class flex_dl_dci::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_dci>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_res_alloc(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rb_bitmap(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_rb_shift(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cce_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_aggr_level(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_precoding_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tpc(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_harq_process(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_dai(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_vrb_format(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tb_swap(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_sps_release(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pdcch_order(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_preamble_index(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_prach_mask_index(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_n_gap(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_tbs_idx(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dl_power_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_pdcch_power_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_cif_present(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_cif(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

flex_dl_dci::flex_dl_dci(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tbs_size_(arena),
  mcs_(arena),
  ndi_(arena),
  rv_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_dci)
}
flex_dl_dci::flex_dl_dci(const flex_dl_dci& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      tbs_size_(from.tbs_size_),
      mcs_(from.mcs_),
      ndi_(from.ndi_),
      rv_(from.rv_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&cif_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(cif_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_dci)
}

void flex_dl_dci::SharedCtor() {
  ::memset(&rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cif_) -
      reinterpret_cast<char*>(&rnti_)) + sizeof(cif_));
}

flex_dl_dci::~flex_dl_dci() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_dci)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_dci::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_dl_dci::ArenaDtor(void* object) {
  flex_dl_dci* _this = reinterpret_cast< flex_dl_dci* >(object);
  (void)_this;
}
void flex_dl_dci::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_dci::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_dci& flex_dl_dci::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_dci_mac_5fprimitives_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_dci::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_dci)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tbs_size_.Clear();
  mcs_.Clear();
  ndi_.Clear();
  rv_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&format_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(format_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&tpc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&preamble_index_) -
        reinterpret_cast<char*>(&tpc_)) + sizeof(preamble_index_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&prach_mask_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cif_) -
        reinterpret_cast<char*>(&prach_mask_index_)) + sizeof(cif_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_dci::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 res_alloc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_res_alloc(&has_bits);
          res_alloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rb_bitmap = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rb_bitmap(&has_bits);
          rb_bitmap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rb_shift = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_rb_shift(&has_bits);
          rb_shift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 tbs_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_tbs_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tbs_size(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 mcs = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_mcs(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_mcs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 ndi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_ndi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<56>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ndi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 rv = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rv(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<64>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rv(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cce_index = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_cce_index(&has_bits);
          cce_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 aggr_level = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_aggr_level(&has_bits);
          aggr_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 precoding_info = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_precoding_info(&has_bits);
          precoding_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 format = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_format(&has_bits);
          format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tpc = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tpc(&has_bits);
          tpc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 harq_process = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_harq_process(&has_bits);
          harq_process_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dai = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_dai(&has_bits);
          dai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 vrb_format = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_vrb_format(&has_bits);
          vrb_format_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tb_swap = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_tb_swap(&has_bits);
          tb_swap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sps_release = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_sps_release(&has_bits);
          sps_release_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcch_order = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_pdcch_order(&has_bits);
          pdcch_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 preamble_index = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_preamble_index(&has_bits);
          preamble_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prach_mask_index = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_prach_mask_index(&has_bits);
          prach_mask_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 n_gap = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_n_gap(&has_bits);
          n_gap_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tbs_idx = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tbs_idx(&has_bits);
          tbs_idx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dl_power_offset = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_dl_power_offset(&has_bits);
          dl_power_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pdcch_power_offset = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_pdcch_power_offset(&has_bits);
          pdcch_power_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cif_present = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_cif_present(&has_bits);
          cif_present_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cif = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_cif(&has_bits);
          cif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_dci::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_dci)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional uint32 res_alloc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_res_alloc(), target);
  }

  // optional uint32 rb_bitmap = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rb_bitmap(), target);
  }

  // optional uint32 rb_shift = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rb_shift(), target);
  }

  // repeated uint32 tbs_size = 5;
  for (int i = 0, n = this->_internal_tbs_size_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tbs_size(i), target);
  }

  // repeated uint32 mcs = 6;
  for (int i = 0, n = this->_internal_mcs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_mcs(i), target);
  }

  // repeated uint32 ndi = 7;
  for (int i = 0, n = this->_internal_ndi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_ndi(i), target);
  }

  // repeated uint32 rv = 8;
  for (int i = 0, n = this->_internal_rv_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rv(i), target);
  }

  // optional uint32 cce_index = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_cce_index(), target);
  }

  // optional uint32 aggr_level = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_aggr_level(), target);
  }

  // optional uint32 precoding_info = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_precoding_info(), target);
  }

  // optional uint32 format = 12;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_format(), target);
  }

  // optional uint32 tpc = 13;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tpc(), target);
  }

  // optional uint32 harq_process = 14;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_harq_process(), target);
  }

  // optional uint32 dai = 15;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_dai(), target);
  }

  // optional uint32 vrb_format = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_vrb_format(), target);
  }

  // optional uint32 tb_swap = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_tb_swap(), target);
  }

  // optional uint32 sps_release = 18;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_sps_release(), target);
  }

  // optional uint32 pdcch_order = 19;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_pdcch_order(), target);
  }

  // optional uint32 preamble_index = 20;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_preamble_index(), target);
  }

  // optional uint32 prach_mask_index = 21;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_prach_mask_index(), target);
  }

  // optional uint32 n_gap = 22;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_n_gap(), target);
  }

  // optional uint32 tbs_idx = 23;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_tbs_idx(), target);
  }

  // optional uint32 dl_power_offset = 24;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_dl_power_offset(), target);
  }

  // optional uint32 pdcch_power_offset = 25;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_pdcch_power_offset(), target);
  }

  // optional uint32 cif_present = 26;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_cif_present(), target);
  }

  // optional uint32 cif = 27;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_cif(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_dci)
  return target;
}

size_t flex_dl_dci::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_dci)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 tbs_size = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tbs_size_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tbs_size_size());
    total_size += data_size;
  }

  // repeated uint32 mcs = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->mcs_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_mcs_size());
    total_size += data_size;
  }

  // repeated uint32 ndi = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ndi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ndi_size());
    total_size += data_size;
  }

  // repeated uint32 rv = 8;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rv_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rv_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 res_alloc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_res_alloc());
    }

    // optional uint32 rb_bitmap = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rb_bitmap());
    }

    // optional uint32 rb_shift = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rb_shift());
    }

    // optional uint32 cce_index = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cce_index());
    }

    // optional uint32 aggr_level = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_aggr_level());
    }

    // optional uint32 precoding_info = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_precoding_info());
    }

    // optional uint32 format = 12;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_format());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 tpc = 13;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tpc());
    }

    // optional uint32 harq_process = 14;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_harq_process());
    }

    // optional uint32 dai = 15;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dai());
    }

    // optional uint32 vrb_format = 16;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_vrb_format());
    }

    // optional uint32 tb_swap = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tb_swap());
    }

    // optional uint32 sps_release = 18;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sps_release());
    }

    // optional uint32 pdcch_order = 19;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcch_order());
    }

    // optional uint32 preamble_index = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_preamble_index());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional uint32 prach_mask_index = 21;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prach_mask_index());
    }

    // optional uint32 n_gap = 22;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_n_gap());
    }

    // optional uint32 tbs_idx = 23;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tbs_idx());
    }

    // optional uint32 dl_power_offset = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dl_power_offset());
    }

    // optional uint32 pdcch_power_offset = 25;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pdcch_power_offset());
    }

    // optional uint32 cif_present = 26;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cif_present());
    }

    // optional uint32 cif = 27;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cif());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_dci::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_dci)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_dci* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_dci>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_dci)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_dci)
    MergeFrom(*source);
  }
}

void flex_dl_dci::MergeFrom(const flex_dl_dci& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_dci)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tbs_size_.MergeFrom(from.tbs_size_);
  mcs_.MergeFrom(from.mcs_);
  ndi_.MergeFrom(from.ndi_);
  rv_.MergeFrom(from.rv_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      res_alloc_ = from.res_alloc_;
    }
    if (cached_has_bits & 0x00000004u) {
      rb_bitmap_ = from.rb_bitmap_;
    }
    if (cached_has_bits & 0x00000008u) {
      rb_shift_ = from.rb_shift_;
    }
    if (cached_has_bits & 0x00000010u) {
      cce_index_ = from.cce_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      aggr_level_ = from.aggr_level_;
    }
    if (cached_has_bits & 0x00000040u) {
      precoding_info_ = from.precoding_info_;
    }
    if (cached_has_bits & 0x00000080u) {
      format_ = from.format_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      tpc_ = from.tpc_;
    }
    if (cached_has_bits & 0x00000200u) {
      harq_process_ = from.harq_process_;
    }
    if (cached_has_bits & 0x00000400u) {
      dai_ = from.dai_;
    }
    if (cached_has_bits & 0x00000800u) {
      vrb_format_ = from.vrb_format_;
    }
    if (cached_has_bits & 0x00001000u) {
      tb_swap_ = from.tb_swap_;
    }
    if (cached_has_bits & 0x00002000u) {
      sps_release_ = from.sps_release_;
    }
    if (cached_has_bits & 0x00004000u) {
      pdcch_order_ = from.pdcch_order_;
    }
    if (cached_has_bits & 0x00008000u) {
      preamble_index_ = from.preamble_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      prach_mask_index_ = from.prach_mask_index_;
    }
    if (cached_has_bits & 0x00020000u) {
      n_gap_ = from.n_gap_;
    }
    if (cached_has_bits & 0x00040000u) {
      tbs_idx_ = from.tbs_idx_;
    }
    if (cached_has_bits & 0x00080000u) {
      dl_power_offset_ = from.dl_power_offset_;
    }
    if (cached_has_bits & 0x00100000u) {
      pdcch_power_offset_ = from.pdcch_power_offset_;
    }
    if (cached_has_bits & 0x00200000u) {
      cif_present_ = from.cif_present_;
    }
    if (cached_has_bits & 0x00400000u) {
      cif_ = from.cif_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_dl_dci::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_dci::CopyFrom(const flex_dl_dci& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_dci::IsInitialized() const {
  return true;
}

void flex_dl_dci::InternalSwap(flex_dl_dci* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tbs_size_.InternalSwap(&other->tbs_size_);
  mcs_.InternalSwap(&other->mcs_);
  ndi_.InternalSwap(&other->ndi_);
  rv_.InternalSwap(&other->rv_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_dl_dci, cif_)
      + sizeof(flex_dl_dci::cif_)
      - PROTOBUF_FIELD_OFFSET(flex_dl_dci, rnti_)>(
          reinterpret_cast<char*>(&rnti_),
          reinterpret_cast<char*>(&other->rnti_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_dci::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ul_dci::InitAsDefaultInstance() {
}
class flex_ul_dci::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ul_dci>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rb_start(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rb_len(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mcs(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cyclic_shift2(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_freq_hop_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_freq_hop_map(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ndi(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_rv(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_harq_pid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_ultx_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tbs_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_n_srs(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_res_alloc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_dai(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

flex_ul_dci::flex_ul_dci(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ul_dci)
}
flex_ul_dci::flex_ul_dci(const flex_ul_dci& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&dai_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(dai_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_dci)
}

void flex_ul_dci::SharedCtor() {
  ::memset(&rnti_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dai_) -
      reinterpret_cast<char*>(&rnti_)) + sizeof(dai_));
}

flex_ul_dci::~flex_ul_dci() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_dci)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ul_dci::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_ul_dci::ArenaDtor(void* object) {
  flex_ul_dci* _this = reinterpret_cast< flex_ul_dci* >(object);
  (void)_this;
}
void flex_ul_dci::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ul_dci::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ul_dci& flex_ul_dci::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ul_dci_mac_5fprimitives_2eproto.base);
  return *internal_default_instance();
}


void flex_ul_dci::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_dci)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&rnti_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ndi_) -
        reinterpret_cast<char*>(&rnti_)) + sizeof(ndi_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&rv_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dai_) -
        reinterpret_cast<char*>(&rv_)) + sizeof(dai_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ul_dci::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rb_start = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rb_start(&has_bits);
          rb_start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rb_len = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rb_len(&has_bits);
          rb_len_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mcs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mcs(&has_bits);
          mcs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cyclic_shift2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_cyclic_shift2(&has_bits);
          cyclic_shift2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 freq_hop_flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_freq_hop_flag(&has_bits);
          freq_hop_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 freq_hop_map = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_freq_hop_map(&has_bits);
          freq_hop_map_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ndi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_ndi(&has_bits);
          ndi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rv = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_rv(&has_bits);
          rv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 harq_pid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_harq_pid(&has_bits);
          harq_pid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ultx_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_ultx_mode(&has_bits);
          ultx_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tbs_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tbs_size(&has_bits);
          tbs_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 n_srs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_n_srs(&has_bits);
          n_srs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 res_alloc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_res_alloc(&has_bits);
          res_alloc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 dai = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dai(&has_bits);
          dai_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ul_dci::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_dci)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional uint32 rb_start = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rb_start(), target);
  }

  // optional uint32 rb_len = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rb_len(), target);
  }

  // optional uint32 mcs = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_mcs(), target);
  }

  // optional uint32 cyclic_shift2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_cyclic_shift2(), target);
  }

  // optional uint32 freq_hop_flag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_freq_hop_flag(), target);
  }

  // optional uint32 freq_hop_map = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_freq_hop_map(), target);
  }

  // optional uint32 ndi = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_ndi(), target);
  }

  // optional uint32 rv = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rv(), target);
  }

  // optional uint32 harq_pid = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_harq_pid(), target);
  }

  // optional uint32 ultx_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_ultx_mode(), target);
  }

  // optional uint32 tbs_size = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_tbs_size(), target);
  }

  // optional uint32 n_srs = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_n_srs(), target);
  }

  // optional uint32 res_alloc = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_res_alloc(), target);
  }

  // optional uint32 size = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_size(), target);
  }

  // optional uint32 dai = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_dai(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_dci)
  return target;
}

size_t flex_ul_dci::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_dci)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

    // optional uint32 rb_start = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rb_start());
    }

    // optional uint32 rb_len = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rb_len());
    }

    // optional uint32 mcs = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mcs());
    }

    // optional uint32 cyclic_shift2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cyclic_shift2());
    }

    // optional uint32 freq_hop_flag = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_freq_hop_flag());
    }

    // optional uint32 freq_hop_map = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_freq_hop_map());
    }

    // optional uint32 ndi = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ndi());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 rv = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rv());
    }

    // optional uint32 harq_pid = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_harq_pid());
    }

    // optional uint32 ultx_mode = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ultx_mode());
    }

    // optional uint32 tbs_size = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tbs_size());
    }

    // optional uint32 n_srs = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_n_srs());
    }

    // optional uint32 res_alloc = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_res_alloc());
    }

    // optional uint32 size = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size());
    }

    // optional uint32 dai = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_dai());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ul_dci::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_dci)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_dci* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ul_dci>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_dci)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_dci)
    MergeFrom(*source);
  }
}

void flex_ul_dci::MergeFrom(const flex_ul_dci& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_dci)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      rnti_ = from.rnti_;
    }
    if (cached_has_bits & 0x00000002u) {
      rb_start_ = from.rb_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      rb_len_ = from.rb_len_;
    }
    if (cached_has_bits & 0x00000008u) {
      mcs_ = from.mcs_;
    }
    if (cached_has_bits & 0x00000010u) {
      cyclic_shift2_ = from.cyclic_shift2_;
    }
    if (cached_has_bits & 0x00000020u) {
      freq_hop_flag_ = from.freq_hop_flag_;
    }
    if (cached_has_bits & 0x00000040u) {
      freq_hop_map_ = from.freq_hop_map_;
    }
    if (cached_has_bits & 0x00000080u) {
      ndi_ = from.ndi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      rv_ = from.rv_;
    }
    if (cached_has_bits & 0x00000200u) {
      harq_pid_ = from.harq_pid_;
    }
    if (cached_has_bits & 0x00000400u) {
      ultx_mode_ = from.ultx_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      tbs_size_ = from.tbs_size_;
    }
    if (cached_has_bits & 0x00001000u) {
      n_srs_ = from.n_srs_;
    }
    if (cached_has_bits & 0x00002000u) {
      res_alloc_ = from.res_alloc_;
    }
    if (cached_has_bits & 0x00004000u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00008000u) {
      dai_ = from.dai_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_dci::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_dci::CopyFrom(const flex_ul_dci& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_dci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_dci::IsInitialized() const {
  return true;
}

void flex_ul_dci::InternalSwap(flex_ul_dci* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ul_dci, dai_)
      + sizeof(flex_ul_dci::dai_)
      - PROTOBUF_FIELD_OFFSET(flex_ul_dci, rnti_)>(
          reinterpret_cast<char*>(&rnti_),
          reinterpret_cast<char*>(&other->rnti_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ul_dci::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_rlc_pdu::InitAsDefaultInstance() {
}
class flex_rlc_pdu::_Internal {
 public:
};

flex_rlc_pdu::flex_rlc_pdu(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rlc_pdu_tb_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_rlc_pdu)
}
flex_rlc_pdu::flex_rlc_pdu(const flex_rlc_pdu& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rlc_pdu_tb_(from.rlc_pdu_tb_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rlc_pdu)
}

void flex_rlc_pdu::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_rlc_pdu_mac_5fprimitives_2eproto.base);
}

flex_rlc_pdu::~flex_rlc_pdu() {
  // @@protoc_insertion_point(destructor:protocol.flex_rlc_pdu)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_rlc_pdu::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_rlc_pdu::ArenaDtor(void* object) {
  flex_rlc_pdu* _this = reinterpret_cast< flex_rlc_pdu* >(object);
  (void)_this;
}
void flex_rlc_pdu::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_rlc_pdu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_rlc_pdu& flex_rlc_pdu::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_rlc_pdu_mac_5fprimitives_2eproto.base);
  return *internal_default_instance();
}


void flex_rlc_pdu::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rlc_pdu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rlc_pdu_tb_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_rlc_pdu::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rlc_pdu_tb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_rlc_pdu::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rlc_pdu)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rlc_pdu_tb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rlc_pdu_tb(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rlc_pdu)
  return target;
}

size_t flex_rlc_pdu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rlc_pdu)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_rlc_pdu_tb rlc_pdu_tb = 1;
  total_size += 1UL * this->_internal_rlc_pdu_tb_size();
  for (const auto& msg : this->rlc_pdu_tb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_rlc_pdu::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rlc_pdu)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rlc_pdu* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_rlc_pdu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rlc_pdu)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rlc_pdu)
    MergeFrom(*source);
  }
}

void flex_rlc_pdu::MergeFrom(const flex_rlc_pdu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rlc_pdu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rlc_pdu_tb_.MergeFrom(from.rlc_pdu_tb_);
}

void flex_rlc_pdu::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rlc_pdu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rlc_pdu::CopyFrom(const flex_rlc_pdu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rlc_pdu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rlc_pdu::IsInitialized() const {
  return true;
}

void flex_rlc_pdu::InternalSwap(flex_rlc_pdu* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rlc_pdu_tb_.InternalSwap(&other->rlc_pdu_tb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_rlc_pdu::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_rlc_pdu_tb::InitAsDefaultInstance() {
}
class flex_rlc_pdu_tb::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_rlc_pdu_tb>()._has_bits_);
  static void set_has_logical_channel_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_rlc_pdu_tb::flex_rlc_pdu_tb(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_rlc_pdu_tb)
}
flex_rlc_pdu_tb::flex_rlc_pdu_tb(const flex_rlc_pdu_tb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&logical_channel_id_, &from.logical_channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&logical_channel_id_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rlc_pdu_tb)
}

void flex_rlc_pdu_tb::SharedCtor() {
  ::memset(&logical_channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&logical_channel_id_)) + sizeof(size_));
}

flex_rlc_pdu_tb::~flex_rlc_pdu_tb() {
  // @@protoc_insertion_point(destructor:protocol.flex_rlc_pdu_tb)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_rlc_pdu_tb::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_rlc_pdu_tb::ArenaDtor(void* object) {
  flex_rlc_pdu_tb* _this = reinterpret_cast< flex_rlc_pdu_tb* >(object);
  (void)_this;
}
void flex_rlc_pdu_tb::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_rlc_pdu_tb::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_rlc_pdu_tb& flex_rlc_pdu_tb::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_rlc_pdu_tb_mac_5fprimitives_2eproto.base);
  return *internal_default_instance();
}


void flex_rlc_pdu_tb::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rlc_pdu_tb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&logical_channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&size_) -
        reinterpret_cast<char*>(&logical_channel_id_)) + sizeof(size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_rlc_pdu_tb::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 logical_channel_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_logical_channel_id(&has_bits);
          logical_channel_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_rlc_pdu_tb::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rlc_pdu_tb)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 logical_channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_logical_channel_id(), target);
  }

  // optional uint32 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rlc_pdu_tb)
  return target;
}

size_t flex_rlc_pdu_tb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rlc_pdu_tb)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 logical_channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_logical_channel_id());
    }

    // optional uint32 size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_rlc_pdu_tb::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rlc_pdu_tb)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rlc_pdu_tb* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_rlc_pdu_tb>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rlc_pdu_tb)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rlc_pdu_tb)
    MergeFrom(*source);
  }
}

void flex_rlc_pdu_tb::MergeFrom(const flex_rlc_pdu_tb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rlc_pdu_tb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logical_channel_id_ = from.logical_channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_rlc_pdu_tb::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rlc_pdu_tb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rlc_pdu_tb::CopyFrom(const flex_rlc_pdu_tb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rlc_pdu_tb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rlc_pdu_tb::IsInitialized() const {
  return true;
}

void flex_rlc_pdu_tb::InternalSwap(flex_rlc_pdu_tb* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_rlc_pdu_tb, size_)
      + sizeof(flex_rlc_pdu_tb::size_)
      - PROTOBUF_FIELD_OFFSET(flex_rlc_pdu_tb, logical_channel_id_)>(
          reinterpret_cast<char*>(&logical_channel_id_),
          reinterpret_cast<char*>(&other->logical_channel_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_rlc_pdu_tb::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_dci* Arena::CreateMaybeMessage< ::protocol::flex_dl_dci >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_dci >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ul_dci* Arena::CreateMaybeMessage< ::protocol::flex_ul_dci >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ul_dci >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_rlc_pdu* Arena::CreateMaybeMessage< ::protocol::flex_rlc_pdu >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_rlc_pdu >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_rlc_pdu_tb* Arena::CreateMaybeMessage< ::protocol::flex_rlc_pdu_tb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_rlc_pdu_tb >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
