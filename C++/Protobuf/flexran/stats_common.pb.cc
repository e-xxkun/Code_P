// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats_common.proto

#include "stats_common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a12_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a20_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a22_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a30_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_csi_a31_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p10_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p11_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p20_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p21_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_flex_dl_csi_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_eutra_measurements_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_eutra_ref_signal_meas_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_mac_sdus_dl_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_msb_cqi_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_paging_info_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_plmn_config_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_pucch_dbm_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ul_cqi_stats_5fcommon_2eproto;
namespace protocol {
class flex_rlc_bsrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_rlc_bsr> _instance;
} _flex_rlc_bsr_default_instance_;
class flex_csi_p10DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_p10> _instance;
} _flex_csi_p10_default_instance_;
class flex_csi_p11DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_p11> _instance;
} _flex_csi_p11_default_instance_;
class flex_csi_p20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_p20> _instance;
} _flex_csi_p20_default_instance_;
class flex_csi_p21DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_p21> _instance;
} _flex_csi_p21_default_instance_;
class flex_csi_a12DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_a12> _instance;
} _flex_csi_a12_default_instance_;
class flex_csi_a22DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_a22> _instance;
} _flex_csi_a22_default_instance_;
class flex_csi_a20DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_a20> _instance;
} _flex_csi_a20_default_instance_;
class flex_csi_a30DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_a30> _instance;
} _flex_csi_a30_default_instance_;
class flex_csi_a31DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_csi_a31> _instance;
} _flex_csi_a31_default_instance_;
class flex_msb_cqiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_msb_cqi> _instance;
} _flex_msb_cqi_default_instance_;
class flex_dl_csiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_csi> _instance;
  const ::protocol::flex_csi_p10* p10csi_;
  const ::protocol::flex_csi_p11* p11csi_;
  const ::protocol::flex_csi_p20* p20csi_;
  const ::protocol::flex_csi_p21* p21csi_;
  const ::protocol::flex_csi_a12* a12csi_;
  const ::protocol::flex_csi_a22* a22csi_;
  const ::protocol::flex_csi_a20* a20csi_;
  const ::protocol::flex_csi_a30* a30csi_;
  const ::protocol::flex_csi_a31* a31csi_;
} _flex_dl_csi_default_instance_;
class flex_dl_cqi_reportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_dl_cqi_report> _instance;
} _flex_dl_cqi_report_default_instance_;
class flex_paging_infoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_paging_info> _instance;
} _flex_paging_info_default_instance_;
class flex_paging_buffer_reportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_paging_buffer_report> _instance;
} _flex_paging_buffer_report_default_instance_;
class flex_ul_cqiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ul_cqi> _instance;
} _flex_ul_cqi_default_instance_;
class flex_ul_cqi_reportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ul_cqi_report> _instance;
} _flex_ul_cqi_report_default_instance_;
class flex_pucch_dbmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_pucch_dbm> _instance;
} _flex_pucch_dbm_default_instance_;
class flex_noise_interference_reportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_noise_interference_report> _instance;
} _flex_noise_interference_report_default_instance_;
class flex_rrc_measurementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_rrc_measurements> _instance;
} _flex_rrc_measurements_default_instance_;
class flex_neigh_cells_measurementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_neigh_cells_measurements> _instance;
} _flex_neigh_cells_measurements_default_instance_;
class flex_eutra_measurementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_eutra_measurements> _instance;
} _flex_eutra_measurements_default_instance_;
class flex_eutra_cgi_measurementsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_eutra_cgi_measurements> _instance;
} _flex_eutra_cgi_measurements_default_instance_;
class flex_cell_global_eutra_idDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_cell_global_eutra_id> _instance;
} _flex_cell_global_eutra_id_default_instance_;
class flex_eutra_ref_signal_measDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_eutra_ref_signal_meas> _instance;
} _flex_eutra_ref_signal_meas_default_instance_;
class flex_pdcp_statsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_pdcp_stats> _instance;
} _flex_pdcp_stats_default_instance_;
class flex_mac_statsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_mac_stats> _instance;
} _flex_mac_stats_default_instance_;
class flex_mac_sdus_dlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_mac_sdus_dl> _instance;
} _flex_mac_sdus_dl_default_instance_;
class flex_gtp_statsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_gtp_stats> _instance;
} _flex_gtp_stats_default_instance_;
class flex_s1ap_ueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_s1ap_ue> _instance;
} _flex_s1ap_ue_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_cell_global_eutra_id_default_instance_;
    new (ptr) ::protocol::flex_cell_global_eutra_id();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_cell_global_eutra_id::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto}, {
      &scc_info_flex_plmn_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_csi_a12_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_a12_default_instance_;
    new (ptr) ::protocol::flex_csi_a12();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_a12::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a12_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_a12_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_csi_a20_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_a20_default_instance_;
    new (ptr) ::protocol::flex_csi_a20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_a20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a20_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_a20_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_csi_a22_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_a22_default_instance_;
    new (ptr) ::protocol::flex_csi_a22();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_a22::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a22_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_a22_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_csi_a30_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_a30_default_instance_;
    new (ptr) ::protocol::flex_csi_a30();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_a30::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_a30_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_a30_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_csi_a31_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_a31_default_instance_;
    new (ptr) ::protocol::flex_csi_a31();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_a31::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_csi_a31_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_csi_a31_stats_5fcommon_2eproto}, {
      &scc_info_flex_msb_cqi_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_csi_p10_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_p10_default_instance_;
    new (ptr) ::protocol::flex_csi_p10();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_p10::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p10_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_p10_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_csi_p11_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_p11_default_instance_;
    new (ptr) ::protocol::flex_csi_p11();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_p11::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p11_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_p11_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_csi_p20_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_p20_default_instance_;
    new (ptr) ::protocol::flex_csi_p20();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_p20::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p20_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_p20_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_csi_p21_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_csi_p21_default_instance_;
    new (ptr) ::protocol::flex_csi_p21();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_csi_p21::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_csi_p21_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_csi_p21_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_dl_cqi_report_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_cqi_report_default_instance_;
    new (ptr) ::protocol::flex_dl_cqi_report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_cqi_report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_dl_cqi_report_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_dl_cqi_report_stats_5fcommon_2eproto}, {
      &scc_info_flex_dl_csi_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_dl_csi_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_dl_csi_default_instance_;
    new (ptr) ::protocol::flex_dl_csi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_dl_csi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_flex_dl_csi_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_flex_dl_csi_stats_5fcommon_2eproto}, {
      &scc_info_flex_csi_p10_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_p11_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_p20_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_p21_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_a12_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_a22_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_a20_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_a30_stats_5fcommon_2eproto.base,
      &scc_info_flex_csi_a31_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_eutra_cgi_measurements_default_instance_;
    new (ptr) ::protocol::flex_eutra_cgi_measurements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_eutra_cgi_measurements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto}, {
      &scc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto.base,
      &scc_info_flex_plmn_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_eutra_measurements_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_eutra_measurements_default_instance_;
    new (ptr) ::protocol::flex_eutra_measurements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_eutra_measurements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_eutra_measurements_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_eutra_measurements_stats_5fcommon_2eproto}, {
      &scc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto.base,
      &scc_info_flex_eutra_ref_signal_meas_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_eutra_ref_signal_meas_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_eutra_ref_signal_meas_default_instance_;
    new (ptr) ::protocol::flex_eutra_ref_signal_meas();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_eutra_ref_signal_meas::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_eutra_ref_signal_meas_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_eutra_ref_signal_meas_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_gtp_stats_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_gtp_stats_default_instance_;
    new (ptr) ::protocol::flex_gtp_stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_gtp_stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_gtp_stats_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_gtp_stats_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_mac_sdus_dl_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_mac_sdus_dl_default_instance_;
    new (ptr) ::protocol::flex_mac_sdus_dl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_mac_sdus_dl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_mac_sdus_dl_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_mac_sdus_dl_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_mac_stats_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_mac_stats_default_instance_;
    new (ptr) ::protocol::flex_mac_stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_mac_stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_mac_stats_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_mac_stats_stats_5fcommon_2eproto}, {
      &scc_info_flex_mac_sdus_dl_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_msb_cqi_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_msb_cqi_default_instance_;
    new (ptr) ::protocol::flex_msb_cqi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_msb_cqi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_msb_cqi_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_msb_cqi_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_neigh_cells_measurements_default_instance_;
    new (ptr) ::protocol::flex_neigh_cells_measurements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_neigh_cells_measurements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto}, {
      &scc_info_flex_eutra_measurements_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_noise_interference_report_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_noise_interference_report_default_instance_;
    new (ptr) ::protocol::flex_noise_interference_report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_noise_interference_report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_noise_interference_report_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_noise_interference_report_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_paging_buffer_report_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_paging_buffer_report_default_instance_;
    new (ptr) ::protocol::flex_paging_buffer_report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_paging_buffer_report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_paging_buffer_report_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_paging_buffer_report_stats_5fcommon_2eproto}, {
      &scc_info_flex_paging_info_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_paging_info_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_paging_info_default_instance_;
    new (ptr) ::protocol::flex_paging_info();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_paging_info::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_paging_info_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_paging_info_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_pdcp_stats_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_pdcp_stats_default_instance_;
    new (ptr) ::protocol::flex_pdcp_stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_pdcp_stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_pdcp_stats_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_pdcp_stats_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_pucch_dbm_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_pucch_dbm_default_instance_;
    new (ptr) ::protocol::flex_pucch_dbm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_pucch_dbm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_pucch_dbm_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_pucch_dbm_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_rlc_bsr_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_rlc_bsr_default_instance_;
    new (ptr) ::protocol::flex_rlc_bsr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_rlc_bsr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_rlc_bsr_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_rlc_bsr_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_rrc_measurements_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_rrc_measurements_default_instance_;
    new (ptr) ::protocol::flex_rrc_measurements();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_rrc_measurements::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_rrc_measurements_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_rrc_measurements_stats_5fcommon_2eproto}, {
      &scc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_s1ap_ue_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_s1ap_ue_default_instance_;
    new (ptr) ::protocol::flex_s1ap_ue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_s1ap_ue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_s1ap_ue_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_s1ap_ue_stats_5fcommon_2eproto}, {
      &scc_info_flex_plmn_config_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_ul_cqi_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ul_cqi_default_instance_;
    new (ptr) ::protocol::flex_ul_cqi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ul_cqi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ul_cqi_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_ul_cqi_stats_5fcommon_2eproto}, {}};

static void InitDefaultsscc_info_flex_ul_cqi_report_stats_5fcommon_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ul_cqi_report_default_instance_;
    new (ptr) ::protocol::flex_ul_cqi_report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ul_cqi_report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ul_cqi_report_stats_5fcommon_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_flex_ul_cqi_report_stats_5fcommon_2eproto}, {
      &scc_info_flex_ul_cqi_stats_5fcommon_2eproto.base,
      &scc_info_flex_pucch_dbm_stats_5fcommon_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stats_5fcommon_2eproto[30];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_stats_5fcommon_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stats_5fcommon_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stats_5fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, lc_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, tx_queue_size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, tx_queue_hol_delay_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, retransmission_queue_size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, retransmission_queue_hol_delay_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rlc_bsr, status_pdu_size_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p10, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p10, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p10, wb_cqi_),
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p11, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p11, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p11, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p11, wb_pmi_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p20, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p20, sb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p20, bandwidth_part_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p20, sb_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p21, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p21, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p21, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p21, wb_pmi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p21, sb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p21, badwidth_part_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_p21, sb_index_),
  ~0u,
  0,
  ~0u,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a12, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a12, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a12, sb_pmi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a22, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a22, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a22, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a22, sb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a22, wb_pmi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a22, sb_pmi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a22, sb_list_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a20, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a20, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a20, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a20, sb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a20, sb_list_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a30, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a30, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a30, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a30, sb_cqi_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a31, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a31, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a31, wb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a31, sb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_csi_a31, wb_pmi_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_msb_cqi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_msb_cqi, sb_cqi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_csi, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_csi, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_csi, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_csi, serv_cell_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_csi, ri_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_csi, type_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, p10csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, p11csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, p20csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, p21csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, a12csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, a22csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, a20csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, a30csi_),
  offsetof(::protocol::flex_dl_csiDefaultTypeInternal, a31csi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_csi, report_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_cqi_report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_cqi_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_cqi_report, sfn_sn_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_dl_cqi_report, csi_report_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_info, paging_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_info, paging_message_size_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_info, paging_subframe_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_info, carrier_index_),
  0,
  1,
  2,
  3,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_buffer_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_paging_buffer_report, paging_info_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi, type_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi, sinr_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi, serv_cell_index_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi_report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi_report, sfn_sn_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi_report, cqi_meas_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ul_cqi_report, pucch_dbm_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pucch_dbm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pucch_dbm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pucch_dbm, p0_pucch_dbm_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pucch_dbm, serv_cell_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pucch_dbm, p0_pucch_updated_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_noise_interference_report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_noise_interference_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_noise_interference_report, sfn_sf_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_noise_interference_report, rip_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_noise_interference_report, tnp_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_noise_interference_report, p0_nominal_pucch_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_measurements, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_measurements, measid_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_measurements, pcell_rsrp_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_measurements, pcell_rsrq_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_rrc_measurements, neigh_meas_),
  1,
  2,
  3,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_neigh_cells_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_neigh_cells_measurements, eutra_meas_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_measurements, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_measurements, phys_cell_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_measurements, cgi_meas_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_measurements, meas_result_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_cgi_measurements, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_cgi_measurements, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_cgi_measurements, cgi_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_cgi_measurements, tracking_area_code_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_cgi_measurements, plmn_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_global_eutra_id, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_global_eutra_id, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_global_eutra_id, plmn_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_global_eutra_id, cell_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_ref_signal_meas, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_ref_signal_meas, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_ref_signal_meas, rsrp_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_eutra_ref_signal_meas, rsrq_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_tx_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_tx_bytes_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_tx_sn_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_tx_w_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_tx_bytes_w_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_tx_aiat_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_tx_aiat_w_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_bytes_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_sn_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_w_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_bytes_w_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_aiat_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_aiat_w_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, pkt_rx_oo_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_pdcp_stats, sfn_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  15,
  14,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, tbs_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, tbs_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, prb_retx_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, prb_retx_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, prb_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, prb_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, mcs1_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, mcs2_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, mcs1_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, mcs2_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_bytes_sdus_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_bytes_sdus_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_prb_retx_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_prb_retx_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_prb_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_prb_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_pdu_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_pdu_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_tbs_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, total_tbs_ul_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, mac_sdus_dl_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_stats, harq_round_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  20,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_sdus_dl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_sdus_dl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_sdus_dl, sdu_length_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_mac_sdus_dl, lcid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gtp_stats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gtp_stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gtp_stats, e_rab_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gtp_stats, teid_enb_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gtp_stats, addr_enb_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gtp_stats, teid_sgw_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_gtp_stats, addr_sgw_),
  2,
  3,
  0,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_ue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_ue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_ue, mme_s1_ip_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_ue, enb_ue_s1ap_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_ue, mme_ue_s1ap_id_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_s1ap_ue, selected_plmn_),
  0,
  2,
  3,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::protocol::flex_rlc_bsr)},
  { 17, 23, sizeof(::protocol::flex_csi_p10)},
  { 24, 31, sizeof(::protocol::flex_csi_p11)},
  { 33, 42, sizeof(::protocol::flex_csi_p20)},
  { 46, 56, sizeof(::protocol::flex_csi_p21)},
  { 61, -1, sizeof(::protocol::flex_csi_a12)},
  { 68, 78, sizeof(::protocol::flex_csi_a22)},
  { 83, 91, sizeof(::protocol::flex_csi_a20)},
  { 94, 101, sizeof(::protocol::flex_csi_a30)},
  { 103, 111, sizeof(::protocol::flex_csi_a31)},
  { 114, -1, sizeof(::protocol::flex_msb_cqi)},
  { 120, 138, sizeof(::protocol::flex_dl_csi)},
  { 150, 157, sizeof(::protocol::flex_dl_cqi_report)},
  { 159, 168, sizeof(::protocol::flex_paging_info)},
  { 172, -1, sizeof(::protocol::flex_paging_buffer_report)},
  { 178, 186, sizeof(::protocol::flex_ul_cqi)},
  { 189, 197, sizeof(::protocol::flex_ul_cqi_report)},
  { 200, 208, sizeof(::protocol::flex_pucch_dbm)},
  { 211, 220, sizeof(::protocol::flex_noise_interference_report)},
  { 224, 233, sizeof(::protocol::flex_rrc_measurements)},
  { 237, -1, sizeof(::protocol::flex_neigh_cells_measurements)},
  { 243, 251, sizeof(::protocol::flex_eutra_measurements)},
  { 254, 262, sizeof(::protocol::flex_eutra_cgi_measurements)},
  { 265, 272, sizeof(::protocol::flex_cell_global_eutra_id)},
  { 274, 281, sizeof(::protocol::flex_eutra_ref_signal_meas)},
  { 283, 304, sizeof(::protocol::flex_pdcp_stats)},
  { 320, 347, sizeof(::protocol::flex_mac_stats)},
  { 369, 376, sizeof(::protocol::flex_mac_sdus_dl)},
  { 378, 388, sizeof(::protocol::flex_gtp_stats)},
  { 393, 402, sizeof(::protocol::flex_s1ap_ue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_rlc_bsr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_p10_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_p11_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_p20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_p21_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_a12_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_a22_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_a20_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_a30_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_csi_a31_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_msb_cqi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_csi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_dl_cqi_report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_paging_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_paging_buffer_report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ul_cqi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ul_cqi_report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_pucch_dbm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_noise_interference_report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_rrc_measurements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_neigh_cells_measurements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_eutra_measurements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_eutra_cgi_measurements_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_cell_global_eutra_id_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_eutra_ref_signal_meas_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_pdcp_stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_mac_stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_mac_sdus_dl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_gtp_stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_s1ap_ue_default_instance_),
};

const char descriptor_table_protodef_stats_5fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022stats_common.proto\022\010protocol\032\023config_c"
  "ommon.proto\"\264\001\n\014flex_rlc_bsr\022\r\n\005lc_id\030\001 "
  "\001(\r\022\025\n\rtx_queue_size\030\002 \001(\r\022\032\n\022tx_queue_h"
  "ol_delay\030\003 \001(\r\022!\n\031retransmission_queue_s"
  "ize\030\004 \001(\r\022&\n\036retransmission_queue_hol_de"
  "lay\030\005 \001(\r\022\027\n\017status_pdu_size\030\006 \001(\r\"\036\n\014fl"
  "ex_csi_p10\022\016\n\006wb_cqi\030\001 \001(\r\".\n\014flex_csi_p"
  "11\022\016\n\006wb_cqi\030\001 \003(\r\022\016\n\006wb_pmi\030\002 \001(\r\"^\n\014fl"
  "ex_csi_p20\022\016\n\006wb_cqi\030\001 \001(\r\022\016\n\006sb_cqi\030\002 \001"
  "(\r\022\034\n\024bandwidth_part_index\030\003 \001(\r\022\020\n\010sb_i"
  "ndex\030\004 \001(\r\"m\n\014flex_csi_p21\022\016\n\006wb_cqi\030\001 \003"
  "(\r\022\016\n\006wb_pmi\030\002 \001(\r\022\016\n\006sb_cqi\030\003 \003(\r\022\033\n\023ba"
  "dwidth_part_index\030\004 \001(\r\022\020\n\010sb_index\030\005 \001("
  "\r\".\n\014flex_csi_a12\022\016\n\006wb_cqi\030\001 \003(\r\022\016\n\006sb_"
  "pmi\030\002 \003(\r\"_\n\014flex_csi_a22\022\016\n\006wb_cqi\030\001 \003("
  "\r\022\016\n\006sb_cqi\030\002 \003(\r\022\016\n\006wb_pmi\030\003 \001(\r\022\016\n\006sb_"
  "pmi\030\004 \001(\r\022\017\n\007sb_list\030\005 \003(\r\"\?\n\014flex_csi_a"
  "20\022\016\n\006wb_cqi\030\001 \001(\r\022\016\n\006sb_cqi\030\002 \001(\r\022\017\n\007sb"
  "_list\030\003 \003(\r\".\n\014flex_csi_a30\022\016\n\006wb_cqi\030\001 "
  "\001(\r\022\016\n\006sb_cqi\030\002 \003(\r\"V\n\014flex_csi_a31\022\016\n\006w"
  "b_cqi\030\001 \003(\r\022&\n\006sb_cqi\030\002 \003(\0132\026.protocol.f"
  "lex_msb_cqi\022\016\n\006wb_pmi\030\003 \001(\r\"\036\n\014flex_msb_"
  "cqi\022\016\n\006sb_cqi\030\001 \003(\r\"\335\003\n\013flex_dl_csi\022\027\n\017s"
  "erv_cell_index\030\001 \001(\r\022\n\n\002ri\030\002 \001(\r\022%\n\004type"
  "\030\003 \001(\0162\027.protocol.flex_csi_type\022(\n\006p10cs"
  "i\030\004 \001(\0132\026.protocol.flex_csi_p10H\000\022(\n\006p11"
  "csi\030\005 \001(\0132\026.protocol.flex_csi_p11H\000\022(\n\006p"
  "20csi\030\006 \001(\0132\026.protocol.flex_csi_p20H\000\022(\n"
  "\006p21csi\030\007 \001(\0132\026.protocol.flex_csi_p21H\000\022"
  "(\n\006a12csi\030\010 \001(\0132\026.protocol.flex_csi_a12H"
  "\000\022(\n\006a22csi\030\t \001(\0132\026.protocol.flex_csi_a2"
  "2H\000\022(\n\006a20csi\030\n \001(\0132\026.protocol.flex_csi_"
  "a20H\000\022(\n\006a30csi\030\013 \001(\0132\026.protocol.flex_cs"
  "i_a30H\000\022(\n\006a31csi\030\014 \001(\0132\026.protocol.flex_"
  "csi_a31H\000B\010\n\006report\"O\n\022flex_dl_cqi_repor"
  "t\022\016\n\006sfn_sn\030\001 \001(\r\022)\n\ncsi_report\030\002 \003(\0132\025."
  "protocol.flex_dl_csi\"u\n\020flex_paging_info"
  "\022\024\n\014paging_index\030\001 \001(\r\022\033\n\023paging_message"
  "_size\030\002 \001(\r\022\027\n\017paging_subframe\030\003 \001(\r\022\025\n\r"
  "carrier_index\030\004 \001(\r\"L\n\031flex_paging_buffe"
  "r_report\022/\n\013paging_info\030\001 \003(\0132\032.protocol"
  ".flex_paging_info\"^\n\013flex_ul_cqi\022(\n\004type"
  "\030\001 \001(\0162\032.protocol.flex_ul_cqi_type\022\014\n\004si"
  "nr\030\002 \003(\r\022\027\n\017serv_cell_index\030\003 \001(\r\"z\n\022fle"
  "x_ul_cqi_report\022\016\n\006sfn_sn\030\001 \001(\r\022\'\n\010cqi_m"
  "eas\030\002 \003(\0132\025.protocol.flex_ul_cqi\022+\n\tpucc"
  "h_dbm\030\003 \003(\0132\030.protocol.flex_pucch_dbm\"Y\n"
  "\016flex_pucch_dbm\022\024\n\014p0_pucch_dbm\030\001 \001(\005\022\027\n"
  "\017serv_cell_index\030\002 \001(\r\022\030\n\020p0_pucch_updat"
  "ed\030\003 \001(\r\"d\n\036flex_noise_interference_repo"
  "rt\022\016\n\006sfn_sf\030\001 \001(\r\022\013\n\003rip\030\002 \001(\r\022\013\n\003tnp\030\003"
  " \001(\r\022\030\n\020p0_nominal_pucch\030\004 \001(\005\"\214\001\n\025flex_"
  "rrc_measurements\022\016\n\006measid\030\001 \001(\005\022\022\n\npcel"
  "l_rsrp\030\002 \001(\005\022\022\n\npcell_rsrq\030\003 \001(\005\022;\n\nneig"
  "h_meas\030\004 \001(\0132\'.protocol.flex_neigh_cells"
  "_measurements\"V\n\035flex_neigh_cells_measur"
  "ements\0225\n\neutra_meas\030\001 \003(\0132!.protocol.fl"
  "ex_eutra_measurements\"\243\001\n\027flex_eutra_mea"
  "surements\022\024\n\014phys_cell_id\030\001 \001(\005\0227\n\010cgi_m"
  "eas\030\002 \001(\0132%.protocol.flex_eutra_cgi_meas"
  "urements\0229\n\013meas_result\030\003 \001(\0132$.protocol"
  ".flex_eutra_ref_signal_meas\"\216\001\n\033flex_eut"
  "ra_cgi_measurements\0220\n\003cgi\030\001 \001(\0132#.proto"
  "col.flex_cell_global_eutra_id\022\032\n\022trackin"
  "g_area_code\030\002 \001(\r\022!\n\004plmn\030\003 \003(\0132\023.protoc"
  "ol.flex_plmn\"O\n\031flex_cell_global_eutra_i"
  "d\022!\n\004plmn\030\001 \001(\0132\023.protocol.flex_plmn\022\017\n\007"
  "cell_id\030\002 \001(\r\"8\n\032flex_eutra_ref_signal_m"
  "eas\022\014\n\004rsrp\030\001 \001(\005\022\014\n\004rsrq\030\002 \001(\005\"\317\002\n\017flex"
  "_pdcp_stats\022\016\n\006pkt_tx\030\001 \001(\r\022\024\n\014pkt_tx_by"
  "tes\030\002 \001(\r\022\021\n\tpkt_tx_sn\030\003 \001(\r\022\020\n\010pkt_tx_w"
  "\030\004 \001(\r\022\026\n\016pkt_tx_bytes_w\030\005 \001(\r\022\023\n\013pkt_tx"
  "_aiat\030\007 \001(\r\022\025\n\rpkt_tx_aiat_w\030\010 \001(\r\022\016\n\006pk"
  "t_rx\030\t \001(\r\022\024\n\014pkt_rx_bytes\030\n \001(\r\022\021\n\tpkt_"
  "rx_sn\030\013 \001(\r\022\020\n\010pkt_rx_w\030\014 \001(\r\022\026\n\016pkt_rx_"
  "bytes_w\030\r \001(\r\022\023\n\013pkt_rx_aiat\030\016 \001(\r\022\025\n\rpk"
  "t_rx_aiat_w\030\017 \001(\r\022\021\n\tpkt_rx_oo\030\020 \001(\r\022\013\n\003"
  "sfn\030\021 \001(\004\"\367\003\n\016flex_mac_stats\022\016\n\006tbs_dl\030\001"
  " \001(\r\022\016\n\006tbs_ul\030\002 \001(\r\022\023\n\013prb_retx_dl\030\003 \001("
  "\r\022\023\n\013prb_retx_ul\030\004 \001(\r\022\016\n\006prb_dl\030\005 \001(\r\022\016"
  "\n\006prb_ul\030\006 \001(\r\022\017\n\007mcs1_dl\030\007 \001(\r\022\017\n\007mcs2_"
  "dl\030\010 \001(\r\022\017\n\007mcs1_ul\030\t \001(\r\022\017\n\007mcs2_ul\030\n \001"
  "(\r\022\033\n\023total_bytes_sdus_ul\030\013 \001(\r\022\033\n\023total"
  "_bytes_sdus_dl\030\014 \001(\r\022\031\n\021total_prb_retx_d"
  "l\030\r \001(\r\022\031\n\021total_prb_retx_ul\030\016 \001(\r\022\024\n\014to"
  "tal_prb_dl\030\017 \001(\r\022\024\n\014total_prb_ul\030\020 \001(\r\022\024"
  "\n\014total_pdu_dl\030\021 \001(\r\022\024\n\014total_pdu_ul\030\022 \001"
  "(\r\022\024\n\014total_tbs_dl\030\023 \001(\r\022\024\n\014total_tbs_ul"
  "\030\024 \001(\r\022/\n\013mac_sdus_dl\030\025 \003(\0132\032.protocol.f"
  "lex_mac_sdus_dl\022\022\n\nharq_round\030\026 \001(\r\"4\n\020f"
  "lex_mac_sdus_dl\022\022\n\nsdu_length\030\001 \001(\r\022\014\n\004l"
  "cid\030\002 \001(\r\"j\n\016flex_gtp_stats\022\020\n\010e_rab_id\030"
  "\001 \001(\r\022\020\n\010teid_enb\030\002 \001(\r\022\020\n\010addr_enb\030\003 \001("
  "\t\022\020\n\010teid_sgw\030\004 \001(\r\022\020\n\010addr_sgw\030\005 \001(\t\"}\n"
  "\014flex_s1ap_ue\022\021\n\tmme_s1_ip\030\001 \001(\t\022\026\n\016enb_"
  "ue_s1ap_id\030\002 \001(\r\022\026\n\016mme_ue_s1ap_id\030\003 \001(\r"
  "\022*\n\rselected_plmn\030\004 \001(\0132\023.protocol.flex_"
  "plmn*K\n\014flex_ce_type\022\r\n\tFLPCET_TA\020\001\022\016\n\nF"
  "LPCET_DRX\020\002\022\r\n\tFLPCET_CR\020\004\022\r\n\tFLPCET_CA\020"
  "\010*\237\001\n\rflex_csi_type\022\016\n\nFLCSIT_P10\020\000\022\016\n\nF"
  "LCSIT_P11\020\001\022\016\n\nFLCSIT_P20\020\002\022\016\n\nFLCSIT_P2"
  "1\020\003\022\016\n\nFLCSIT_A12\020\004\022\016\n\nFLCSIT_A22\020\005\022\016\n\nF"
  "LCSIT_A20\020\006\022\016\n\nFLCSIT_A30\020\007\022\016\n\nFLCSIT_A3"
  "1\020\010*i\n\020flex_ul_cqi_type\022\r\n\tFLUCT_SRS\020\000\022\017"
  "\n\013FLUCT_PUSCH\020\001\022\021\n\rFLUCT_PUCCH_1\020\002\022\021\n\rFL"
  "UCT_PUCCH_2\020\003\022\017\n\013FLUCT_PRACH\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stats_5fcommon_2eproto_deps[1] = {
  &::descriptor_table_config_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stats_5fcommon_2eproto_sccs[30] = {
  &scc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_a12_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_a20_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_a22_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_a30_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_a31_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_p10_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_p11_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_p20_stats_5fcommon_2eproto.base,
  &scc_info_flex_csi_p21_stats_5fcommon_2eproto.base,
  &scc_info_flex_dl_cqi_report_stats_5fcommon_2eproto.base,
  &scc_info_flex_dl_csi_stats_5fcommon_2eproto.base,
  &scc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto.base,
  &scc_info_flex_eutra_measurements_stats_5fcommon_2eproto.base,
  &scc_info_flex_eutra_ref_signal_meas_stats_5fcommon_2eproto.base,
  &scc_info_flex_gtp_stats_stats_5fcommon_2eproto.base,
  &scc_info_flex_mac_sdus_dl_stats_5fcommon_2eproto.base,
  &scc_info_flex_mac_stats_stats_5fcommon_2eproto.base,
  &scc_info_flex_msb_cqi_stats_5fcommon_2eproto.base,
  &scc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto.base,
  &scc_info_flex_noise_interference_report_stats_5fcommon_2eproto.base,
  &scc_info_flex_paging_buffer_report_stats_5fcommon_2eproto.base,
  &scc_info_flex_paging_info_stats_5fcommon_2eproto.base,
  &scc_info_flex_pdcp_stats_stats_5fcommon_2eproto.base,
  &scc_info_flex_pucch_dbm_stats_5fcommon_2eproto.base,
  &scc_info_flex_rlc_bsr_stats_5fcommon_2eproto.base,
  &scc_info_flex_rrc_measurements_stats_5fcommon_2eproto.base,
  &scc_info_flex_s1ap_ue_stats_5fcommon_2eproto.base,
  &scc_info_flex_ul_cqi_stats_5fcommon_2eproto.base,
  &scc_info_flex_ul_cqi_report_stats_5fcommon_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stats_5fcommon_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stats_5fcommon_2eproto = {
  false, false, descriptor_table_protodef_stats_5fcommon_2eproto, "stats_common.proto", 4230,
  &descriptor_table_stats_5fcommon_2eproto_once, descriptor_table_stats_5fcommon_2eproto_sccs, descriptor_table_stats_5fcommon_2eproto_deps, 30, 1,
  schemas, file_default_instances, TableStruct_stats_5fcommon_2eproto::offsets,
  file_level_metadata_stats_5fcommon_2eproto, 30, file_level_enum_descriptors_stats_5fcommon_2eproto, file_level_service_descriptors_stats_5fcommon_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stats_5fcommon_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stats_5fcommon_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ce_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_5fcommon_2eproto);
  return file_level_enum_descriptors_stats_5fcommon_2eproto[0];
}
bool flex_ce_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_csi_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_5fcommon_2eproto);
  return file_level_enum_descriptors_stats_5fcommon_2eproto[1];
}
bool flex_csi_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ul_cqi_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_5fcommon_2eproto);
  return file_level_enum_descriptors_stats_5fcommon_2eproto[2];
}
bool flex_ul_cqi_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void flex_rlc_bsr::InitAsDefaultInstance() {
}
class flex_rlc_bsr::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_rlc_bsr>()._has_bits_);
  static void set_has_lc_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tx_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tx_queue_hol_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_retransmission_queue_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_retransmission_queue_hol_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_status_pdu_size(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

flex_rlc_bsr::flex_rlc_bsr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_rlc_bsr)
}
flex_rlc_bsr::flex_rlc_bsr(const flex_rlc_bsr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lc_id_, &from.lc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_pdu_size_) -
    reinterpret_cast<char*>(&lc_id_)) + sizeof(status_pdu_size_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rlc_bsr)
}

void flex_rlc_bsr::SharedCtor() {
  ::memset(&lc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_pdu_size_) -
      reinterpret_cast<char*>(&lc_id_)) + sizeof(status_pdu_size_));
}

flex_rlc_bsr::~flex_rlc_bsr() {
  // @@protoc_insertion_point(destructor:protocol.flex_rlc_bsr)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_rlc_bsr::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_rlc_bsr::ArenaDtor(void* object) {
  flex_rlc_bsr* _this = reinterpret_cast< flex_rlc_bsr* >(object);
  (void)_this;
}
void flex_rlc_bsr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_rlc_bsr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_rlc_bsr& flex_rlc_bsr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_rlc_bsr_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_rlc_bsr::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rlc_bsr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lc_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_pdu_size_) -
        reinterpret_cast<char*>(&lc_id_)) + sizeof(status_pdu_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_rlc_bsr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 lc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_lc_id(&has_bits);
          lc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tx_queue_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tx_queue_size(&has_bits);
          tx_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tx_queue_hol_delay = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tx_queue_hol_delay(&has_bits);
          tx_queue_hol_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retransmission_queue_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_retransmission_queue_size(&has_bits);
          retransmission_queue_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 retransmission_queue_hol_delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_retransmission_queue_hol_delay(&has_bits);
          retransmission_queue_hol_delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 status_pdu_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status_pdu_size(&has_bits);
          status_pdu_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_rlc_bsr::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rlc_bsr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 lc_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_lc_id(), target);
  }

  // optional uint32 tx_queue_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tx_queue_size(), target);
  }

  // optional uint32 tx_queue_hol_delay = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tx_queue_hol_delay(), target);
  }

  // optional uint32 retransmission_queue_size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_retransmission_queue_size(), target);
  }

  // optional uint32 retransmission_queue_hol_delay = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_retransmission_queue_hol_delay(), target);
  }

  // optional uint32 status_pdu_size = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status_pdu_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rlc_bsr)
  return target;
}

size_t flex_rlc_bsr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rlc_bsr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 lc_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lc_id());
    }

    // optional uint32 tx_queue_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tx_queue_size());
    }

    // optional uint32 tx_queue_hol_delay = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tx_queue_hol_delay());
    }

    // optional uint32 retransmission_queue_size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retransmission_queue_size());
    }

    // optional uint32 retransmission_queue_hol_delay = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_retransmission_queue_hol_delay());
    }

    // optional uint32 status_pdu_size = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_status_pdu_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_rlc_bsr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rlc_bsr)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rlc_bsr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_rlc_bsr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rlc_bsr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rlc_bsr)
    MergeFrom(*source);
  }
}

void flex_rlc_bsr::MergeFrom(const flex_rlc_bsr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rlc_bsr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lc_id_ = from.lc_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tx_queue_size_ = from.tx_queue_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      tx_queue_hol_delay_ = from.tx_queue_hol_delay_;
    }
    if (cached_has_bits & 0x00000008u) {
      retransmission_queue_size_ = from.retransmission_queue_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      retransmission_queue_hol_delay_ = from.retransmission_queue_hol_delay_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_pdu_size_ = from.status_pdu_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_rlc_bsr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rlc_bsr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rlc_bsr::CopyFrom(const flex_rlc_bsr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rlc_bsr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rlc_bsr::IsInitialized() const {
  return true;
}

void flex_rlc_bsr::InternalSwap(flex_rlc_bsr* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_rlc_bsr, status_pdu_size_)
      + sizeof(flex_rlc_bsr::status_pdu_size_)
      - PROTOBUF_FIELD_OFFSET(flex_rlc_bsr, lc_id_)>(
          reinterpret_cast<char*>(&lc_id_),
          reinterpret_cast<char*>(&other->lc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_rlc_bsr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_p10::InitAsDefaultInstance() {
}
class flex_csi_p10::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_p10>()._has_bits_);
  static void set_has_wb_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_csi_p10::flex_csi_p10(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_p10)
}
flex_csi_p10::flex_csi_p10(const flex_csi_p10& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wb_cqi_ = from.wb_cqi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p10)
}

void flex_csi_p10::SharedCtor() {
  wb_cqi_ = 0u;
}

flex_csi_p10::~flex_csi_p10() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p10)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_p10::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_p10::ArenaDtor(void* object) {
  flex_csi_p10* _this = reinterpret_cast< flex_csi_p10* >(object);
  (void)_this;
}
void flex_csi_p10::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_p10::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_p10& flex_csi_p10::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_p10_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_p10::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wb_cqi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_p10::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wb_cqi(&has_bits);
          wb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_p10::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p10)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p10)
  return target;
}

size_t flex_csi_p10::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p10)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 wb_cqi = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wb_cqi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_p10::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p10)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p10* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_p10>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p10)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p10)
    MergeFrom(*source);
  }
}

void flex_csi_p10::MergeFrom(const flex_csi_p10& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p10)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_wb_cqi()) {
    _internal_set_wb_cqi(from._internal_wb_cqi());
  }
}

void flex_csi_p10::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p10::CopyFrom(const flex_csi_p10& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p10)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p10::IsInitialized() const {
  return true;
}

void flex_csi_p10::InternalSwap(flex_csi_p10* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(wb_cqi_, other->wb_cqi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_p10::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_p11::InitAsDefaultInstance() {
}
class flex_csi_p11::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_p11>()._has_bits_);
  static void set_has_wb_pmi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_csi_p11::flex_csi_p11(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wb_cqi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_p11)
}
flex_csi_p11::flex_csi_p11(const flex_csi_p11& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      wb_cqi_(from.wb_cqi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wb_pmi_ = from.wb_pmi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p11)
}

void flex_csi_p11::SharedCtor() {
  wb_pmi_ = 0u;
}

flex_csi_p11::~flex_csi_p11() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p11)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_p11::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_p11::ArenaDtor(void* object) {
  flex_csi_p11* _this = reinterpret_cast< flex_csi_p11* >(object);
  (void)_this;
}
void flex_csi_p11::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_p11::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_p11& flex_csi_p11::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_p11_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_p11::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wb_cqi_.Clear();
  wb_pmi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_p11::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wb_pmi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wb_pmi(&has_bits);
          wb_pmi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_p11::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p11)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->_internal_wb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wb_pmi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p11)
  return target;
}

size_t flex_csi_p11::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p11)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wb_cqi_size());
    total_size += data_size;
  }

  // optional uint32 wb_pmi = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wb_pmi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_p11::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p11)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p11* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_p11>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p11)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p11)
    MergeFrom(*source);
  }
}

void flex_csi_p11::MergeFrom(const flex_csi_p11& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p11)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  if (from._internal_has_wb_pmi()) {
    _internal_set_wb_pmi(from._internal_wb_pmi());
  }
}

void flex_csi_p11::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p11::CopyFrom(const flex_csi_p11& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p11)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p11::IsInitialized() const {
  return true;
}

void flex_csi_p11::InternalSwap(flex_csi_p11* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  swap(wb_pmi_, other->wb_pmi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_p11::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_p20::InitAsDefaultInstance() {
}
class flex_csi_p20::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_p20>()._has_bits_);
  static void set_has_wb_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sb_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bandwidth_part_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sb_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_csi_p20::flex_csi_p20(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_p20)
}
flex_csi_p20::flex_csi_p20(const flex_csi_p20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wb_cqi_, &from.wb_cqi_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_index_) -
    reinterpret_cast<char*>(&wb_cqi_)) + sizeof(sb_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p20)
}

void flex_csi_p20::SharedCtor() {
  ::memset(&wb_cqi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_index_) -
      reinterpret_cast<char*>(&wb_cqi_)) + sizeof(sb_index_));
}

flex_csi_p20::~flex_csi_p20() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p20)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_p20::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_p20::ArenaDtor(void* object) {
  flex_csi_p20* _this = reinterpret_cast< flex_csi_p20* >(object);
  (void)_this;
}
void flex_csi_p20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_p20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_p20& flex_csi_p20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_p20_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_p20::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&wb_cqi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sb_index_) -
        reinterpret_cast<char*>(&wb_cqi_)) + sizeof(sb_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_p20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wb_cqi(&has_bits);
          wb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sb_cqi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sb_cqi(&has_bits);
          sb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 bandwidth_part_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_bandwidth_part_index(&has_bits);
          bandwidth_part_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sb_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sb_index(&has_bits);
          sb_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_p20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(), target);
  }

  // optional uint32 sb_cqi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sb_cqi(), target);
  }

  // optional uint32 bandwidth_part_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bandwidth_part_index(), target);
  }

  // optional uint32 sb_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sb_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p20)
  return target;
}

size_t flex_csi_p20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 wb_cqi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wb_cqi());
    }

    // optional uint32 sb_cqi = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sb_cqi());
    }

    // optional uint32 bandwidth_part_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_bandwidth_part_index());
    }

    // optional uint32 sb_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sb_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_p20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p20)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_p20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p20)
    MergeFrom(*source);
  }
}

void flex_csi_p20::MergeFrom(const flex_csi_p20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      wb_cqi_ = from.wb_cqi_;
    }
    if (cached_has_bits & 0x00000002u) {
      sb_cqi_ = from.sb_cqi_;
    }
    if (cached_has_bits & 0x00000004u) {
      bandwidth_part_index_ = from.bandwidth_part_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      sb_index_ = from.sb_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_p20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p20::CopyFrom(const flex_csi_p20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p20::IsInitialized() const {
  return true;
}

void flex_csi_p20::InternalSwap(flex_csi_p20* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_csi_p20, sb_index_)
      + sizeof(flex_csi_p20::sb_index_)
      - PROTOBUF_FIELD_OFFSET(flex_csi_p20, wb_cqi_)>(
          reinterpret_cast<char*>(&wb_cqi_),
          reinterpret_cast<char*>(&other->wb_cqi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_p20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_p21::InitAsDefaultInstance() {
}
class flex_csi_p21::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_p21>()._has_bits_);
  static void set_has_wb_pmi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_badwidth_part_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sb_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

flex_csi_p21::flex_csi_p21(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wb_cqi_(arena),
  sb_cqi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_p21)
}
flex_csi_p21::flex_csi_p21(const flex_csi_p21& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      wb_cqi_(from.wb_cqi_),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wb_pmi_, &from.wb_pmi_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_index_) -
    reinterpret_cast<char*>(&wb_pmi_)) + sizeof(sb_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_p21)
}

void flex_csi_p21::SharedCtor() {
  ::memset(&wb_pmi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_index_) -
      reinterpret_cast<char*>(&wb_pmi_)) + sizeof(sb_index_));
}

flex_csi_p21::~flex_csi_p21() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_p21)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_p21::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_p21::ArenaDtor(void* object) {
  flex_csi_p21* _this = reinterpret_cast< flex_csi_p21* >(object);
  (void)_this;
}
void flex_csi_p21::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_p21::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_p21& flex_csi_p21::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_p21_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_p21::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_p21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wb_cqi_.Clear();
  sb_cqi_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&wb_pmi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sb_index_) -
        reinterpret_cast<char*>(&wb_pmi_)) + sizeof(sb_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_p21::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wb_pmi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_wb_pmi(&has_bits);
          wb_pmi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sb_cqi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 badwidth_part_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_badwidth_part_index(&has_bits);
          badwidth_part_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sb_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sb_index(&has_bits);
          sb_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_p21::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_p21)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->_internal_wb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_wb_pmi(), target);
  }

  // repeated uint32 sb_cqi = 3;
  for (int i = 0, n = this->_internal_sb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sb_cqi(i), target);
  }

  // optional uint32 badwidth_part_index = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_badwidth_part_index(), target);
  }

  // optional uint32 sb_index = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sb_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_p21)
  return target;
}

size_t flex_csi_p21::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_p21)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_cqi = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sb_cqi_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 wb_pmi = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wb_pmi());
    }

    // optional uint32 badwidth_part_index = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_badwidth_part_index());
    }

    // optional uint32 sb_index = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sb_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_p21::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_p21)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_p21* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_p21>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_p21)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_p21)
    MergeFrom(*source);
  }
}

void flex_csi_p21::MergeFrom(const flex_csi_p21& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_p21)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_cqi_.MergeFrom(from.sb_cqi_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      wb_pmi_ = from.wb_pmi_;
    }
    if (cached_has_bits & 0x00000002u) {
      badwidth_part_index_ = from.badwidth_part_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      sb_index_ = from.sb_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_p21::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_p21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_p21::CopyFrom(const flex_csi_p21& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_p21)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_p21::IsInitialized() const {
  return true;
}

void flex_csi_p21::InternalSwap(flex_csi_p21* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_csi_p21, sb_index_)
      + sizeof(flex_csi_p21::sb_index_)
      - PROTOBUF_FIELD_OFFSET(flex_csi_p21, wb_pmi_)>(
          reinterpret_cast<char*>(&wb_pmi_),
          reinterpret_cast<char*>(&other->wb_pmi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_p21::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_a12::InitAsDefaultInstance() {
}
class flex_csi_a12::_Internal {
 public:
};

flex_csi_a12::flex_csi_a12(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wb_cqi_(arena),
  sb_pmi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_a12)
}
flex_csi_a12::flex_csi_a12(const flex_csi_a12& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wb_cqi_(from.wb_cqi_),
      sb_pmi_(from.sb_pmi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a12)
}

void flex_csi_a12::SharedCtor() {
}

flex_csi_a12::~flex_csi_a12() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a12)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_a12::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_a12::ArenaDtor(void* object) {
  flex_csi_a12* _this = reinterpret_cast< flex_csi_a12* >(object);
  (void)_this;
}
void flex_csi_a12::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_a12::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_a12& flex_csi_a12::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_a12_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_a12::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wb_cqi_.Clear();
  sb_pmi_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_a12::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sb_pmi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sb_pmi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sb_pmi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_a12::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a12)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->_internal_wb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(i), target);
  }

  // repeated uint32 sb_pmi = 2;
  for (int i = 0, n = this->_internal_sb_pmi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sb_pmi(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a12)
  return target;
}

size_t flex_csi_a12::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a12)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_pmi = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sb_pmi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sb_pmi_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_a12::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a12)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a12* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_a12>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a12)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a12)
    MergeFrom(*source);
  }
}

void flex_csi_a12::MergeFrom(const flex_csi_a12& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a12)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_pmi_.MergeFrom(from.sb_pmi_);
}

void flex_csi_a12::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a12::CopyFrom(const flex_csi_a12& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a12)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a12::IsInitialized() const {
  return true;
}

void flex_csi_a12::InternalSwap(flex_csi_a12* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_pmi_.InternalSwap(&other->sb_pmi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_a12::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_a22::InitAsDefaultInstance() {
}
class flex_csi_a22::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_a22>()._has_bits_);
  static void set_has_wb_pmi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sb_pmi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_csi_a22::flex_csi_a22(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wb_cqi_(arena),
  sb_cqi_(arena),
  sb_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_a22)
}
flex_csi_a22::flex_csi_a22(const flex_csi_a22& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      wb_cqi_(from.wb_cqi_),
      sb_cqi_(from.sb_cqi_),
      sb_list_(from.sb_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wb_pmi_, &from.wb_pmi_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_pmi_) -
    reinterpret_cast<char*>(&wb_pmi_)) + sizeof(sb_pmi_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a22)
}

void flex_csi_a22::SharedCtor() {
  ::memset(&wb_pmi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_pmi_) -
      reinterpret_cast<char*>(&wb_pmi_)) + sizeof(sb_pmi_));
}

flex_csi_a22::~flex_csi_a22() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a22)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_a22::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_a22::ArenaDtor(void* object) {
  flex_csi_a22* _this = reinterpret_cast< flex_csi_a22* >(object);
  (void)_this;
}
void flex_csi_a22::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_a22::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_a22& flex_csi_a22::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_a22_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_a22::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wb_cqi_.Clear();
  sb_cqi_.Clear();
  sb_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&wb_pmi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sb_pmi_) -
        reinterpret_cast<char*>(&wb_pmi_)) + sizeof(sb_pmi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_a22::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sb_cqi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 wb_pmi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wb_pmi(&has_bits);
          wb_pmi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sb_pmi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sb_pmi(&has_bits);
          sb_pmi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sb_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sb_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sb_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_a22::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a22)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->_internal_wb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(i), target);
  }

  // repeated uint32 sb_cqi = 2;
  for (int i = 0, n = this->_internal_sb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sb_cqi(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wb_pmi(), target);
  }

  // optional uint32 sb_pmi = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sb_pmi(), target);
  }

  // repeated uint32 sb_list = 5;
  for (int i = 0, n = this->_internal_sb_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_sb_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a22)
  return target;
}

size_t flex_csi_a22::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a22)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_cqi = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sb_cqi_size());
    total_size += data_size;
  }

  // repeated uint32 sb_list = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sb_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sb_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 wb_pmi = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wb_pmi());
    }

    // optional uint32 sb_pmi = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sb_pmi());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_a22::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a22)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a22* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_a22>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a22)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a22)
    MergeFrom(*source);
  }
}

void flex_csi_a22::MergeFrom(const flex_csi_a22& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a22)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_cqi_.MergeFrom(from.sb_cqi_);
  sb_list_.MergeFrom(from.sb_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      wb_pmi_ = from.wb_pmi_;
    }
    if (cached_has_bits & 0x00000002u) {
      sb_pmi_ = from.sb_pmi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_a22::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a22::CopyFrom(const flex_csi_a22& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a22)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a22::IsInitialized() const {
  return true;
}

void flex_csi_a22::InternalSwap(flex_csi_a22* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  sb_list_.InternalSwap(&other->sb_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_csi_a22, sb_pmi_)
      + sizeof(flex_csi_a22::sb_pmi_)
      - PROTOBUF_FIELD_OFFSET(flex_csi_a22, wb_pmi_)>(
          reinterpret_cast<char*>(&wb_pmi_),
          reinterpret_cast<char*>(&other->wb_pmi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_a22::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_a20::InitAsDefaultInstance() {
}
class flex_csi_a20::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_a20>()._has_bits_);
  static void set_has_wb_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sb_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_csi_a20::flex_csi_a20(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sb_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_a20)
}
flex_csi_a20::flex_csi_a20(const flex_csi_a20& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sb_list_(from.sb_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wb_cqi_, &from.wb_cqi_,
    static_cast<size_t>(reinterpret_cast<char*>(&sb_cqi_) -
    reinterpret_cast<char*>(&wb_cqi_)) + sizeof(sb_cqi_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a20)
}

void flex_csi_a20::SharedCtor() {
  ::memset(&wb_cqi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sb_cqi_) -
      reinterpret_cast<char*>(&wb_cqi_)) + sizeof(sb_cqi_));
}

flex_csi_a20::~flex_csi_a20() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a20)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_a20::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_a20::ArenaDtor(void* object) {
  flex_csi_a20* _this = reinterpret_cast< flex_csi_a20* >(object);
  (void)_this;
}
void flex_csi_a20::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_a20::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_a20& flex_csi_a20::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_a20_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_a20::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sb_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&wb_cqi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sb_cqi_) -
        reinterpret_cast<char*>(&wb_cqi_)) + sizeof(sb_cqi_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_a20::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wb_cqi(&has_bits);
          wb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 sb_cqi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sb_cqi(&has_bits);
          sb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sb_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sb_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sb_list(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_a20::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a20)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(), target);
  }

  // optional uint32 sb_cqi = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sb_cqi(), target);
  }

  // repeated uint32 sb_list = 3;
  for (int i = 0, n = this->_internal_sb_list_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sb_list(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a20)
  return target;
}

size_t flex_csi_a20::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a20)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sb_list = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sb_list_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sb_list_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 wb_cqi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_wb_cqi());
    }

    // optional uint32 sb_cqi = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sb_cqi());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_a20::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a20)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a20* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_a20>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a20)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a20)
    MergeFrom(*source);
  }
}

void flex_csi_a20::MergeFrom(const flex_csi_a20& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a20)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sb_list_.MergeFrom(from.sb_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      wb_cqi_ = from.wb_cqi_;
    }
    if (cached_has_bits & 0x00000002u) {
      sb_cqi_ = from.sb_cqi_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_csi_a20::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a20::CopyFrom(const flex_csi_a20& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a20)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a20::IsInitialized() const {
  return true;
}

void flex_csi_a20::InternalSwap(flex_csi_a20* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sb_list_.InternalSwap(&other->sb_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_csi_a20, sb_cqi_)
      + sizeof(flex_csi_a20::sb_cqi_)
      - PROTOBUF_FIELD_OFFSET(flex_csi_a20, wb_cqi_)>(
          reinterpret_cast<char*>(&wb_cqi_),
          reinterpret_cast<char*>(&other->wb_cqi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_a20::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_a30::InitAsDefaultInstance() {
}
class flex_csi_a30::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_a30>()._has_bits_);
  static void set_has_wb_cqi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_csi_a30::flex_csi_a30(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sb_cqi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_a30)
}
flex_csi_a30::flex_csi_a30(const flex_csi_a30& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wb_cqi_ = from.wb_cqi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a30)
}

void flex_csi_a30::SharedCtor() {
  wb_cqi_ = 0u;
}

flex_csi_a30::~flex_csi_a30() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a30)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_a30::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_a30::ArenaDtor(void* object) {
  flex_csi_a30* _this = reinterpret_cast< flex_csi_a30* >(object);
  (void)_this;
}
void flex_csi_a30::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_a30::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_a30& flex_csi_a30::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_a30_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_a30::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sb_cqi_.Clear();
  wb_cqi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_a30::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_wb_cqi(&has_bits);
          wb_cqi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 sb_cqi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_a30::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a30)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_cqi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(), target);
  }

  // repeated uint32 sb_cqi = 2;
  for (int i = 0, n = this->_internal_sb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sb_cqi(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a30)
  return target;
}

size_t flex_csi_a30::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a30)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sb_cqi = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sb_cqi_size());
    total_size += data_size;
  }

  // optional uint32 wb_cqi = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wb_cqi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_a30::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a30)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a30* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_a30>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a30)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a30)
    MergeFrom(*source);
  }
}

void flex_csi_a30::MergeFrom(const flex_csi_a30& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a30)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sb_cqi_.MergeFrom(from.sb_cqi_);
  if (from._internal_has_wb_cqi()) {
    _internal_set_wb_cqi(from._internal_wb_cqi());
  }
}

void flex_csi_a30::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a30::CopyFrom(const flex_csi_a30& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a30)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a30::IsInitialized() const {
  return true;
}

void flex_csi_a30::InternalSwap(flex_csi_a30* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  swap(wb_cqi_, other->wb_cqi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_a30::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_csi_a31::InitAsDefaultInstance() {
}
class flex_csi_a31::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_csi_a31>()._has_bits_);
  static void set_has_wb_pmi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_csi_a31::flex_csi_a31(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wb_cqi_(arena),
  sb_cqi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_csi_a31)
}
flex_csi_a31::flex_csi_a31(const flex_csi_a31& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      wb_cqi_(from.wb_cqi_),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  wb_pmi_ = from.wb_pmi_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_csi_a31)
}

void flex_csi_a31::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_csi_a31_stats_5fcommon_2eproto.base);
  wb_pmi_ = 0u;
}

flex_csi_a31::~flex_csi_a31() {
  // @@protoc_insertion_point(destructor:protocol.flex_csi_a31)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_csi_a31::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_csi_a31::ArenaDtor(void* object) {
  flex_csi_a31* _this = reinterpret_cast< flex_csi_a31* >(object);
  (void)_this;
}
void flex_csi_a31::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_csi_a31::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_csi_a31& flex_csi_a31::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_csi_a31_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_csi_a31::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_csi_a31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wb_cqi_.Clear();
  sb_cqi_.Clear();
  wb_pmi_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_csi_a31::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 wb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_wb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_wb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_msb_cqi sb_cqi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sb_cqi(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 wb_pmi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_wb_pmi(&has_bits);
          wb_pmi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_csi_a31::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_csi_a31)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  for (int i = 0, n = this->_internal_wb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_wb_cqi(i), target);
  }

  // repeated .protocol.flex_msb_cqi sb_cqi = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sb_cqi_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_sb_cqi(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 wb_pmi = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_wb_pmi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_csi_a31)
  return target;
}

size_t flex_csi_a31::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_csi_a31)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 wb_cqi = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->wb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_wb_cqi_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_msb_cqi sb_cqi = 2;
  total_size += 1UL * this->_internal_sb_cqi_size();
  for (const auto& msg : this->sb_cqi_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 wb_pmi = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_wb_pmi());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_csi_a31::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_csi_a31)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_csi_a31* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_csi_a31>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_csi_a31)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_csi_a31)
    MergeFrom(*source);
  }
}

void flex_csi_a31::MergeFrom(const flex_csi_a31& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_csi_a31)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wb_cqi_.MergeFrom(from.wb_cqi_);
  sb_cqi_.MergeFrom(from.sb_cqi_);
  if (from._internal_has_wb_pmi()) {
    _internal_set_wb_pmi(from._internal_wb_pmi());
  }
}

void flex_csi_a31::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_csi_a31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_csi_a31::CopyFrom(const flex_csi_a31& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_csi_a31)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_csi_a31::IsInitialized() const {
  return true;
}

void flex_csi_a31::InternalSwap(flex_csi_a31* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  wb_cqi_.InternalSwap(&other->wb_cqi_);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
  swap(wb_pmi_, other->wb_pmi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_csi_a31::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_msb_cqi::InitAsDefaultInstance() {
}
class flex_msb_cqi::_Internal {
 public:
};

flex_msb_cqi::flex_msb_cqi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sb_cqi_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_msb_cqi)
}
flex_msb_cqi::flex_msb_cqi(const flex_msb_cqi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      sb_cqi_(from.sb_cqi_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_msb_cqi)
}

void flex_msb_cqi::SharedCtor() {
}

flex_msb_cqi::~flex_msb_cqi() {
  // @@protoc_insertion_point(destructor:protocol.flex_msb_cqi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_msb_cqi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_msb_cqi::ArenaDtor(void* object) {
  flex_msb_cqi* _this = reinterpret_cast< flex_msb_cqi* >(object);
  (void)_this;
}
void flex_msb_cqi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_msb_cqi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_msb_cqi& flex_msb_cqi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_msb_cqi_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_msb_cqi::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_msb_cqi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sb_cqi_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_msb_cqi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 sb_cqi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sb_cqi(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sb_cqi(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_msb_cqi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_msb_cqi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 sb_cqi = 1;
  for (int i = 0, n = this->_internal_sb_cqi_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sb_cqi(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_msb_cqi)
  return target;
}

size_t flex_msb_cqi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_msb_cqi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sb_cqi = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sb_cqi_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sb_cqi_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_msb_cqi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_msb_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_msb_cqi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_msb_cqi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_msb_cqi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_msb_cqi)
    MergeFrom(*source);
  }
}

void flex_msb_cqi::MergeFrom(const flex_msb_cqi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_msb_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sb_cqi_.MergeFrom(from.sb_cqi_);
}

void flex_msb_cqi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_msb_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_msb_cqi::CopyFrom(const flex_msb_cqi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_msb_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_msb_cqi::IsInitialized() const {
  return true;
}

void flex_msb_cqi::InternalSwap(flex_msb_cqi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  sb_cqi_.InternalSwap(&other->sb_cqi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_msb_cqi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_dl_csi::InitAsDefaultInstance() {
  ::protocol::_flex_dl_csi_default_instance_.p10csi_ = const_cast< ::protocol::flex_csi_p10*>(
      ::protocol::flex_csi_p10::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.p11csi_ = const_cast< ::protocol::flex_csi_p11*>(
      ::protocol::flex_csi_p11::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.p20csi_ = const_cast< ::protocol::flex_csi_p20*>(
      ::protocol::flex_csi_p20::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.p21csi_ = const_cast< ::protocol::flex_csi_p21*>(
      ::protocol::flex_csi_p21::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.a12csi_ = const_cast< ::protocol::flex_csi_a12*>(
      ::protocol::flex_csi_a12::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.a22csi_ = const_cast< ::protocol::flex_csi_a22*>(
      ::protocol::flex_csi_a22::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.a20csi_ = const_cast< ::protocol::flex_csi_a20*>(
      ::protocol::flex_csi_a20::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.a30csi_ = const_cast< ::protocol::flex_csi_a30*>(
      ::protocol::flex_csi_a30::internal_default_instance());
  ::protocol::_flex_dl_csi_default_instance_.a31csi_ = const_cast< ::protocol::flex_csi_a31*>(
      ::protocol::flex_csi_a31::internal_default_instance());
}
class flex_dl_csi::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_csi>()._has_bits_);
  static void set_has_serv_cell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ri(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_csi_p10& p10csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_p11& p11csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_p20& p20csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_p21& p21csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_a12& a12csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_a22& a22csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_a20& a20csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_a30& a30csi(const flex_dl_csi* msg);
  static const ::protocol::flex_csi_a31& a31csi(const flex_dl_csi* msg);
};

const ::protocol::flex_csi_p10&
flex_dl_csi::_Internal::p10csi(const flex_dl_csi* msg) {
  return *msg->report_.p10csi_;
}
const ::protocol::flex_csi_p11&
flex_dl_csi::_Internal::p11csi(const flex_dl_csi* msg) {
  return *msg->report_.p11csi_;
}
const ::protocol::flex_csi_p20&
flex_dl_csi::_Internal::p20csi(const flex_dl_csi* msg) {
  return *msg->report_.p20csi_;
}
const ::protocol::flex_csi_p21&
flex_dl_csi::_Internal::p21csi(const flex_dl_csi* msg) {
  return *msg->report_.p21csi_;
}
const ::protocol::flex_csi_a12&
flex_dl_csi::_Internal::a12csi(const flex_dl_csi* msg) {
  return *msg->report_.a12csi_;
}
const ::protocol::flex_csi_a22&
flex_dl_csi::_Internal::a22csi(const flex_dl_csi* msg) {
  return *msg->report_.a22csi_;
}
const ::protocol::flex_csi_a20&
flex_dl_csi::_Internal::a20csi(const flex_dl_csi* msg) {
  return *msg->report_.a20csi_;
}
const ::protocol::flex_csi_a30&
flex_dl_csi::_Internal::a30csi(const flex_dl_csi* msg) {
  return *msg->report_.a30csi_;
}
const ::protocol::flex_csi_a31&
flex_dl_csi::_Internal::a31csi(const flex_dl_csi* msg) {
  return *msg->report_.a31csi_;
}
void flex_dl_csi::set_allocated_p10csi(::protocol::flex_csi_p10* p10csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (p10csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p10csi);
    if (message_arena != submessage_arena) {
      p10csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p10csi, submessage_arena);
    }
    set_has_p10csi();
    report_.p10csi_ = p10csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p10csi)
}
void flex_dl_csi::set_allocated_p11csi(::protocol::flex_csi_p11* p11csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (p11csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p11csi);
    if (message_arena != submessage_arena) {
      p11csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p11csi, submessage_arena);
    }
    set_has_p11csi();
    report_.p11csi_ = p11csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p11csi)
}
void flex_dl_csi::set_allocated_p20csi(::protocol::flex_csi_p20* p20csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (p20csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p20csi);
    if (message_arena != submessage_arena) {
      p20csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p20csi, submessage_arena);
    }
    set_has_p20csi();
    report_.p20csi_ = p20csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p20csi)
}
void flex_dl_csi::set_allocated_p21csi(::protocol::flex_csi_p21* p21csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (p21csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p21csi);
    if (message_arena != submessage_arena) {
      p21csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p21csi, submessage_arena);
    }
    set_has_p21csi();
    report_.p21csi_ = p21csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.p21csi)
}
void flex_dl_csi::set_allocated_a12csi(::protocol::flex_csi_a12* a12csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (a12csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a12csi);
    if (message_arena != submessage_arena) {
      a12csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a12csi, submessage_arena);
    }
    set_has_a12csi();
    report_.a12csi_ = a12csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a12csi)
}
void flex_dl_csi::set_allocated_a22csi(::protocol::flex_csi_a22* a22csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (a22csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a22csi);
    if (message_arena != submessage_arena) {
      a22csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a22csi, submessage_arena);
    }
    set_has_a22csi();
    report_.a22csi_ = a22csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a22csi)
}
void flex_dl_csi::set_allocated_a20csi(::protocol::flex_csi_a20* a20csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (a20csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a20csi);
    if (message_arena != submessage_arena) {
      a20csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a20csi, submessage_arena);
    }
    set_has_a20csi();
    report_.a20csi_ = a20csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a20csi)
}
void flex_dl_csi::set_allocated_a30csi(::protocol::flex_csi_a30* a30csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (a30csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a30csi);
    if (message_arena != submessage_arena) {
      a30csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a30csi, submessage_arena);
    }
    set_has_a30csi();
    report_.a30csi_ = a30csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a30csi)
}
void flex_dl_csi::set_allocated_a31csi(::protocol::flex_csi_a31* a31csi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_report();
  if (a31csi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a31csi);
    if (message_arena != submessage_arena) {
      a31csi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a31csi, submessage_arena);
    }
    set_has_a31csi();
    report_.a31csi_ = a31csi;
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_dl_csi.a31csi)
}
flex_dl_csi::flex_dl_csi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_csi)
}
flex_dl_csi::flex_dl_csi(const flex_dl_csi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serv_cell_index_, &from.serv_cell_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&serv_cell_index_)) + sizeof(type_));
  clear_has_report();
  switch (from.report_case()) {
    case kP10Csi: {
      _internal_mutable_p10csi()->::protocol::flex_csi_p10::MergeFrom(from._internal_p10csi());
      break;
    }
    case kP11Csi: {
      _internal_mutable_p11csi()->::protocol::flex_csi_p11::MergeFrom(from._internal_p11csi());
      break;
    }
    case kP20Csi: {
      _internal_mutable_p20csi()->::protocol::flex_csi_p20::MergeFrom(from._internal_p20csi());
      break;
    }
    case kP21Csi: {
      _internal_mutable_p21csi()->::protocol::flex_csi_p21::MergeFrom(from._internal_p21csi());
      break;
    }
    case kA12Csi: {
      _internal_mutable_a12csi()->::protocol::flex_csi_a12::MergeFrom(from._internal_a12csi());
      break;
    }
    case kA22Csi: {
      _internal_mutable_a22csi()->::protocol::flex_csi_a22::MergeFrom(from._internal_a22csi());
      break;
    }
    case kA20Csi: {
      _internal_mutable_a20csi()->::protocol::flex_csi_a20::MergeFrom(from._internal_a20csi());
      break;
    }
    case kA30Csi: {
      _internal_mutable_a30csi()->::protocol::flex_csi_a30::MergeFrom(from._internal_a30csi());
      break;
    }
    case kA31Csi: {
      _internal_mutable_a31csi()->::protocol::flex_csi_a31::MergeFrom(from._internal_a31csi());
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_csi)
}

void flex_dl_csi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_dl_csi_stats_5fcommon_2eproto.base);
  ::memset(&serv_cell_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&serv_cell_index_)) + sizeof(type_));
  clear_has_report();
}

flex_dl_csi::~flex_dl_csi() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_csi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_csi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_report()) {
    clear_report();
  }
}

void flex_dl_csi::ArenaDtor(void* object) {
  flex_dl_csi* _this = reinterpret_cast< flex_dl_csi* >(object);
  (void)_this;
}
void flex_dl_csi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_csi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_csi& flex_dl_csi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_csi_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_csi::clear_report() {
// @@protoc_insertion_point(one_of_clear_start:protocol.flex_dl_csi)
  switch (report_case()) {
    case kP10Csi: {
      if (GetArena() == nullptr) {
        delete report_.p10csi_;
      }
      break;
    }
    case kP11Csi: {
      if (GetArena() == nullptr) {
        delete report_.p11csi_;
      }
      break;
    }
    case kP20Csi: {
      if (GetArena() == nullptr) {
        delete report_.p20csi_;
      }
      break;
    }
    case kP21Csi: {
      if (GetArena() == nullptr) {
        delete report_.p21csi_;
      }
      break;
    }
    case kA12Csi: {
      if (GetArena() == nullptr) {
        delete report_.a12csi_;
      }
      break;
    }
    case kA22Csi: {
      if (GetArena() == nullptr) {
        delete report_.a22csi_;
      }
      break;
    }
    case kA20Csi: {
      if (GetArena() == nullptr) {
        delete report_.a20csi_;
      }
      break;
    }
    case kA30Csi: {
      if (GetArena() == nullptr) {
        delete report_.a30csi_;
      }
      break;
    }
    case kA31Csi: {
      if (GetArena() == nullptr) {
        delete report_.a31csi_;
      }
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REPORT_NOT_SET;
}


void flex_dl_csi::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_csi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&serv_cell_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&serv_cell_index_)) + sizeof(type_));
  }
  clear_report();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_csi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 serv_cell_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_serv_cell_index(&has_bits);
          serv_cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ri(&has_bits);
          ri_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_csi_type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protocol::flex_csi_type_IsValid(val))) {
            _internal_set_type(static_cast<::protocol::flex_csi_type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_p10 p10csi = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_p10csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_p11 p11csi = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_p11csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_p20 p20csi = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_p20csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_p21 p21csi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_p21csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_a12 a12csi = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_a12csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_a22 a22csi = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_a22csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_a20 a20csi = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_a20csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_a30 a30csi = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_a30csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protocol.flex_csi_a31 a31csi = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_a31csi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_csi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_csi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 serv_cell_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serv_cell_index(), target);
  }

  // optional uint32 ri = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ri(), target);
  }

  // optional .protocol.flex_csi_type type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  switch (report_case()) {
    case kP10Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          4, _Internal::p10csi(this), target, stream);
      break;
    }
    case kP11Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          5, _Internal::p11csi(this), target, stream);
      break;
    }
    case kP20Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          6, _Internal::p20csi(this), target, stream);
      break;
    }
    case kP21Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          7, _Internal::p21csi(this), target, stream);
      break;
    }
    case kA12Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          8, _Internal::a12csi(this), target, stream);
      break;
    }
    case kA22Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          9, _Internal::a22csi(this), target, stream);
      break;
    }
    case kA20Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          10, _Internal::a20csi(this), target, stream);
      break;
    }
    case kA30Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          11, _Internal::a30csi(this), target, stream);
      break;
    }
    case kA31Csi: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          12, _Internal::a31csi(this), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_csi)
  return target;
}

size_t flex_dl_csi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_csi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 serv_cell_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_serv_cell_index());
    }

    // optional uint32 ri = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ri());
    }

    // optional .protocol.flex_csi_type type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  switch (report_case()) {
    // .protocol.flex_csi_p10 p10csi = 4;
    case kP10Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.p10csi_);
      break;
    }
    // .protocol.flex_csi_p11 p11csi = 5;
    case kP11Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.p11csi_);
      break;
    }
    // .protocol.flex_csi_p20 p20csi = 6;
    case kP20Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.p20csi_);
      break;
    }
    // .protocol.flex_csi_p21 p21csi = 7;
    case kP21Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.p21csi_);
      break;
    }
    // .protocol.flex_csi_a12 a12csi = 8;
    case kA12Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.a12csi_);
      break;
    }
    // .protocol.flex_csi_a22 a22csi = 9;
    case kA22Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.a22csi_);
      break;
    }
    // .protocol.flex_csi_a20 a20csi = 10;
    case kA20Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.a20csi_);
      break;
    }
    // .protocol.flex_csi_a30 a30csi = 11;
    case kA30Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.a30csi_);
      break;
    }
    // .protocol.flex_csi_a31 a31csi = 12;
    case kA31Csi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *report_.a31csi_);
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_csi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_csi)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_csi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_csi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_csi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_csi)
    MergeFrom(*source);
  }
}

void flex_dl_csi::MergeFrom(const flex_dl_csi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_csi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      ri_ = from.ri_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.report_case()) {
    case kP10Csi: {
      _internal_mutable_p10csi()->::protocol::flex_csi_p10::MergeFrom(from._internal_p10csi());
      break;
    }
    case kP11Csi: {
      _internal_mutable_p11csi()->::protocol::flex_csi_p11::MergeFrom(from._internal_p11csi());
      break;
    }
    case kP20Csi: {
      _internal_mutable_p20csi()->::protocol::flex_csi_p20::MergeFrom(from._internal_p20csi());
      break;
    }
    case kP21Csi: {
      _internal_mutable_p21csi()->::protocol::flex_csi_p21::MergeFrom(from._internal_p21csi());
      break;
    }
    case kA12Csi: {
      _internal_mutable_a12csi()->::protocol::flex_csi_a12::MergeFrom(from._internal_a12csi());
      break;
    }
    case kA22Csi: {
      _internal_mutable_a22csi()->::protocol::flex_csi_a22::MergeFrom(from._internal_a22csi());
      break;
    }
    case kA20Csi: {
      _internal_mutable_a20csi()->::protocol::flex_csi_a20::MergeFrom(from._internal_a20csi());
      break;
    }
    case kA30Csi: {
      _internal_mutable_a30csi()->::protocol::flex_csi_a30::MergeFrom(from._internal_a30csi());
      break;
    }
    case kA31Csi: {
      _internal_mutable_a31csi()->::protocol::flex_csi_a31::MergeFrom(from._internal_a31csi());
      break;
    }
    case REPORT_NOT_SET: {
      break;
    }
  }
}

void flex_dl_csi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_csi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_csi::CopyFrom(const flex_dl_csi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_csi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_csi::IsInitialized() const {
  return true;
}

void flex_dl_csi::InternalSwap(flex_dl_csi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_dl_csi, type_)
      + sizeof(flex_dl_csi::type_)
      - PROTOBUF_FIELD_OFFSET(flex_dl_csi, serv_cell_index_)>(
          reinterpret_cast<char*>(&serv_cell_index_),
          reinterpret_cast<char*>(&other->serv_cell_index_));
  swap(report_, other->report_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_csi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_dl_cqi_report::InitAsDefaultInstance() {
}
class flex_dl_cqi_report::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_dl_cqi_report>()._has_bits_);
  static void set_has_sfn_sn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_dl_cqi_report::flex_dl_cqi_report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  csi_report_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_dl_cqi_report)
}
flex_dl_cqi_report::flex_dl_cqi_report(const flex_dl_cqi_report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      csi_report_(from.csi_report_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sfn_sn_ = from.sfn_sn_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_dl_cqi_report)
}

void flex_dl_cqi_report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_dl_cqi_report_stats_5fcommon_2eproto.base);
  sfn_sn_ = 0u;
}

flex_dl_cqi_report::~flex_dl_cqi_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_dl_cqi_report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_dl_cqi_report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_dl_cqi_report::ArenaDtor(void* object) {
  flex_dl_cqi_report* _this = reinterpret_cast< flex_dl_cqi_report* >(object);
  (void)_this;
}
void flex_dl_cqi_report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_dl_cqi_report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_dl_cqi_report& flex_dl_cqi_report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_dl_cqi_report_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_dl_cqi_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_dl_cqi_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  csi_report_.Clear();
  sfn_sn_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_dl_cqi_report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sfn_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sfn_sn(&has_bits);
          sfn_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_dl_csi csi_report = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_csi_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_dl_cqi_report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_dl_cqi_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sfn_sn(), target);
  }

  // repeated .protocol.flex_dl_csi csi_report = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_csi_report_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_csi_report(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_dl_cqi_report)
  return target;
}

size_t flex_dl_cqi_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_dl_cqi_report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_dl_csi csi_report = 2;
  total_size += 1UL * this->_internal_csi_report_size();
  for (const auto& msg : this->csi_report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 sfn_sn = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sfn_sn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_dl_cqi_report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_dl_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_dl_cqi_report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_dl_cqi_report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_dl_cqi_report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_dl_cqi_report)
    MergeFrom(*source);
  }
}

void flex_dl_cqi_report::MergeFrom(const flex_dl_cqi_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_dl_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  csi_report_.MergeFrom(from.csi_report_);
  if (from._internal_has_sfn_sn()) {
    _internal_set_sfn_sn(from._internal_sfn_sn());
  }
}

void flex_dl_cqi_report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_dl_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_dl_cqi_report::CopyFrom(const flex_dl_cqi_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_dl_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_dl_cqi_report::IsInitialized() const {
  return true;
}

void flex_dl_cqi_report::InternalSwap(flex_dl_cqi_report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  csi_report_.InternalSwap(&other->csi_report_);
  swap(sfn_sn_, other->sfn_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_dl_cqi_report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_paging_info::InitAsDefaultInstance() {
}
class flex_paging_info::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_paging_info>()._has_bits_);
  static void set_has_paging_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_paging_message_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_paging_subframe(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_paging_info::flex_paging_info(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_paging_info)
}
flex_paging_info::flex_paging_info(const flex_paging_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&paging_index_, &from.paging_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&carrier_index_) -
    reinterpret_cast<char*>(&paging_index_)) + sizeof(carrier_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_paging_info)
}

void flex_paging_info::SharedCtor() {
  ::memset(&paging_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&carrier_index_) -
      reinterpret_cast<char*>(&paging_index_)) + sizeof(carrier_index_));
}

flex_paging_info::~flex_paging_info() {
  // @@protoc_insertion_point(destructor:protocol.flex_paging_info)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_paging_info::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_paging_info::ArenaDtor(void* object) {
  flex_paging_info* _this = reinterpret_cast< flex_paging_info* >(object);
  (void)_this;
}
void flex_paging_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_paging_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_paging_info& flex_paging_info::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_paging_info_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_paging_info::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_paging_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&paging_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&carrier_index_) -
        reinterpret_cast<char*>(&paging_index_)) + sizeof(carrier_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_paging_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 paging_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_paging_index(&has_bits);
          paging_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paging_message_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_paging_message_size(&has_bits);
          paging_message_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 paging_subframe = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_paging_subframe(&has_bits);
          paging_subframe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 carrier_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_carrier_index(&has_bits);
          carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_paging_info::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_paging_info)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 paging_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_paging_index(), target);
  }

  // optional uint32 paging_message_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_paging_message_size(), target);
  }

  // optional uint32 paging_subframe = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_paging_subframe(), target);
  }

  // optional uint32 carrier_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_carrier_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_paging_info)
  return target;
}

size_t flex_paging_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_paging_info)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 paging_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paging_index());
    }

    // optional uint32 paging_message_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paging_message_size());
    }

    // optional uint32 paging_subframe = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_paging_subframe());
    }

    // optional uint32 carrier_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_carrier_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_paging_info::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_paging_info)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_paging_info* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_paging_info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_paging_info)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_paging_info)
    MergeFrom(*source);
  }
}

void flex_paging_info::MergeFrom(const flex_paging_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_paging_info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      paging_index_ = from.paging_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      paging_message_size_ = from.paging_message_size_;
    }
    if (cached_has_bits & 0x00000004u) {
      paging_subframe_ = from.paging_subframe_;
    }
    if (cached_has_bits & 0x00000008u) {
      carrier_index_ = from.carrier_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_paging_info::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_paging_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_paging_info::CopyFrom(const flex_paging_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_paging_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_paging_info::IsInitialized() const {
  return true;
}

void flex_paging_info::InternalSwap(flex_paging_info* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_paging_info, carrier_index_)
      + sizeof(flex_paging_info::carrier_index_)
      - PROTOBUF_FIELD_OFFSET(flex_paging_info, paging_index_)>(
          reinterpret_cast<char*>(&paging_index_),
          reinterpret_cast<char*>(&other->paging_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_paging_info::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_paging_buffer_report::InitAsDefaultInstance() {
}
class flex_paging_buffer_report::_Internal {
 public:
};

flex_paging_buffer_report::flex_paging_buffer_report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paging_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_paging_buffer_report)
}
flex_paging_buffer_report::flex_paging_buffer_report(const flex_paging_buffer_report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paging_info_(from.paging_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_paging_buffer_report)
}

void flex_paging_buffer_report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_paging_buffer_report_stats_5fcommon_2eproto.base);
}

flex_paging_buffer_report::~flex_paging_buffer_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_paging_buffer_report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_paging_buffer_report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_paging_buffer_report::ArenaDtor(void* object) {
  flex_paging_buffer_report* _this = reinterpret_cast< flex_paging_buffer_report* >(object);
  (void)_this;
}
void flex_paging_buffer_report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_paging_buffer_report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_paging_buffer_report& flex_paging_buffer_report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_paging_buffer_report_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_paging_buffer_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_paging_buffer_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paging_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_paging_buffer_report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.flex_paging_info paging_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paging_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_paging_buffer_report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_paging_buffer_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_paging_info paging_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paging_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_paging_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_paging_buffer_report)
  return target;
}

size_t flex_paging_buffer_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_paging_buffer_report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_paging_info paging_info = 1;
  total_size += 1UL * this->_internal_paging_info_size();
  for (const auto& msg : this->paging_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_paging_buffer_report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_paging_buffer_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_paging_buffer_report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_paging_buffer_report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_paging_buffer_report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_paging_buffer_report)
    MergeFrom(*source);
  }
}

void flex_paging_buffer_report::MergeFrom(const flex_paging_buffer_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_paging_buffer_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paging_info_.MergeFrom(from.paging_info_);
}

void flex_paging_buffer_report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_paging_buffer_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_paging_buffer_report::CopyFrom(const flex_paging_buffer_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_paging_buffer_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_paging_buffer_report::IsInitialized() const {
  return true;
}

void flex_paging_buffer_report::InternalSwap(flex_paging_buffer_report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paging_info_.InternalSwap(&other->paging_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_paging_buffer_report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ul_cqi::InitAsDefaultInstance() {
}
class flex_ul_cqi::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ul_cqi>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serv_cell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_ul_cqi::flex_ul_cqi(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  sinr_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ul_cqi)
}
flex_ul_cqi::flex_ul_cqi(const flex_ul_cqi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      sinr_(from.sinr_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&serv_cell_index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(serv_cell_index_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_cqi)
}

void flex_ul_cqi::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serv_cell_index_) -
      reinterpret_cast<char*>(&type_)) + sizeof(serv_cell_index_));
}

flex_ul_cqi::~flex_ul_cqi() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_cqi)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ul_cqi::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_ul_cqi::ArenaDtor(void* object) {
  flex_ul_cqi* _this = reinterpret_cast< flex_ul_cqi* >(object);
  (void)_this;
}
void flex_ul_cqi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ul_cqi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ul_cqi& flex_ul_cqi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ul_cqi_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_ul_cqi::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_cqi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sinr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&serv_cell_index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(serv_cell_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ul_cqi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_ul_cqi_type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protocol::flex_ul_cqi_type_IsValid(val))) {
            _internal_set_type(static_cast<::protocol::flex_ul_cqi_type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint32 sinr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_sinr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_sinr(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 serv_cell_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_serv_cell_index(&has_bits);
          serv_cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ul_cqi::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_cqi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_ul_cqi_type type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated uint32 sinr = 2;
  for (int i = 0, n = this->_internal_sinr_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sinr(i), target);
  }

  // optional uint32 serv_cell_index = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_serv_cell_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_cqi)
  return target;
}

size_t flex_ul_cqi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_cqi)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 sinr = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->sinr_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_sinr_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_ul_cqi_type type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional uint32 serv_cell_index = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_serv_cell_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ul_cqi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_cqi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ul_cqi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_cqi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_cqi)
    MergeFrom(*source);
  }
}

void flex_ul_cqi::MergeFrom(const flex_ul_cqi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_cqi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sinr_.MergeFrom(from.sinr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ul_cqi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_cqi::CopyFrom(const flex_ul_cqi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_cqi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_cqi::IsInitialized() const {
  return true;
}

void flex_ul_cqi::InternalSwap(flex_ul_cqi* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sinr_.InternalSwap(&other->sinr_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ul_cqi, serv_cell_index_)
      + sizeof(flex_ul_cqi::serv_cell_index_)
      - PROTOBUF_FIELD_OFFSET(flex_ul_cqi, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ul_cqi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ul_cqi_report::InitAsDefaultInstance() {
}
class flex_ul_cqi_report::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ul_cqi_report>()._has_bits_);
  static void set_has_sfn_sn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_ul_cqi_report::flex_ul_cqi_report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cqi_meas_(arena),
  pucch_dbm_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ul_cqi_report)
}
flex_ul_cqi_report::flex_ul_cqi_report(const flex_ul_cqi_report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cqi_meas_(from.cqi_meas_),
      pucch_dbm_(from.pucch_dbm_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sfn_sn_ = from.sfn_sn_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ul_cqi_report)
}

void flex_ul_cqi_report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ul_cqi_report_stats_5fcommon_2eproto.base);
  sfn_sn_ = 0u;
}

flex_ul_cqi_report::~flex_ul_cqi_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_ul_cqi_report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ul_cqi_report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_ul_cqi_report::ArenaDtor(void* object) {
  flex_ul_cqi_report* _this = reinterpret_cast< flex_ul_cqi_report* >(object);
  (void)_this;
}
void flex_ul_cqi_report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ul_cqi_report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ul_cqi_report& flex_ul_cqi_report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ul_cqi_report_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_ul_cqi_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ul_cqi_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cqi_meas_.Clear();
  pucch_dbm_.Clear();
  sfn_sn_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ul_cqi_report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sfn_sn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sfn_sn(&has_bits);
          sfn_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_ul_cqi cqi_meas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cqi_meas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pucch_dbm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ul_cqi_report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ul_cqi_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sfn_sn(), target);
  }

  // repeated .protocol.flex_ul_cqi cqi_meas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cqi_meas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cqi_meas(i), target, stream);
  }

  // repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pucch_dbm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_pucch_dbm(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ul_cqi_report)
  return target;
}

size_t flex_ul_cqi_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ul_cqi_report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_ul_cqi cqi_meas = 2;
  total_size += 1UL * this->_internal_cqi_meas_size();
  for (const auto& msg : this->cqi_meas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_pucch_dbm pucch_dbm = 3;
  total_size += 1UL * this->_internal_pucch_dbm_size();
  for (const auto& msg : this->pucch_dbm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 sfn_sn = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sfn_sn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ul_cqi_report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ul_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ul_cqi_report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ul_cqi_report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ul_cqi_report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ul_cqi_report)
    MergeFrom(*source);
  }
}

void flex_ul_cqi_report::MergeFrom(const flex_ul_cqi_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ul_cqi_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cqi_meas_.MergeFrom(from.cqi_meas_);
  pucch_dbm_.MergeFrom(from.pucch_dbm_);
  if (from._internal_has_sfn_sn()) {
    _internal_set_sfn_sn(from._internal_sfn_sn());
  }
}

void flex_ul_cqi_report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ul_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ul_cqi_report::CopyFrom(const flex_ul_cqi_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ul_cqi_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ul_cqi_report::IsInitialized() const {
  return true;
}

void flex_ul_cqi_report::InternalSwap(flex_ul_cqi_report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cqi_meas_.InternalSwap(&other->cqi_meas_);
  pucch_dbm_.InternalSwap(&other->pucch_dbm_);
  swap(sfn_sn_, other->sfn_sn_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ul_cqi_report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_pucch_dbm::InitAsDefaultInstance() {
}
class flex_pucch_dbm::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_pucch_dbm>()._has_bits_);
  static void set_has_p0_pucch_dbm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_serv_cell_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_p0_pucch_updated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

flex_pucch_dbm::flex_pucch_dbm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_pucch_dbm)
}
flex_pucch_dbm::flex_pucch_dbm(const flex_pucch_dbm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&p0_pucch_dbm_, &from.p0_pucch_dbm_,
    static_cast<size_t>(reinterpret_cast<char*>(&p0_pucch_updated_) -
    reinterpret_cast<char*>(&p0_pucch_dbm_)) + sizeof(p0_pucch_updated_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_pucch_dbm)
}

void flex_pucch_dbm::SharedCtor() {
  ::memset(&p0_pucch_dbm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p0_pucch_updated_) -
      reinterpret_cast<char*>(&p0_pucch_dbm_)) + sizeof(p0_pucch_updated_));
}

flex_pucch_dbm::~flex_pucch_dbm() {
  // @@protoc_insertion_point(destructor:protocol.flex_pucch_dbm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_pucch_dbm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_pucch_dbm::ArenaDtor(void* object) {
  flex_pucch_dbm* _this = reinterpret_cast< flex_pucch_dbm* >(object);
  (void)_this;
}
void flex_pucch_dbm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_pucch_dbm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_pucch_dbm& flex_pucch_dbm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_pucch_dbm_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_pucch_dbm::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_pucch_dbm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&p0_pucch_dbm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p0_pucch_updated_) -
        reinterpret_cast<char*>(&p0_pucch_dbm_)) + sizeof(p0_pucch_updated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_pucch_dbm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 p0_pucch_dbm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_p0_pucch_dbm(&has_bits);
          p0_pucch_dbm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 serv_cell_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_serv_cell_index(&has_bits);
          serv_cell_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 p0_pucch_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_p0_pucch_updated(&has_bits);
          p0_pucch_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_pucch_dbm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_pucch_dbm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 p0_pucch_dbm = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_p0_pucch_dbm(), target);
  }

  // optional uint32 serv_cell_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serv_cell_index(), target);
  }

  // optional uint32 p0_pucch_updated = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_p0_pucch_updated(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_pucch_dbm)
  return target;
}

size_t flex_pucch_dbm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_pucch_dbm)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 p0_pucch_dbm = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_p0_pucch_dbm());
    }

    // optional uint32 serv_cell_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_serv_cell_index());
    }

    // optional uint32 p0_pucch_updated = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_p0_pucch_updated());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_pucch_dbm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_pucch_dbm)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_pucch_dbm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_pucch_dbm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_pucch_dbm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_pucch_dbm)
    MergeFrom(*source);
  }
}

void flex_pucch_dbm::MergeFrom(const flex_pucch_dbm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_pucch_dbm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      p0_pucch_dbm_ = from.p0_pucch_dbm_;
    }
    if (cached_has_bits & 0x00000002u) {
      serv_cell_index_ = from.serv_cell_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      p0_pucch_updated_ = from.p0_pucch_updated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_pucch_dbm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_pucch_dbm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_pucch_dbm::CopyFrom(const flex_pucch_dbm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_pucch_dbm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_pucch_dbm::IsInitialized() const {
  return true;
}

void flex_pucch_dbm::InternalSwap(flex_pucch_dbm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_pucch_dbm, p0_pucch_updated_)
      + sizeof(flex_pucch_dbm::p0_pucch_updated_)
      - PROTOBUF_FIELD_OFFSET(flex_pucch_dbm, p0_pucch_dbm_)>(
          reinterpret_cast<char*>(&p0_pucch_dbm_),
          reinterpret_cast<char*>(&other->p0_pucch_dbm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_pucch_dbm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_noise_interference_report::InitAsDefaultInstance() {
}
class flex_noise_interference_report::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_noise_interference_report>()._has_bits_);
  static void set_has_sfn_sf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tnp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p0_nominal_pucch(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_noise_interference_report::flex_noise_interference_report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_noise_interference_report)
}
flex_noise_interference_report::flex_noise_interference_report(const flex_noise_interference_report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sfn_sf_, &from.sfn_sf_,
    static_cast<size_t>(reinterpret_cast<char*>(&p0_nominal_pucch_) -
    reinterpret_cast<char*>(&sfn_sf_)) + sizeof(p0_nominal_pucch_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_noise_interference_report)
}

void flex_noise_interference_report::SharedCtor() {
  ::memset(&sfn_sf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&p0_nominal_pucch_) -
      reinterpret_cast<char*>(&sfn_sf_)) + sizeof(p0_nominal_pucch_));
}

flex_noise_interference_report::~flex_noise_interference_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_noise_interference_report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_noise_interference_report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_noise_interference_report::ArenaDtor(void* object) {
  flex_noise_interference_report* _this = reinterpret_cast< flex_noise_interference_report* >(object);
  (void)_this;
}
void flex_noise_interference_report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_noise_interference_report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_noise_interference_report& flex_noise_interference_report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_noise_interference_report_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_noise_interference_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_noise_interference_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&sfn_sf_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p0_nominal_pucch_) -
        reinterpret_cast<char*>(&sfn_sf_)) + sizeof(p0_nominal_pucch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_noise_interference_report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sfn_sf = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sfn_sf(&has_bits);
          sfn_sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 rip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rip(&has_bits);
          rip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tnp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tnp(&has_bits);
          tnp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 p0_nominal_pucch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_p0_nominal_pucch(&has_bits);
          p0_nominal_pucch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_noise_interference_report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_noise_interference_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sfn_sf = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sfn_sf(), target);
  }

  // optional uint32 rip = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rip(), target);
  }

  // optional uint32 tnp = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tnp(), target);
  }

  // optional int32 p0_nominal_pucch = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_p0_nominal_pucch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_noise_interference_report)
  return target;
}

size_t flex_noise_interference_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_noise_interference_report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 sfn_sf = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sfn_sf());
    }

    // optional uint32 rip = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rip());
    }

    // optional uint32 tnp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tnp());
    }

    // optional int32 p0_nominal_pucch = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_p0_nominal_pucch());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_noise_interference_report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_noise_interference_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_noise_interference_report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_noise_interference_report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_noise_interference_report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_noise_interference_report)
    MergeFrom(*source);
  }
}

void flex_noise_interference_report::MergeFrom(const flex_noise_interference_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_noise_interference_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      sfn_sf_ = from.sfn_sf_;
    }
    if (cached_has_bits & 0x00000002u) {
      rip_ = from.rip_;
    }
    if (cached_has_bits & 0x00000004u) {
      tnp_ = from.tnp_;
    }
    if (cached_has_bits & 0x00000008u) {
      p0_nominal_pucch_ = from.p0_nominal_pucch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_noise_interference_report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_noise_interference_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_noise_interference_report::CopyFrom(const flex_noise_interference_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_noise_interference_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_noise_interference_report::IsInitialized() const {
  return true;
}

void flex_noise_interference_report::InternalSwap(flex_noise_interference_report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_noise_interference_report, p0_nominal_pucch_)
      + sizeof(flex_noise_interference_report::p0_nominal_pucch_)
      - PROTOBUF_FIELD_OFFSET(flex_noise_interference_report, sfn_sf_)>(
          reinterpret_cast<char*>(&sfn_sf_),
          reinterpret_cast<char*>(&other->sfn_sf_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_noise_interference_report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_rrc_measurements::InitAsDefaultInstance() {
  ::protocol::_flex_rrc_measurements_default_instance_._instance.get_mutable()->neigh_meas_ = const_cast< ::protocol::flex_neigh_cells_measurements*>(
      ::protocol::flex_neigh_cells_measurements::internal_default_instance());
}
class flex_rrc_measurements::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_rrc_measurements>()._has_bits_);
  static void set_has_measid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pcell_rsrp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pcell_rsrq(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protocol::flex_neigh_cells_measurements& neigh_meas(const flex_rrc_measurements* msg);
  static void set_has_neigh_meas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_neigh_cells_measurements&
flex_rrc_measurements::_Internal::neigh_meas(const flex_rrc_measurements* msg) {
  return *msg->neigh_meas_;
}
flex_rrc_measurements::flex_rrc_measurements(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_rrc_measurements)
}
flex_rrc_measurements::flex_rrc_measurements(const flex_rrc_measurements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_neigh_meas()) {
    neigh_meas_ = new ::protocol::flex_neigh_cells_measurements(*from.neigh_meas_);
  } else {
    neigh_meas_ = nullptr;
  }
  ::memcpy(&measid_, &from.measid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pcell_rsrq_) -
    reinterpret_cast<char*>(&measid_)) + sizeof(pcell_rsrq_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_rrc_measurements)
}

void flex_rrc_measurements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_rrc_measurements_stats_5fcommon_2eproto.base);
  ::memset(&neigh_meas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pcell_rsrq_) -
      reinterpret_cast<char*>(&neigh_meas_)) + sizeof(pcell_rsrq_));
}

flex_rrc_measurements::~flex_rrc_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_rrc_measurements)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_rrc_measurements::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete neigh_meas_;
}

void flex_rrc_measurements::ArenaDtor(void* object) {
  flex_rrc_measurements* _this = reinterpret_cast< flex_rrc_measurements* >(object);
  (void)_this;
}
void flex_rrc_measurements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_rrc_measurements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_rrc_measurements& flex_rrc_measurements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_rrc_measurements_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_rrc_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_rrc_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(neigh_meas_ != nullptr);
    neigh_meas_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&measid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pcell_rsrq_) -
        reinterpret_cast<char*>(&measid_)) + sizeof(pcell_rsrq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_rrc_measurements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 measid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_measid(&has_bits);
          measid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pcell_rsrp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pcell_rsrp(&has_bits);
          pcell_rsrp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 pcell_rsrq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pcell_rsrq(&has_bits);
          pcell_rsrq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_neigh_meas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_rrc_measurements::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_rrc_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 measid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_measid(), target);
  }

  // optional int32 pcell_rsrp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pcell_rsrp(), target);
  }

  // optional int32 pcell_rsrq = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pcell_rsrq(), target);
  }

  // optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::neigh_meas(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_rrc_measurements)
  return target;
}

size_t flex_rrc_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_rrc_measurements)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protocol.flex_neigh_cells_measurements neigh_meas = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *neigh_meas_);
    }

    // optional int32 measid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_measid());
    }

    // optional int32 pcell_rsrp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pcell_rsrp());
    }

    // optional int32 pcell_rsrq = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_pcell_rsrq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_rrc_measurements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_rrc_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_rrc_measurements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_rrc_measurements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_rrc_measurements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_rrc_measurements)
    MergeFrom(*source);
  }
}

void flex_rrc_measurements::MergeFrom(const flex_rrc_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_rrc_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_neigh_meas()->::protocol::flex_neigh_cells_measurements::MergeFrom(from._internal_neigh_meas());
    }
    if (cached_has_bits & 0x00000002u) {
      measid_ = from.measid_;
    }
    if (cached_has_bits & 0x00000004u) {
      pcell_rsrp_ = from.pcell_rsrp_;
    }
    if (cached_has_bits & 0x00000008u) {
      pcell_rsrq_ = from.pcell_rsrq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_rrc_measurements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_rrc_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_rrc_measurements::CopyFrom(const flex_rrc_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_rrc_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_rrc_measurements::IsInitialized() const {
  return true;
}

void flex_rrc_measurements::InternalSwap(flex_rrc_measurements* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_rrc_measurements, pcell_rsrq_)
      + sizeof(flex_rrc_measurements::pcell_rsrq_)
      - PROTOBUF_FIELD_OFFSET(flex_rrc_measurements, neigh_meas_)>(
          reinterpret_cast<char*>(&neigh_meas_),
          reinterpret_cast<char*>(&other->neigh_meas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_rrc_measurements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_neigh_cells_measurements::InitAsDefaultInstance() {
}
class flex_neigh_cells_measurements::_Internal {
 public:
};

flex_neigh_cells_measurements::flex_neigh_cells_measurements(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  eutra_meas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_neigh_cells_measurements)
}
flex_neigh_cells_measurements::flex_neigh_cells_measurements(const flex_neigh_cells_measurements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      eutra_meas_(from.eutra_meas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_neigh_cells_measurements)
}

void flex_neigh_cells_measurements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto.base);
}

flex_neigh_cells_measurements::~flex_neigh_cells_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_neigh_cells_measurements)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_neigh_cells_measurements::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_neigh_cells_measurements::ArenaDtor(void* object) {
  flex_neigh_cells_measurements* _this = reinterpret_cast< flex_neigh_cells_measurements* >(object);
  (void)_this;
}
void flex_neigh_cells_measurements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_neigh_cells_measurements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_neigh_cells_measurements& flex_neigh_cells_measurements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_neigh_cells_measurements_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_neigh_cells_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_neigh_cells_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  eutra_meas_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_neigh_cells_measurements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.flex_eutra_measurements eutra_meas = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_eutra_meas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_neigh_cells_measurements::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_neigh_cells_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_eutra_measurements eutra_meas = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_eutra_meas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_eutra_meas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_neigh_cells_measurements)
  return target;
}

size_t flex_neigh_cells_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_neigh_cells_measurements)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_eutra_measurements eutra_meas = 1;
  total_size += 1UL * this->_internal_eutra_meas_size();
  for (const auto& msg : this->eutra_meas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_neigh_cells_measurements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_neigh_cells_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_neigh_cells_measurements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_neigh_cells_measurements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_neigh_cells_measurements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_neigh_cells_measurements)
    MergeFrom(*source);
  }
}

void flex_neigh_cells_measurements::MergeFrom(const flex_neigh_cells_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_neigh_cells_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  eutra_meas_.MergeFrom(from.eutra_meas_);
}

void flex_neigh_cells_measurements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_neigh_cells_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_neigh_cells_measurements::CopyFrom(const flex_neigh_cells_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_neigh_cells_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_neigh_cells_measurements::IsInitialized() const {
  return true;
}

void flex_neigh_cells_measurements::InternalSwap(flex_neigh_cells_measurements* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  eutra_meas_.InternalSwap(&other->eutra_meas_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_neigh_cells_measurements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_eutra_measurements::InitAsDefaultInstance() {
  ::protocol::_flex_eutra_measurements_default_instance_._instance.get_mutable()->cgi_meas_ = const_cast< ::protocol::flex_eutra_cgi_measurements*>(
      ::protocol::flex_eutra_cgi_measurements::internal_default_instance());
  ::protocol::_flex_eutra_measurements_default_instance_._instance.get_mutable()->meas_result_ = const_cast< ::protocol::flex_eutra_ref_signal_meas*>(
      ::protocol::flex_eutra_ref_signal_meas::internal_default_instance());
}
class flex_eutra_measurements::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_eutra_measurements>()._has_bits_);
  static void set_has_phys_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_eutra_cgi_measurements& cgi_meas(const flex_eutra_measurements* msg);
  static void set_has_cgi_meas(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protocol::flex_eutra_ref_signal_meas& meas_result(const flex_eutra_measurements* msg);
  static void set_has_meas_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_eutra_cgi_measurements&
flex_eutra_measurements::_Internal::cgi_meas(const flex_eutra_measurements* msg) {
  return *msg->cgi_meas_;
}
const ::protocol::flex_eutra_ref_signal_meas&
flex_eutra_measurements::_Internal::meas_result(const flex_eutra_measurements* msg) {
  return *msg->meas_result_;
}
flex_eutra_measurements::flex_eutra_measurements(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_eutra_measurements)
}
flex_eutra_measurements::flex_eutra_measurements(const flex_eutra_measurements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cgi_meas()) {
    cgi_meas_ = new ::protocol::flex_eutra_cgi_measurements(*from.cgi_meas_);
  } else {
    cgi_meas_ = nullptr;
  }
  if (from._internal_has_meas_result()) {
    meas_result_ = new ::protocol::flex_eutra_ref_signal_meas(*from.meas_result_);
  } else {
    meas_result_ = nullptr;
  }
  phys_cell_id_ = from.phys_cell_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_eutra_measurements)
}

void flex_eutra_measurements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_eutra_measurements_stats_5fcommon_2eproto.base);
  ::memset(&cgi_meas_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phys_cell_id_) -
      reinterpret_cast<char*>(&cgi_meas_)) + sizeof(phys_cell_id_));
}

flex_eutra_measurements::~flex_eutra_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_eutra_measurements)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_eutra_measurements::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cgi_meas_;
  if (this != internal_default_instance()) delete meas_result_;
}

void flex_eutra_measurements::ArenaDtor(void* object) {
  flex_eutra_measurements* _this = reinterpret_cast< flex_eutra_measurements* >(object);
  (void)_this;
}
void flex_eutra_measurements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_eutra_measurements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_eutra_measurements& flex_eutra_measurements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_eutra_measurements_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_eutra_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_eutra_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cgi_meas_ != nullptr);
      cgi_meas_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(meas_result_ != nullptr);
      meas_result_->Clear();
    }
  }
  phys_cell_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_eutra_measurements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 phys_cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_phys_cell_id(&has_bits);
          phys_cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgi_meas(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_meas_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_eutra_measurements::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_eutra_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 phys_cell_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_phys_cell_id(), target);
  }

  // optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cgi_meas(this), target, stream);
  }

  // optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::meas_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_eutra_measurements)
  return target;
}

size_t flex_eutra_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_eutra_measurements)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protocol.flex_eutra_cgi_measurements cgi_meas = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cgi_meas_);
    }

    // optional .protocol.flex_eutra_ref_signal_meas meas_result = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *meas_result_);
    }

    // optional int32 phys_cell_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_phys_cell_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_eutra_measurements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_eutra_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_eutra_measurements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_eutra_measurements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_eutra_measurements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_eutra_measurements)
    MergeFrom(*source);
  }
}

void flex_eutra_measurements::MergeFrom(const flex_eutra_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_eutra_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cgi_meas()->::protocol::flex_eutra_cgi_measurements::MergeFrom(from._internal_cgi_meas());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_meas_result()->::protocol::flex_eutra_ref_signal_meas::MergeFrom(from._internal_meas_result());
    }
    if (cached_has_bits & 0x00000004u) {
      phys_cell_id_ = from.phys_cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_eutra_measurements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_eutra_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_eutra_measurements::CopyFrom(const flex_eutra_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_eutra_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_eutra_measurements::IsInitialized() const {
  return true;
}

void flex_eutra_measurements::InternalSwap(flex_eutra_measurements* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_eutra_measurements, phys_cell_id_)
      + sizeof(flex_eutra_measurements::phys_cell_id_)
      - PROTOBUF_FIELD_OFFSET(flex_eutra_measurements, cgi_meas_)>(
          reinterpret_cast<char*>(&cgi_meas_),
          reinterpret_cast<char*>(&other->cgi_meas_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_eutra_measurements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_eutra_cgi_measurements::InitAsDefaultInstance() {
  ::protocol::_flex_eutra_cgi_measurements_default_instance_._instance.get_mutable()->cgi_ = const_cast< ::protocol::flex_cell_global_eutra_id*>(
      ::protocol::flex_cell_global_eutra_id::internal_default_instance());
}
class flex_eutra_cgi_measurements::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_eutra_cgi_measurements>()._has_bits_);
  static const ::protocol::flex_cell_global_eutra_id& cgi(const flex_eutra_cgi_measurements* msg);
  static void set_has_cgi(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tracking_area_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_cell_global_eutra_id&
flex_eutra_cgi_measurements::_Internal::cgi(const flex_eutra_cgi_measurements* msg) {
  return *msg->cgi_;
}
void flex_eutra_cgi_measurements::clear_plmn() {
  plmn_.Clear();
}
flex_eutra_cgi_measurements::flex_eutra_cgi_measurements(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  plmn_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_eutra_cgi_measurements)
}
flex_eutra_cgi_measurements::flex_eutra_cgi_measurements(const flex_eutra_cgi_measurements& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      plmn_(from.plmn_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cgi()) {
    cgi_ = new ::protocol::flex_cell_global_eutra_id(*from.cgi_);
  } else {
    cgi_ = nullptr;
  }
  tracking_area_code_ = from.tracking_area_code_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_eutra_cgi_measurements)
}

void flex_eutra_cgi_measurements::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto.base);
  ::memset(&cgi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracking_area_code_) -
      reinterpret_cast<char*>(&cgi_)) + sizeof(tracking_area_code_));
}

flex_eutra_cgi_measurements::~flex_eutra_cgi_measurements() {
  // @@protoc_insertion_point(destructor:protocol.flex_eutra_cgi_measurements)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_eutra_cgi_measurements::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cgi_;
}

void flex_eutra_cgi_measurements::ArenaDtor(void* object) {
  flex_eutra_cgi_measurements* _this = reinterpret_cast< flex_eutra_cgi_measurements* >(object);
  (void)_this;
}
void flex_eutra_cgi_measurements::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_eutra_cgi_measurements::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_eutra_cgi_measurements& flex_eutra_cgi_measurements::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_eutra_cgi_measurements_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_eutra_cgi_measurements::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_eutra_cgi_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plmn_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(cgi_ != nullptr);
    cgi_->Clear();
  }
  tracking_area_code_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_eutra_cgi_measurements::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_cell_global_eutra_id cgi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cgi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tracking_area_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tracking_area_code(&has_bits);
          tracking_area_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_plmn plmn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_plmn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_eutra_cgi_measurements::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_eutra_cgi_measurements)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_cell_global_eutra_id cgi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cgi(this), target, stream);
  }

  // optional uint32 tracking_area_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tracking_area_code(), target);
  }

  // repeated .protocol.flex_plmn plmn = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_plmn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_plmn(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_eutra_cgi_measurements)
  return target;
}

size_t flex_eutra_cgi_measurements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_eutra_cgi_measurements)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_plmn plmn = 3;
  total_size += 1UL * this->_internal_plmn_size();
  for (const auto& msg : this->plmn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_cell_global_eutra_id cgi = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cgi_);
    }

    // optional uint32 tracking_area_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tracking_area_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_eutra_cgi_measurements::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_eutra_cgi_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_eutra_cgi_measurements* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_eutra_cgi_measurements>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_eutra_cgi_measurements)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_eutra_cgi_measurements)
    MergeFrom(*source);
  }
}

void flex_eutra_cgi_measurements::MergeFrom(const flex_eutra_cgi_measurements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_eutra_cgi_measurements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  plmn_.MergeFrom(from.plmn_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cgi()->::protocol::flex_cell_global_eutra_id::MergeFrom(from._internal_cgi());
    }
    if (cached_has_bits & 0x00000002u) {
      tracking_area_code_ = from.tracking_area_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_eutra_cgi_measurements::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_eutra_cgi_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_eutra_cgi_measurements::CopyFrom(const flex_eutra_cgi_measurements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_eutra_cgi_measurements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_eutra_cgi_measurements::IsInitialized() const {
  return true;
}

void flex_eutra_cgi_measurements::InternalSwap(flex_eutra_cgi_measurements* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plmn_.InternalSwap(&other->plmn_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_eutra_cgi_measurements, tracking_area_code_)
      + sizeof(flex_eutra_cgi_measurements::tracking_area_code_)
      - PROTOBUF_FIELD_OFFSET(flex_eutra_cgi_measurements, cgi_)>(
          reinterpret_cast<char*>(&cgi_),
          reinterpret_cast<char*>(&other->cgi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_eutra_cgi_measurements::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_cell_global_eutra_id::InitAsDefaultInstance() {
  ::protocol::_flex_cell_global_eutra_id_default_instance_._instance.get_mutable()->plmn_ = const_cast< ::protocol::flex_plmn*>(
      ::protocol::flex_plmn::internal_default_instance());
}
class flex_cell_global_eutra_id::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_cell_global_eutra_id>()._has_bits_);
  static const ::protocol::flex_plmn& plmn(const flex_cell_global_eutra_id* msg);
  static void set_has_plmn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cell_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_plmn&
flex_cell_global_eutra_id::_Internal::plmn(const flex_cell_global_eutra_id* msg) {
  return *msg->plmn_;
}
void flex_cell_global_eutra_id::clear_plmn() {
  if (plmn_ != nullptr) plmn_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_cell_global_eutra_id::flex_cell_global_eutra_id(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_cell_global_eutra_id)
}
flex_cell_global_eutra_id::flex_cell_global_eutra_id(const flex_cell_global_eutra_id& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_plmn()) {
    plmn_ = new ::protocol::flex_plmn(*from.plmn_);
  } else {
    plmn_ = nullptr;
  }
  cell_id_ = from.cell_id_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_global_eutra_id)
}

void flex_cell_global_eutra_id::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto.base);
  ::memset(&plmn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_id_) -
      reinterpret_cast<char*>(&plmn_)) + sizeof(cell_id_));
}

flex_cell_global_eutra_id::~flex_cell_global_eutra_id() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_global_eutra_id)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_cell_global_eutra_id::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete plmn_;
}

void flex_cell_global_eutra_id::ArenaDtor(void* object) {
  flex_cell_global_eutra_id* _this = reinterpret_cast< flex_cell_global_eutra_id* >(object);
  (void)_this;
}
void flex_cell_global_eutra_id::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_cell_global_eutra_id::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_cell_global_eutra_id& flex_cell_global_eutra_id::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_cell_global_eutra_id_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_cell_global_eutra_id::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_global_eutra_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(plmn_ != nullptr);
    plmn_->Clear();
  }
  cell_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_cell_global_eutra_id::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_plmn plmn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plmn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_cell_id(&has_bits);
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_cell_global_eutra_id::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_global_eutra_id)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_plmn plmn = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plmn(this), target, stream);
  }

  // optional uint32 cell_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_cell_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_global_eutra_id)
  return target;
}

size_t flex_cell_global_eutra_id::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_global_eutra_id)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protocol.flex_plmn plmn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *plmn_);
    }

    // optional uint32 cell_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_cell_global_eutra_id::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_global_eutra_id)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_global_eutra_id* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_cell_global_eutra_id>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_global_eutra_id)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_global_eutra_id)
    MergeFrom(*source);
  }
}

void flex_cell_global_eutra_id::MergeFrom(const flex_cell_global_eutra_id& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_global_eutra_id)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_plmn()->::protocol::flex_plmn::MergeFrom(from._internal_plmn());
    }
    if (cached_has_bits & 0x00000002u) {
      cell_id_ = from.cell_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_cell_global_eutra_id::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_global_eutra_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_global_eutra_id::CopyFrom(const flex_cell_global_eutra_id& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_global_eutra_id)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_global_eutra_id::IsInitialized() const {
  return true;
}

void flex_cell_global_eutra_id::InternalSwap(flex_cell_global_eutra_id* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_cell_global_eutra_id, cell_id_)
      + sizeof(flex_cell_global_eutra_id::cell_id_)
      - PROTOBUF_FIELD_OFFSET(flex_cell_global_eutra_id, plmn_)>(
          reinterpret_cast<char*>(&plmn_),
          reinterpret_cast<char*>(&other->plmn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_cell_global_eutra_id::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_eutra_ref_signal_meas::InitAsDefaultInstance() {
}
class flex_eutra_ref_signal_meas::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_eutra_ref_signal_meas>()._has_bits_);
  static void set_has_rsrp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rsrq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_eutra_ref_signal_meas::flex_eutra_ref_signal_meas(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_eutra_ref_signal_meas)
}
flex_eutra_ref_signal_meas::flex_eutra_ref_signal_meas(const flex_eutra_ref_signal_meas& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rsrp_, &from.rsrp_,
    static_cast<size_t>(reinterpret_cast<char*>(&rsrq_) -
    reinterpret_cast<char*>(&rsrp_)) + sizeof(rsrq_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_eutra_ref_signal_meas)
}

void flex_eutra_ref_signal_meas::SharedCtor() {
  ::memset(&rsrp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rsrq_) -
      reinterpret_cast<char*>(&rsrp_)) + sizeof(rsrq_));
}

flex_eutra_ref_signal_meas::~flex_eutra_ref_signal_meas() {
  // @@protoc_insertion_point(destructor:protocol.flex_eutra_ref_signal_meas)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_eutra_ref_signal_meas::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_eutra_ref_signal_meas::ArenaDtor(void* object) {
  flex_eutra_ref_signal_meas* _this = reinterpret_cast< flex_eutra_ref_signal_meas* >(object);
  (void)_this;
}
void flex_eutra_ref_signal_meas::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_eutra_ref_signal_meas::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_eutra_ref_signal_meas& flex_eutra_ref_signal_meas::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_eutra_ref_signal_meas_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_eutra_ref_signal_meas::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_eutra_ref_signal_meas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&rsrp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rsrq_) -
        reinterpret_cast<char*>(&rsrp_)) + sizeof(rsrq_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_eutra_ref_signal_meas::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 rsrp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rsrp(&has_bits);
          rsrp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rsrq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rsrq(&has_bits);
          rsrq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_eutra_ref_signal_meas::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_eutra_ref_signal_meas)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 rsrp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_rsrp(), target);
  }

  // optional int32 rsrq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rsrq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_eutra_ref_signal_meas)
  return target;
}

size_t flex_eutra_ref_signal_meas::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_eutra_ref_signal_meas)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 rsrp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rsrp());
    }

    // optional int32 rsrq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rsrq());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_eutra_ref_signal_meas::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_eutra_ref_signal_meas)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_eutra_ref_signal_meas* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_eutra_ref_signal_meas>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_eutra_ref_signal_meas)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_eutra_ref_signal_meas)
    MergeFrom(*source);
  }
}

void flex_eutra_ref_signal_meas::MergeFrom(const flex_eutra_ref_signal_meas& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_eutra_ref_signal_meas)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      rsrp_ = from.rsrp_;
    }
    if (cached_has_bits & 0x00000002u) {
      rsrq_ = from.rsrq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_eutra_ref_signal_meas::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_eutra_ref_signal_meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_eutra_ref_signal_meas::CopyFrom(const flex_eutra_ref_signal_meas& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_eutra_ref_signal_meas)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_eutra_ref_signal_meas::IsInitialized() const {
  return true;
}

void flex_eutra_ref_signal_meas::InternalSwap(flex_eutra_ref_signal_meas* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_eutra_ref_signal_meas, rsrq_)
      + sizeof(flex_eutra_ref_signal_meas::rsrq_)
      - PROTOBUF_FIELD_OFFSET(flex_eutra_ref_signal_meas, rsrp_)>(
          reinterpret_cast<char*>(&rsrp_),
          reinterpret_cast<char*>(&other->rsrp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_eutra_ref_signal_meas::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_pdcp_stats::InitAsDefaultInstance() {
}
class flex_pdcp_stats::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_pdcp_stats>()._has_bits_);
  static void set_has_pkt_tx(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pkt_tx_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pkt_tx_sn(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pkt_tx_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_pkt_tx_bytes_w(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_pkt_tx_aiat(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pkt_tx_aiat_w(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pkt_rx(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_pkt_rx_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pkt_rx_sn(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pkt_rx_w(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_pkt_rx_bytes_w(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_pkt_rx_aiat(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_pkt_rx_aiat_w(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_pkt_rx_oo(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sfn(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
};

flex_pdcp_stats::flex_pdcp_stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_pdcp_stats)
}
flex_pdcp_stats::flex_pdcp_stats(const flex_pdcp_stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pkt_tx_, &from.pkt_tx_,
    static_cast<size_t>(reinterpret_cast<char*>(&pkt_rx_oo_) -
    reinterpret_cast<char*>(&pkt_tx_)) + sizeof(pkt_rx_oo_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_pdcp_stats)
}

void flex_pdcp_stats::SharedCtor() {
  ::memset(&pkt_tx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pkt_rx_oo_) -
      reinterpret_cast<char*>(&pkt_tx_)) + sizeof(pkt_rx_oo_));
}

flex_pdcp_stats::~flex_pdcp_stats() {
  // @@protoc_insertion_point(destructor:protocol.flex_pdcp_stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_pdcp_stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_pdcp_stats::ArenaDtor(void* object) {
  flex_pdcp_stats* _this = reinterpret_cast< flex_pdcp_stats* >(object);
  (void)_this;
}
void flex_pdcp_stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_pdcp_stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_pdcp_stats& flex_pdcp_stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_pdcp_stats_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_pdcp_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_pdcp_stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pkt_tx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pkt_rx_) -
        reinterpret_cast<char*>(&pkt_tx_)) + sizeof(pkt_rx_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&pkt_rx_bytes_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pkt_rx_oo_) -
        reinterpret_cast<char*>(&pkt_rx_bytes_)) + sizeof(pkt_rx_oo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_pdcp_stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 pkt_tx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pkt_tx(&has_bits);
          pkt_tx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_tx_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pkt_tx_bytes(&has_bits);
          pkt_tx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_tx_sn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_pkt_tx_sn(&has_bits);
          pkt_tx_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_tx_w = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_pkt_tx_w(&has_bits);
          pkt_tx_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_tx_bytes_w = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_pkt_tx_bytes_w(&has_bits);
          pkt_tx_bytes_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_tx_aiat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pkt_tx_aiat(&has_bits);
          pkt_tx_aiat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_tx_aiat_w = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_pkt_tx_aiat_w(&has_bits);
          pkt_tx_aiat_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_pkt_rx(&has_bits);
          pkt_rx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pkt_rx_bytes(&has_bits);
          pkt_rx_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx_sn = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_pkt_rx_sn(&has_bits);
          pkt_rx_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx_w = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_pkt_rx_w(&has_bits);
          pkt_rx_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx_bytes_w = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_pkt_rx_bytes_w(&has_bits);
          pkt_rx_bytes_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx_aiat = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_pkt_rx_aiat(&has_bits);
          pkt_rx_aiat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx_aiat_w = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_pkt_rx_aiat_w(&has_bits);
          pkt_rx_aiat_w_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pkt_rx_oo = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_pkt_rx_oo(&has_bits);
          pkt_rx_oo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 sfn = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_sfn(&has_bits);
          sfn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_pdcp_stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_pdcp_stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pkt_tx = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pkt_tx(), target);
  }

  // optional uint32 pkt_tx_bytes = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pkt_tx_bytes(), target);
  }

  // optional uint32 pkt_tx_sn = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_pkt_tx_sn(), target);
  }

  // optional uint32 pkt_tx_w = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_pkt_tx_w(), target);
  }

  // optional uint32 pkt_tx_bytes_w = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_pkt_tx_bytes_w(), target);
  }

  // optional uint32 pkt_tx_aiat = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pkt_tx_aiat(), target);
  }

  // optional uint32 pkt_tx_aiat_w = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_pkt_tx_aiat_w(), target);
  }

  // optional uint32 pkt_rx = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pkt_rx(), target);
  }

  // optional uint32 pkt_rx_bytes = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pkt_rx_bytes(), target);
  }

  // optional uint32 pkt_rx_sn = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_pkt_rx_sn(), target);
  }

  // optional uint32 pkt_rx_w = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_pkt_rx_w(), target);
  }

  // optional uint32 pkt_rx_bytes_w = 13;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_pkt_rx_bytes_w(), target);
  }

  // optional uint32 pkt_rx_aiat = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_pkt_rx_aiat(), target);
  }

  // optional uint32 pkt_rx_aiat_w = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_pkt_rx_aiat_w(), target);
  }

  // optional uint32 pkt_rx_oo = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_pkt_rx_oo(), target);
  }

  // optional uint64 sfn = 17;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_sfn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_pdcp_stats)
  return target;
}

size_t flex_pdcp_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_pdcp_stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 pkt_tx = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_tx());
    }

    // optional uint32 pkt_tx_bytes = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_tx_bytes());
    }

    // optional uint32 pkt_tx_sn = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_tx_sn());
    }

    // optional uint32 pkt_tx_w = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_tx_w());
    }

    // optional uint32 pkt_tx_bytes_w = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_tx_bytes_w());
    }

    // optional uint32 pkt_tx_aiat = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_tx_aiat());
    }

    // optional uint32 pkt_tx_aiat_w = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_tx_aiat_w());
    }

    // optional uint32 pkt_rx = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 pkt_rx_bytes = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx_bytes());
    }

    // optional uint32 pkt_rx_sn = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx_sn());
    }

    // optional uint32 pkt_rx_w = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx_w());
    }

    // optional uint32 pkt_rx_bytes_w = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx_bytes_w());
    }

    // optional uint32 pkt_rx_aiat = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx_aiat());
    }

    // optional uint32 pkt_rx_aiat_w = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx_aiat_w());
    }

    // optional uint64 sfn = 17;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_sfn());
    }

    // optional uint32 pkt_rx_oo = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pkt_rx_oo());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_pdcp_stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_pdcp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_pdcp_stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_pdcp_stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_pdcp_stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_pdcp_stats)
    MergeFrom(*source);
  }
}

void flex_pdcp_stats::MergeFrom(const flex_pdcp_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_pdcp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pkt_tx_ = from.pkt_tx_;
    }
    if (cached_has_bits & 0x00000002u) {
      pkt_tx_bytes_ = from.pkt_tx_bytes_;
    }
    if (cached_has_bits & 0x00000004u) {
      pkt_tx_sn_ = from.pkt_tx_sn_;
    }
    if (cached_has_bits & 0x00000008u) {
      pkt_tx_w_ = from.pkt_tx_w_;
    }
    if (cached_has_bits & 0x00000010u) {
      pkt_tx_bytes_w_ = from.pkt_tx_bytes_w_;
    }
    if (cached_has_bits & 0x00000020u) {
      pkt_tx_aiat_ = from.pkt_tx_aiat_;
    }
    if (cached_has_bits & 0x00000040u) {
      pkt_tx_aiat_w_ = from.pkt_tx_aiat_w_;
    }
    if (cached_has_bits & 0x00000080u) {
      pkt_rx_ = from.pkt_rx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      pkt_rx_bytes_ = from.pkt_rx_bytes_;
    }
    if (cached_has_bits & 0x00000200u) {
      pkt_rx_sn_ = from.pkt_rx_sn_;
    }
    if (cached_has_bits & 0x00000400u) {
      pkt_rx_w_ = from.pkt_rx_w_;
    }
    if (cached_has_bits & 0x00000800u) {
      pkt_rx_bytes_w_ = from.pkt_rx_bytes_w_;
    }
    if (cached_has_bits & 0x00001000u) {
      pkt_rx_aiat_ = from.pkt_rx_aiat_;
    }
    if (cached_has_bits & 0x00002000u) {
      pkt_rx_aiat_w_ = from.pkt_rx_aiat_w_;
    }
    if (cached_has_bits & 0x00004000u) {
      sfn_ = from.sfn_;
    }
    if (cached_has_bits & 0x00008000u) {
      pkt_rx_oo_ = from.pkt_rx_oo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_pdcp_stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_pdcp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_pdcp_stats::CopyFrom(const flex_pdcp_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_pdcp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_pdcp_stats::IsInitialized() const {
  return true;
}

void flex_pdcp_stats::InternalSwap(flex_pdcp_stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_pdcp_stats, pkt_rx_oo_)
      + sizeof(flex_pdcp_stats::pkt_rx_oo_)
      - PROTOBUF_FIELD_OFFSET(flex_pdcp_stats, pkt_tx_)>(
          reinterpret_cast<char*>(&pkt_tx_),
          reinterpret_cast<char*>(&other->pkt_tx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_pdcp_stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_mac_stats::InitAsDefaultInstance() {
}
class flex_mac_stats::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_mac_stats>()._has_bits_);
  static void set_has_tbs_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tbs_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_prb_retx_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prb_retx_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_prb_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_prb_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mcs1_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mcs2_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_mcs1_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mcs2_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_total_bytes_sdus_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_total_bytes_sdus_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_total_prb_retx_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_total_prb_retx_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_total_prb_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_total_prb_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_total_pdu_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_total_pdu_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_total_tbs_dl(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_total_tbs_ul(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_harq_round(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
};

flex_mac_stats::flex_mac_stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  mac_sdus_dl_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_mac_stats)
}
flex_mac_stats::flex_mac_stats(const flex_mac_stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      mac_sdus_dl_(from.mac_sdus_dl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tbs_dl_, &from.tbs_dl_,
    static_cast<size_t>(reinterpret_cast<char*>(&harq_round_) -
    reinterpret_cast<char*>(&tbs_dl_)) + sizeof(harq_round_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_mac_stats)
}

void flex_mac_stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_mac_stats_stats_5fcommon_2eproto.base);
  ::memset(&tbs_dl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&harq_round_) -
      reinterpret_cast<char*>(&tbs_dl_)) + sizeof(harq_round_));
}

flex_mac_stats::~flex_mac_stats() {
  // @@protoc_insertion_point(destructor:protocol.flex_mac_stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_mac_stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_mac_stats::ArenaDtor(void* object) {
  flex_mac_stats* _this = reinterpret_cast< flex_mac_stats* >(object);
  (void)_this;
}
void flex_mac_stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_mac_stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_mac_stats& flex_mac_stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_mac_stats_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_mac_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_mac_stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mac_sdus_dl_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tbs_dl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mcs2_dl_) -
        reinterpret_cast<char*>(&tbs_dl_)) + sizeof(mcs2_dl_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mcs1_ul_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_prb_ul_) -
        reinterpret_cast<char*>(&mcs1_ul_)) + sizeof(total_prb_ul_));
  }
  if (cached_has_bits & 0x001f0000u) {
    ::memset(&total_pdu_dl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&harq_round_) -
        reinterpret_cast<char*>(&total_pdu_dl_)) + sizeof(harq_round_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_mac_stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 tbs_dl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tbs_dl(&has_bits);
          tbs_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tbs_ul = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tbs_ul(&has_bits);
          tbs_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prb_retx_dl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prb_retx_dl(&has_bits);
          prb_retx_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prb_retx_ul = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_prb_retx_ul(&has_bits);
          prb_retx_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prb_dl = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_prb_dl(&has_bits);
          prb_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 prb_ul = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_prb_ul(&has_bits);
          prb_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mcs1_dl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_mcs1_dl(&has_bits);
          mcs1_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mcs2_dl = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_mcs2_dl(&has_bits);
          mcs2_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mcs1_ul = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_mcs1_ul(&has_bits);
          mcs1_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mcs2_ul = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_mcs2_ul(&has_bits);
          mcs2_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_bytes_sdus_ul = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_total_bytes_sdus_ul(&has_bits);
          total_bytes_sdus_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_bytes_sdus_dl = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_total_bytes_sdus_dl(&has_bits);
          total_bytes_sdus_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_prb_retx_dl = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_total_prb_retx_dl(&has_bits);
          total_prb_retx_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_prb_retx_ul = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_total_prb_retx_ul(&has_bits);
          total_prb_retx_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_prb_dl = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_total_prb_dl(&has_bits);
          total_prb_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_prb_ul = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_total_prb_ul(&has_bits);
          total_prb_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_pdu_dl = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_total_pdu_dl(&has_bits);
          total_pdu_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_pdu_ul = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_total_pdu_ul(&has_bits);
          total_pdu_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_tbs_dl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_total_tbs_dl(&has_bits);
          total_tbs_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 total_tbs_ul = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_total_tbs_ul(&has_bits);
          total_tbs_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_mac_sdus_dl(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 harq_round = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_harq_round(&has_bits);
          harq_round_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_mac_stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_mac_stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tbs_dl = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tbs_dl(), target);
  }

  // optional uint32 tbs_ul = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tbs_ul(), target);
  }

  // optional uint32 prb_retx_dl = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_prb_retx_dl(), target);
  }

  // optional uint32 prb_retx_ul = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_prb_retx_ul(), target);
  }

  // optional uint32 prb_dl = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_prb_dl(), target);
  }

  // optional uint32 prb_ul = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_prb_ul(), target);
  }

  // optional uint32 mcs1_dl = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_mcs1_dl(), target);
  }

  // optional uint32 mcs2_dl = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_mcs2_dl(), target);
  }

  // optional uint32 mcs1_ul = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_mcs1_ul(), target);
  }

  // optional uint32 mcs2_ul = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_mcs2_ul(), target);
  }

  // optional uint32 total_bytes_sdus_ul = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_total_bytes_sdus_ul(), target);
  }

  // optional uint32 total_bytes_sdus_dl = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_total_bytes_sdus_dl(), target);
  }

  // optional uint32 total_prb_retx_dl = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_total_prb_retx_dl(), target);
  }

  // optional uint32 total_prb_retx_ul = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_total_prb_retx_ul(), target);
  }

  // optional uint32 total_prb_dl = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_total_prb_dl(), target);
  }

  // optional uint32 total_prb_ul = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_total_prb_ul(), target);
  }

  // optional uint32 total_pdu_dl = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_total_pdu_dl(), target);
  }

  // optional uint32 total_pdu_ul = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_total_pdu_ul(), target);
  }

  // optional uint32 total_tbs_dl = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_total_tbs_dl(), target);
  }

  // optional uint32 total_tbs_ul = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_total_tbs_ul(), target);
  }

  // repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mac_sdus_dl_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_mac_sdus_dl(i), target, stream);
  }

  // optional uint32 harq_round = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_harq_round(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_mac_stats)
  return target;
}

size_t flex_mac_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_mac_stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_mac_sdus_dl mac_sdus_dl = 21;
  total_size += 2UL * this->_internal_mac_sdus_dl_size();
  for (const auto& msg : this->mac_sdus_dl_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tbs_dl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tbs_dl());
    }

    // optional uint32 tbs_ul = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tbs_ul());
    }

    // optional uint32 prb_retx_dl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prb_retx_dl());
    }

    // optional uint32 prb_retx_ul = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prb_retx_ul());
    }

    // optional uint32 prb_dl = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prb_dl());
    }

    // optional uint32 prb_ul = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_prb_ul());
    }

    // optional uint32 mcs1_dl = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mcs1_dl());
    }

    // optional uint32 mcs2_dl = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mcs2_dl());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 mcs1_ul = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mcs1_ul());
    }

    // optional uint32 mcs2_ul = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mcs2_ul());
    }

    // optional uint32 total_bytes_sdus_ul = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_bytes_sdus_ul());
    }

    // optional uint32 total_bytes_sdus_dl = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_bytes_sdus_dl());
    }

    // optional uint32 total_prb_retx_dl = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_prb_retx_dl());
    }

    // optional uint32 total_prb_retx_ul = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_prb_retx_ul());
    }

    // optional uint32 total_prb_dl = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_prb_dl());
    }

    // optional uint32 total_prb_ul = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_prb_ul());
    }

  }
  if (cached_has_bits & 0x001f0000u) {
    // optional uint32 total_pdu_dl = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_pdu_dl());
    }

    // optional uint32 total_pdu_ul = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_pdu_ul());
    }

    // optional uint32 total_tbs_dl = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_tbs_dl());
    }

    // optional uint32 total_tbs_ul = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_total_tbs_ul());
    }

    // optional uint32 harq_round = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_harq_round());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_mac_stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_mac_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_mac_stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_mac_stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_mac_stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_mac_stats)
    MergeFrom(*source);
  }
}

void flex_mac_stats::MergeFrom(const flex_mac_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_mac_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mac_sdus_dl_.MergeFrom(from.mac_sdus_dl_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tbs_dl_ = from.tbs_dl_;
    }
    if (cached_has_bits & 0x00000002u) {
      tbs_ul_ = from.tbs_ul_;
    }
    if (cached_has_bits & 0x00000004u) {
      prb_retx_dl_ = from.prb_retx_dl_;
    }
    if (cached_has_bits & 0x00000008u) {
      prb_retx_ul_ = from.prb_retx_ul_;
    }
    if (cached_has_bits & 0x00000010u) {
      prb_dl_ = from.prb_dl_;
    }
    if (cached_has_bits & 0x00000020u) {
      prb_ul_ = from.prb_ul_;
    }
    if (cached_has_bits & 0x00000040u) {
      mcs1_dl_ = from.mcs1_dl_;
    }
    if (cached_has_bits & 0x00000080u) {
      mcs2_dl_ = from.mcs2_dl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mcs1_ul_ = from.mcs1_ul_;
    }
    if (cached_has_bits & 0x00000200u) {
      mcs2_ul_ = from.mcs2_ul_;
    }
    if (cached_has_bits & 0x00000400u) {
      total_bytes_sdus_ul_ = from.total_bytes_sdus_ul_;
    }
    if (cached_has_bits & 0x00000800u) {
      total_bytes_sdus_dl_ = from.total_bytes_sdus_dl_;
    }
    if (cached_has_bits & 0x00001000u) {
      total_prb_retx_dl_ = from.total_prb_retx_dl_;
    }
    if (cached_has_bits & 0x00002000u) {
      total_prb_retx_ul_ = from.total_prb_retx_ul_;
    }
    if (cached_has_bits & 0x00004000u) {
      total_prb_dl_ = from.total_prb_dl_;
    }
    if (cached_has_bits & 0x00008000u) {
      total_prb_ul_ = from.total_prb_ul_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x001f0000u) {
    if (cached_has_bits & 0x00010000u) {
      total_pdu_dl_ = from.total_pdu_dl_;
    }
    if (cached_has_bits & 0x00020000u) {
      total_pdu_ul_ = from.total_pdu_ul_;
    }
    if (cached_has_bits & 0x00040000u) {
      total_tbs_dl_ = from.total_tbs_dl_;
    }
    if (cached_has_bits & 0x00080000u) {
      total_tbs_ul_ = from.total_tbs_ul_;
    }
    if (cached_has_bits & 0x00100000u) {
      harq_round_ = from.harq_round_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_mac_stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_mac_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_mac_stats::CopyFrom(const flex_mac_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_mac_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_mac_stats::IsInitialized() const {
  return true;
}

void flex_mac_stats::InternalSwap(flex_mac_stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mac_sdus_dl_.InternalSwap(&other->mac_sdus_dl_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_mac_stats, harq_round_)
      + sizeof(flex_mac_stats::harq_round_)
      - PROTOBUF_FIELD_OFFSET(flex_mac_stats, tbs_dl_)>(
          reinterpret_cast<char*>(&tbs_dl_),
          reinterpret_cast<char*>(&other->tbs_dl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_mac_stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_mac_sdus_dl::InitAsDefaultInstance() {
}
class flex_mac_sdus_dl::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_mac_sdus_dl>()._has_bits_);
  static void set_has_sdu_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lcid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_mac_sdus_dl::flex_mac_sdus_dl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_mac_sdus_dl)
}
flex_mac_sdus_dl::flex_mac_sdus_dl(const flex_mac_sdus_dl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&sdu_length_, &from.sdu_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&lcid_) -
    reinterpret_cast<char*>(&sdu_length_)) + sizeof(lcid_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_mac_sdus_dl)
}

void flex_mac_sdus_dl::SharedCtor() {
  ::memset(&sdu_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lcid_) -
      reinterpret_cast<char*>(&sdu_length_)) + sizeof(lcid_));
}

flex_mac_sdus_dl::~flex_mac_sdus_dl() {
  // @@protoc_insertion_point(destructor:protocol.flex_mac_sdus_dl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_mac_sdus_dl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_mac_sdus_dl::ArenaDtor(void* object) {
  flex_mac_sdus_dl* _this = reinterpret_cast< flex_mac_sdus_dl* >(object);
  (void)_this;
}
void flex_mac_sdus_dl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_mac_sdus_dl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_mac_sdus_dl& flex_mac_sdus_dl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_mac_sdus_dl_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_mac_sdus_dl::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_mac_sdus_dl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sdu_length_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lcid_) -
        reinterpret_cast<char*>(&sdu_length_)) + sizeof(lcid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_mac_sdus_dl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 sdu_length = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sdu_length(&has_bits);
          sdu_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 lcid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lcid(&has_bits);
          lcid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_mac_sdus_dl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_mac_sdus_dl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdu_length = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sdu_length(), target);
  }

  // optional uint32 lcid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_lcid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_mac_sdus_dl)
  return target;
}

size_t flex_mac_sdus_dl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_mac_sdus_dl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 sdu_length = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sdu_length());
    }

    // optional uint32 lcid = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lcid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_mac_sdus_dl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_mac_sdus_dl)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_mac_sdus_dl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_mac_sdus_dl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_mac_sdus_dl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_mac_sdus_dl)
    MergeFrom(*source);
  }
}

void flex_mac_sdus_dl::MergeFrom(const flex_mac_sdus_dl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_mac_sdus_dl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sdu_length_ = from.sdu_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      lcid_ = from.lcid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_mac_sdus_dl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_mac_sdus_dl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_mac_sdus_dl::CopyFrom(const flex_mac_sdus_dl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_mac_sdus_dl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_mac_sdus_dl::IsInitialized() const {
  return true;
}

void flex_mac_sdus_dl::InternalSwap(flex_mac_sdus_dl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_mac_sdus_dl, lcid_)
      + sizeof(flex_mac_sdus_dl::lcid_)
      - PROTOBUF_FIELD_OFFSET(flex_mac_sdus_dl, sdu_length_)>(
          reinterpret_cast<char*>(&sdu_length_),
          reinterpret_cast<char*>(&other->sdu_length_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_mac_sdus_dl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_gtp_stats::InitAsDefaultInstance() {
}
class flex_gtp_stats::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_gtp_stats>()._has_bits_);
  static void set_has_e_rab_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_teid_enb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_addr_enb(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_teid_sgw(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_addr_sgw(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

flex_gtp_stats::flex_gtp_stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_gtp_stats)
}
flex_gtp_stats::flex_gtp_stats(const flex_gtp_stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  addr_enb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addr_enb()) {
    addr_enb_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr_enb(),
      GetArena());
  }
  addr_sgw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_addr_sgw()) {
    addr_sgw_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_addr_sgw(),
      GetArena());
  }
  ::memcpy(&e_rab_id_, &from.e_rab_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&teid_sgw_) -
    reinterpret_cast<char*>(&e_rab_id_)) + sizeof(teid_sgw_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_gtp_stats)
}

void flex_gtp_stats::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_gtp_stats_stats_5fcommon_2eproto.base);
  addr_enb_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_sgw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&e_rab_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&teid_sgw_) -
      reinterpret_cast<char*>(&e_rab_id_)) + sizeof(teid_sgw_));
}

flex_gtp_stats::~flex_gtp_stats() {
  // @@protoc_insertion_point(destructor:protocol.flex_gtp_stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_gtp_stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  addr_enb_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_sgw_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void flex_gtp_stats::ArenaDtor(void* object) {
  flex_gtp_stats* _this = reinterpret_cast< flex_gtp_stats* >(object);
  (void)_this;
}
void flex_gtp_stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_gtp_stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_gtp_stats& flex_gtp_stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_gtp_stats_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_gtp_stats::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_gtp_stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      addr_enb_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      addr_sgw_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&e_rab_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&teid_sgw_) -
        reinterpret_cast<char*>(&e_rab_id_)) + sizeof(teid_sgw_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_gtp_stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 e_rab_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_e_rab_id(&has_bits);
          e_rab_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teid_enb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_teid_enb(&has_bits);
          teid_enb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string addr_enb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_addr_enb();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_gtp_stats.addr_enb");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 teid_sgw = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_teid_sgw(&has_bits);
          teid_sgw_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string addr_sgw = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_addr_sgw();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_gtp_stats.addr_sgw");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_gtp_stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_gtp_stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 e_rab_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_e_rab_id(), target);
  }

  // optional uint32 teid_enb = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_teid_enb(), target);
  }

  // optional string addr_enb = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addr_enb().data(), static_cast<int>(this->_internal_addr_enb().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_gtp_stats.addr_enb");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addr_enb(), target);
  }

  // optional uint32 teid_sgw = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_teid_sgw(), target);
  }

  // optional string addr_sgw = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_addr_sgw().data(), static_cast<int>(this->_internal_addr_sgw().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_gtp_stats.addr_sgw");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_addr_sgw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_gtp_stats)
  return target;
}

size_t flex_gtp_stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_gtp_stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string addr_enb = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addr_enb());
    }

    // optional string addr_sgw = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_addr_sgw());
    }

    // optional uint32 e_rab_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_e_rab_id());
    }

    // optional uint32 teid_enb = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teid_enb());
    }

    // optional uint32 teid_sgw = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_teid_sgw());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_gtp_stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_gtp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_gtp_stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_gtp_stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_gtp_stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_gtp_stats)
    MergeFrom(*source);
  }
}

void flex_gtp_stats::MergeFrom(const flex_gtp_stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_gtp_stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_addr_enb(from._internal_addr_enb());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_addr_sgw(from._internal_addr_sgw());
    }
    if (cached_has_bits & 0x00000004u) {
      e_rab_id_ = from.e_rab_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      teid_enb_ = from.teid_enb_;
    }
    if (cached_has_bits & 0x00000010u) {
      teid_sgw_ = from.teid_sgw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_gtp_stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_gtp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_gtp_stats::CopyFrom(const flex_gtp_stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_gtp_stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_gtp_stats::IsInitialized() const {
  return true;
}

void flex_gtp_stats::InternalSwap(flex_gtp_stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  addr_enb_.Swap(&other->addr_enb_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  addr_sgw_.Swap(&other->addr_sgw_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_gtp_stats, teid_sgw_)
      + sizeof(flex_gtp_stats::teid_sgw_)
      - PROTOBUF_FIELD_OFFSET(flex_gtp_stats, e_rab_id_)>(
          reinterpret_cast<char*>(&e_rab_id_),
          reinterpret_cast<char*>(&other->e_rab_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_gtp_stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_s1ap_ue::InitAsDefaultInstance() {
  ::protocol::_flex_s1ap_ue_default_instance_._instance.get_mutable()->selected_plmn_ = const_cast< ::protocol::flex_plmn*>(
      ::protocol::flex_plmn::internal_default_instance());
}
class flex_s1ap_ue::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_s1ap_ue>()._has_bits_);
  static void set_has_mme_s1_ip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_enb_ue_s1ap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mme_ue_s1ap_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protocol::flex_plmn& selected_plmn(const flex_s1ap_ue* msg);
  static void set_has_selected_plmn(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::protocol::flex_plmn&
flex_s1ap_ue::_Internal::selected_plmn(const flex_s1ap_ue* msg) {
  return *msg->selected_plmn_;
}
void flex_s1ap_ue::clear_selected_plmn() {
  if (selected_plmn_ != nullptr) selected_plmn_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
flex_s1ap_ue::flex_s1ap_ue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_s1ap_ue)
}
flex_s1ap_ue::flex_s1ap_ue(const flex_s1ap_ue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mme_s1_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_mme_s1_ip()) {
    mme_s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mme_s1_ip(),
      GetArena());
  }
  if (from._internal_has_selected_plmn()) {
    selected_plmn_ = new ::protocol::flex_plmn(*from.selected_plmn_);
  } else {
    selected_plmn_ = nullptr;
  }
  ::memcpy(&enb_ue_s1ap_id_, &from.enb_ue_s1ap_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&mme_ue_s1ap_id_) -
    reinterpret_cast<char*>(&enb_ue_s1ap_id_)) + sizeof(mme_ue_s1ap_id_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_s1ap_ue)
}

void flex_s1ap_ue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_s1ap_ue_stats_5fcommon_2eproto.base);
  mme_s1_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&selected_plmn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mme_ue_s1ap_id_) -
      reinterpret_cast<char*>(&selected_plmn_)) + sizeof(mme_ue_s1ap_id_));
}

flex_s1ap_ue::~flex_s1ap_ue() {
  // @@protoc_insertion_point(destructor:protocol.flex_s1ap_ue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_s1ap_ue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  mme_s1_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete selected_plmn_;
}

void flex_s1ap_ue::ArenaDtor(void* object) {
  flex_s1ap_ue* _this = reinterpret_cast< flex_s1ap_ue* >(object);
  (void)_this;
}
void flex_s1ap_ue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_s1ap_ue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_s1ap_ue& flex_s1ap_ue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_s1ap_ue_stats_5fcommon_2eproto.base);
  return *internal_default_instance();
}


void flex_s1ap_ue::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_s1ap_ue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mme_s1_ip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(selected_plmn_ != nullptr);
      selected_plmn_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&enb_ue_s1ap_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&mme_ue_s1ap_id_) -
        reinterpret_cast<char*>(&enb_ue_s1ap_id_)) + sizeof(mme_ue_s1ap_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_s1ap_ue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string mme_s1_ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_mme_s1_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protocol.flex_s1ap_ue.mme_s1_ip");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 enb_ue_s1ap_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_enb_ue_s1ap_id(&has_bits);
          enb_ue_s1ap_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 mme_ue_s1ap_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mme_ue_s1ap_id(&has_bits);
          mme_ue_s1ap_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_plmn selected_plmn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selected_plmn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_s1ap_ue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_s1ap_ue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string mme_s1_ip = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_mme_s1_ip().data(), static_cast<int>(this->_internal_mme_s1_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protocol.flex_s1ap_ue.mme_s1_ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mme_s1_ip(), target);
  }

  // optional uint32 enb_ue_s1ap_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_enb_ue_s1ap_id(), target);
  }

  // optional uint32 mme_ue_s1ap_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_mme_ue_s1ap_id(), target);
  }

  // optional .protocol.flex_plmn selected_plmn = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::selected_plmn(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_s1ap_ue)
  return target;
}

size_t flex_s1ap_ue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_s1ap_ue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string mme_s1_ip = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_mme_s1_ip());
    }

    // optional .protocol.flex_plmn selected_plmn = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *selected_plmn_);
    }

    // optional uint32 enb_ue_s1ap_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_enb_ue_s1ap_id());
    }

    // optional uint32 mme_ue_s1ap_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_mme_ue_s1ap_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_s1ap_ue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_s1ap_ue)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_s1ap_ue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_s1ap_ue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_s1ap_ue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_s1ap_ue)
    MergeFrom(*source);
  }
}

void flex_s1ap_ue::MergeFrom(const flex_s1ap_ue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_s1ap_ue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mme_s1_ip(from._internal_mme_s1_ip());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_selected_plmn()->::protocol::flex_plmn::MergeFrom(from._internal_selected_plmn());
    }
    if (cached_has_bits & 0x00000004u) {
      enb_ue_s1ap_id_ = from.enb_ue_s1ap_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      mme_ue_s1ap_id_ = from.mme_ue_s1ap_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_s1ap_ue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_s1ap_ue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_s1ap_ue::CopyFrom(const flex_s1ap_ue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_s1ap_ue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_s1ap_ue::IsInitialized() const {
  return true;
}

void flex_s1ap_ue::InternalSwap(flex_s1ap_ue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  mme_s1_ip_.Swap(&other->mme_s1_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_s1ap_ue, mme_ue_s1ap_id_)
      + sizeof(flex_s1ap_ue::mme_ue_s1ap_id_)
      - PROTOBUF_FIELD_OFFSET(flex_s1ap_ue, selected_plmn_)>(
          reinterpret_cast<char*>(&selected_plmn_),
          reinterpret_cast<char*>(&other->selected_plmn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_s1ap_ue::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flex_rlc_bsr* Arena::CreateMaybeMessage< ::protocol::flex_rlc_bsr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_rlc_bsr >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_p10* Arena::CreateMaybeMessage< ::protocol::flex_csi_p10 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_p10 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_p11* Arena::CreateMaybeMessage< ::protocol::flex_csi_p11 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_p11 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_p20* Arena::CreateMaybeMessage< ::protocol::flex_csi_p20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_p20 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_p21* Arena::CreateMaybeMessage< ::protocol::flex_csi_p21 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_p21 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_a12* Arena::CreateMaybeMessage< ::protocol::flex_csi_a12 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_a12 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_a22* Arena::CreateMaybeMessage< ::protocol::flex_csi_a22 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_a22 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_a20* Arena::CreateMaybeMessage< ::protocol::flex_csi_a20 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_a20 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_a30* Arena::CreateMaybeMessage< ::protocol::flex_csi_a30 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_a30 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_csi_a31* Arena::CreateMaybeMessage< ::protocol::flex_csi_a31 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_csi_a31 >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_msb_cqi* Arena::CreateMaybeMessage< ::protocol::flex_msb_cqi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_msb_cqi >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_csi* Arena::CreateMaybeMessage< ::protocol::flex_dl_csi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_csi >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_dl_cqi_report* Arena::CreateMaybeMessage< ::protocol::flex_dl_cqi_report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_dl_cqi_report >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_paging_info* Arena::CreateMaybeMessage< ::protocol::flex_paging_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_paging_info >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_paging_buffer_report* Arena::CreateMaybeMessage< ::protocol::flex_paging_buffer_report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_paging_buffer_report >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ul_cqi* Arena::CreateMaybeMessage< ::protocol::flex_ul_cqi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ul_cqi >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ul_cqi_report* Arena::CreateMaybeMessage< ::protocol::flex_ul_cqi_report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ul_cqi_report >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_pucch_dbm* Arena::CreateMaybeMessage< ::protocol::flex_pucch_dbm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_pucch_dbm >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_noise_interference_report* Arena::CreateMaybeMessage< ::protocol::flex_noise_interference_report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_noise_interference_report >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_rrc_measurements* Arena::CreateMaybeMessage< ::protocol::flex_rrc_measurements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_rrc_measurements >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_neigh_cells_measurements* Arena::CreateMaybeMessage< ::protocol::flex_neigh_cells_measurements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_neigh_cells_measurements >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_eutra_measurements* Arena::CreateMaybeMessage< ::protocol::flex_eutra_measurements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_eutra_measurements >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_eutra_cgi_measurements* Arena::CreateMaybeMessage< ::protocol::flex_eutra_cgi_measurements >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_eutra_cgi_measurements >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_cell_global_eutra_id* Arena::CreateMaybeMessage< ::protocol::flex_cell_global_eutra_id >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_cell_global_eutra_id >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_eutra_ref_signal_meas* Arena::CreateMaybeMessage< ::protocol::flex_eutra_ref_signal_meas >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_eutra_ref_signal_meas >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_pdcp_stats* Arena::CreateMaybeMessage< ::protocol::flex_pdcp_stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_pdcp_stats >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_mac_stats* Arena::CreateMaybeMessage< ::protocol::flex_mac_stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_mac_stats >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_mac_sdus_dl* Arena::CreateMaybeMessage< ::protocol::flex_mac_sdus_dl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_mac_sdus_dl >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_gtp_stats* Arena::CreateMaybeMessage< ::protocol::flex_gtp_stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_gtp_stats >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_s1ap_ue* Arena::CreateMaybeMessage< ::protocol::flex_s1ap_ue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_s1ap_ue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
