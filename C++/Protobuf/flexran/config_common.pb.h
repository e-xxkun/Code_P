// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fcommon_2eproto;
namespace protocol {
class flex_a1_event;
class flex_a1_eventDefaultTypeInternal;
extern flex_a1_eventDefaultTypeInternal _flex_a1_event_default_instance_;
class flex_a2_event;
class flex_a2_eventDefaultTypeInternal;
extern flex_a2_eventDefaultTypeInternal _flex_a2_event_default_instance_;
class flex_a3_event;
class flex_a3_eventDefaultTypeInternal;
extern flex_a3_eventDefaultTypeInternal _flex_a3_event_default_instance_;
class flex_a4_event;
class flex_a4_eventDefaultTypeInternal;
extern flex_a4_eventDefaultTypeInternal _flex_a4_event_default_instance_;
class flex_a5_event;
class flex_a5_eventDefaultTypeInternal;
extern flex_a5_eventDefaultTypeInternal _flex_a5_event_default_instance_;
class flex_cqi_config;
class flex_cqi_configDefaultTypeInternal;
extern flex_cqi_configDefaultTypeInternal _flex_cqi_config_default_instance_;
class flex_drx_config;
class flex_drx_configDefaultTypeInternal;
extern flex_drx_configDefaultTypeInternal _flex_drx_config_default_instance_;
class flex_gummei;
class flex_gummeiDefaultTypeInternal;
extern flex_gummeiDefaultTypeInternal _flex_gummei_default_instance_;
class flex_lc_config;
class flex_lc_configDefaultTypeInternal;
extern flex_lc_configDefaultTypeInternal _flex_lc_config_default_instance_;
class flex_measurement_event;
class flex_measurement_eventDefaultTypeInternal;
extern flex_measurement_eventDefaultTypeInternal _flex_measurement_event_default_instance_;
class flex_measurement_info;
class flex_measurement_infoDefaultTypeInternal;
extern flex_measurement_infoDefaultTypeInternal _flex_measurement_info_default_instance_;
class flex_per_event;
class flex_per_eventDefaultTypeInternal;
extern flex_per_eventDefaultTypeInternal _flex_per_event_default_instance_;
class flex_plmn;
class flex_plmnDefaultTypeInternal;
extern flex_plmnDefaultTypeInternal _flex_plmn_default_instance_;
class flex_s1ap_mme;
class flex_s1ap_mmeDefaultTypeInternal;
extern flex_s1ap_mmeDefaultTypeInternal _flex_s1ap_mme_default_instance_;
class flex_scell_config;
class flex_scell_configDefaultTypeInternal;
extern flex_scell_configDefaultTypeInternal _flex_scell_config_default_instance_;
class flex_si_config;
class flex_si_configDefaultTypeInternal;
extern flex_si_configDefaultTypeInternal _flex_si_config_default_instance_;
class flex_si_message;
class flex_si_messageDefaultTypeInternal;
extern flex_si_messageDefaultTypeInternal _flex_si_message_default_instance_;
class flex_slice;
class flex_sliceDefaultTypeInternal;
extern flex_sliceDefaultTypeInternal _flex_slice_default_instance_;
class flex_slice_dl_ul_config;
class flex_slice_dl_ul_configDefaultTypeInternal;
extern flex_slice_dl_ul_configDefaultTypeInternal _flex_slice_dl_ul_config_default_instance_;
class flex_slice_static;
class flex_slice_staticDefaultTypeInternal;
extern flex_slice_staticDefaultTypeInternal _flex_slice_static_default_instance_;
class flex_sps_config;
class flex_sps_configDefaultTypeInternal;
extern flex_sps_configDefaultTypeInternal _flex_sps_config_default_instance_;
class flex_sr_config;
class flex_sr_configDefaultTypeInternal;
extern flex_sr_configDefaultTypeInternal _flex_sr_config_default_instance_;
class flex_ue_capabilities;
class flex_ue_capabilitiesDefaultTypeInternal;
extern flex_ue_capabilitiesDefaultTypeInternal _flex_ue_capabilities_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::flex_a1_event* Arena::CreateMaybeMessage<::protocol::flex_a1_event>(Arena*);
template<> ::protocol::flex_a2_event* Arena::CreateMaybeMessage<::protocol::flex_a2_event>(Arena*);
template<> ::protocol::flex_a3_event* Arena::CreateMaybeMessage<::protocol::flex_a3_event>(Arena*);
template<> ::protocol::flex_a4_event* Arena::CreateMaybeMessage<::protocol::flex_a4_event>(Arena*);
template<> ::protocol::flex_a5_event* Arena::CreateMaybeMessage<::protocol::flex_a5_event>(Arena*);
template<> ::protocol::flex_cqi_config* Arena::CreateMaybeMessage<::protocol::flex_cqi_config>(Arena*);
template<> ::protocol::flex_drx_config* Arena::CreateMaybeMessage<::protocol::flex_drx_config>(Arena*);
template<> ::protocol::flex_gummei* Arena::CreateMaybeMessage<::protocol::flex_gummei>(Arena*);
template<> ::protocol::flex_lc_config* Arena::CreateMaybeMessage<::protocol::flex_lc_config>(Arena*);
template<> ::protocol::flex_measurement_event* Arena::CreateMaybeMessage<::protocol::flex_measurement_event>(Arena*);
template<> ::protocol::flex_measurement_info* Arena::CreateMaybeMessage<::protocol::flex_measurement_info>(Arena*);
template<> ::protocol::flex_per_event* Arena::CreateMaybeMessage<::protocol::flex_per_event>(Arena*);
template<> ::protocol::flex_plmn* Arena::CreateMaybeMessage<::protocol::flex_plmn>(Arena*);
template<> ::protocol::flex_s1ap_mme* Arena::CreateMaybeMessage<::protocol::flex_s1ap_mme>(Arena*);
template<> ::protocol::flex_scell_config* Arena::CreateMaybeMessage<::protocol::flex_scell_config>(Arena*);
template<> ::protocol::flex_si_config* Arena::CreateMaybeMessage<::protocol::flex_si_config>(Arena*);
template<> ::protocol::flex_si_message* Arena::CreateMaybeMessage<::protocol::flex_si_message>(Arena*);
template<> ::protocol::flex_slice* Arena::CreateMaybeMessage<::protocol::flex_slice>(Arena*);
template<> ::protocol::flex_slice_dl_ul_config* Arena::CreateMaybeMessage<::protocol::flex_slice_dl_ul_config>(Arena*);
template<> ::protocol::flex_slice_static* Arena::CreateMaybeMessage<::protocol::flex_slice_static>(Arena*);
template<> ::protocol::flex_sps_config* Arena::CreateMaybeMessage<::protocol::flex_sps_config>(Arena*);
template<> ::protocol::flex_sr_config* Arena::CreateMaybeMessage<::protocol::flex_sr_config>(Arena*);
template<> ::protocol::flex_ue_capabilities* Arena::CreateMaybeMessage<::protocol::flex_ue_capabilities>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum flex_hopping_mode : int {
  FLHM_INTER = 0,
  FLHM_INTERINTRA = 1
};
bool flex_hopping_mode_IsValid(int value);
constexpr flex_hopping_mode flex_hopping_mode_MIN = FLHM_INTER;
constexpr flex_hopping_mode flex_hopping_mode_MAX = FLHM_INTERINTRA;
constexpr int flex_hopping_mode_ARRAYSIZE = flex_hopping_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_hopping_mode_descriptor();
template<typename T>
inline const std::string& flex_hopping_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_hopping_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_hopping_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_hopping_mode_descriptor(), enum_t_value);
}
inline bool flex_hopping_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_hopping_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_hopping_mode>(
    flex_hopping_mode_descriptor(), name, value);
}
enum flex_phich_resource : int {
  FLPR_ONE_SIXTH = 0,
  FLPR_HALF = 1,
  FLPR_ONE = 2,
  FLPR_TWO = 3
};
bool flex_phich_resource_IsValid(int value);
constexpr flex_phich_resource flex_phich_resource_MIN = FLPR_ONE_SIXTH;
constexpr flex_phich_resource flex_phich_resource_MAX = FLPR_TWO;
constexpr int flex_phich_resource_ARRAYSIZE = flex_phich_resource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_phich_resource_descriptor();
template<typename T>
inline const std::string& flex_phich_resource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_phich_resource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_phich_resource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_phich_resource_descriptor(), enum_t_value);
}
inline bool flex_phich_resource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_phich_resource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_phich_resource>(
    flex_phich_resource_descriptor(), name, value);
}
enum flex_phich_duration : int {
  FLPD_NORMAL = 0,
  FLPD_EXTENDED = 1
};
bool flex_phich_duration_IsValid(int value);
constexpr flex_phich_duration flex_phich_duration_MIN = FLPD_NORMAL;
constexpr flex_phich_duration flex_phich_duration_MAX = FLPD_EXTENDED;
constexpr int flex_phich_duration_ARRAYSIZE = flex_phich_duration_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_phich_duration_descriptor();
template<typename T>
inline const std::string& flex_phich_duration_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_phich_duration>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_phich_duration_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_phich_duration_descriptor(), enum_t_value);
}
inline bool flex_phich_duration_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_phich_duration* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_phich_duration>(
    flex_phich_duration_descriptor(), name, value);
}
enum flex_ul_cyclic_prefix_length : int {
  FLUCPL_NORMAL = 0,
  FLUCPL_EXTENDED = 1
};
bool flex_ul_cyclic_prefix_length_IsValid(int value);
constexpr flex_ul_cyclic_prefix_length flex_ul_cyclic_prefix_length_MIN = FLUCPL_NORMAL;
constexpr flex_ul_cyclic_prefix_length flex_ul_cyclic_prefix_length_MAX = FLUCPL_EXTENDED;
constexpr int flex_ul_cyclic_prefix_length_ARRAYSIZE = flex_ul_cyclic_prefix_length_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ul_cyclic_prefix_length_descriptor();
template<typename T>
inline const std::string& flex_ul_cyclic_prefix_length_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_ul_cyclic_prefix_length>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_ul_cyclic_prefix_length_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_ul_cyclic_prefix_length_descriptor(), enum_t_value);
}
inline bool flex_ul_cyclic_prefix_length_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_ul_cyclic_prefix_length* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_ul_cyclic_prefix_length>(
    flex_ul_cyclic_prefix_length_descriptor(), name, value);
}
enum flex_dl_cyclic_prefix_length : int {
  FLDCPL_NORMAL = 0,
  FLDCPL_EXTENDED = 1
};
bool flex_dl_cyclic_prefix_length_IsValid(int value);
constexpr flex_dl_cyclic_prefix_length flex_dl_cyclic_prefix_length_MIN = FLDCPL_NORMAL;
constexpr flex_dl_cyclic_prefix_length flex_dl_cyclic_prefix_length_MAX = FLDCPL_EXTENDED;
constexpr int flex_dl_cyclic_prefix_length_ARRAYSIZE = flex_dl_cyclic_prefix_length_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_dl_cyclic_prefix_length_descriptor();
template<typename T>
inline const std::string& flex_dl_cyclic_prefix_length_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_dl_cyclic_prefix_length>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_dl_cyclic_prefix_length_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_dl_cyclic_prefix_length_descriptor(), enum_t_value);
}
inline bool flex_dl_cyclic_prefix_length_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_dl_cyclic_prefix_length* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_dl_cyclic_prefix_length>(
    flex_dl_cyclic_prefix_length_descriptor(), name, value);
}
enum flex_duplex_mode : int {
  FLDM_TDD = 0,
  FLDM_FDD = 1
};
bool flex_duplex_mode_IsValid(int value);
constexpr flex_duplex_mode flex_duplex_mode_MIN = FLDM_TDD;
constexpr flex_duplex_mode flex_duplex_mode_MAX = FLDM_FDD;
constexpr int flex_duplex_mode_ARRAYSIZE = flex_duplex_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_duplex_mode_descriptor();
template<typename T>
inline const std::string& flex_duplex_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_duplex_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_duplex_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_duplex_mode_descriptor(), enum_t_value);
}
inline bool flex_duplex_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_duplex_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_duplex_mode>(
    flex_duplex_mode_descriptor(), name, value);
}
enum flex_qam : int {
  FLEQ_MOD_16QAM = 0,
  FLEQ_MOD_64QAM = 1
};
bool flex_qam_IsValid(int value);
constexpr flex_qam flex_qam_MIN = FLEQ_MOD_16QAM;
constexpr flex_qam flex_qam_MAX = FLEQ_MOD_64QAM;
constexpr int flex_qam_ARRAYSIZE = flex_qam_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_qam_descriptor();
template<typename T>
inline const std::string& flex_qam_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_qam>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_qam_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_qam_descriptor(), enum_t_value);
}
inline bool flex_qam_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_qam* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_qam>(
    flex_qam_descriptor(), name, value);
}
enum flex_slice_algorithm : int {
  None = 0,
  Static = 1,
  NVS = 2
};
bool flex_slice_algorithm_IsValid(int value);
constexpr flex_slice_algorithm flex_slice_algorithm_MIN = None;
constexpr flex_slice_algorithm flex_slice_algorithm_MAX = NVS;
constexpr int flex_slice_algorithm_ARRAYSIZE = flex_slice_algorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_slice_algorithm_descriptor();
template<typename T>
inline const std::string& flex_slice_algorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_slice_algorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_slice_algorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_slice_algorithm_descriptor(), enum_t_value);
}
inline bool flex_slice_algorithm_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_slice_algorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_slice_algorithm>(
    flex_slice_algorithm_descriptor(), name, value);
}
enum flex_meas_gap_config_pattern : int {
  FLMGCP_GP1 = 0,
  FLMGCP_GP2 = 1,
  FLMGCP_OFF = 2
};
bool flex_meas_gap_config_pattern_IsValid(int value);
constexpr flex_meas_gap_config_pattern flex_meas_gap_config_pattern_MIN = FLMGCP_GP1;
constexpr flex_meas_gap_config_pattern flex_meas_gap_config_pattern_MAX = FLMGCP_OFF;
constexpr int flex_meas_gap_config_pattern_ARRAYSIZE = flex_meas_gap_config_pattern_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_meas_gap_config_pattern_descriptor();
template<typename T>
inline const std::string& flex_meas_gap_config_pattern_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_meas_gap_config_pattern>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_meas_gap_config_pattern_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_meas_gap_config_pattern_descriptor(), enum_t_value);
}
inline bool flex_meas_gap_config_pattern_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_meas_gap_config_pattern* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_meas_gap_config_pattern>(
    flex_meas_gap_config_pattern_descriptor(), name, value);
}
enum flex_setup_release_action : int {
  FLSRA_SETUP = 0,
  FLSRA_RELEASE = 1
};
bool flex_setup_release_action_IsValid(int value);
constexpr flex_setup_release_action flex_setup_release_action_MIN = FLSRA_SETUP;
constexpr flex_setup_release_action flex_setup_release_action_MAX = FLSRA_RELEASE;
constexpr int flex_setup_release_action_ARRAYSIZE = flex_setup_release_action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_setup_release_action_descriptor();
template<typename T>
inline const std::string& flex_setup_release_action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_setup_release_action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_setup_release_action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_setup_release_action_descriptor(), enum_t_value);
}
inline bool flex_setup_release_action_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_setup_release_action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_setup_release_action>(
    flex_setup_release_action_descriptor(), name, value);
}
enum flex_ue_transmission_antenna : int {
  FLUTA_NONE = 0,
  FLUTA_OPEN_LOOP = 1,
  FLUTA_CLOSED_LOOP = 2
};
bool flex_ue_transmission_antenna_IsValid(int value);
constexpr flex_ue_transmission_antenna flex_ue_transmission_antenna_MIN = FLUTA_NONE;
constexpr flex_ue_transmission_antenna flex_ue_transmission_antenna_MAX = FLUTA_CLOSED_LOOP;
constexpr int flex_ue_transmission_antenna_ARRAYSIZE = flex_ue_transmission_antenna_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ue_transmission_antenna_descriptor();
template<typename T>
inline const std::string& flex_ue_transmission_antenna_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_ue_transmission_antenna>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_ue_transmission_antenna_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_ue_transmission_antenna_descriptor(), enum_t_value);
}
inline bool flex_ue_transmission_antenna_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_ue_transmission_antenna* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_ue_transmission_antenna>(
    flex_ue_transmission_antenna_descriptor(), name, value);
}
enum flex_aperiodic_cqi_report_mode : int {
  FLACRM_RM12 = 0,
  FLACRM_RM20 = 1,
  FLACRM_RM22 = 2,
  FLACRM_RM30 = 3,
  FLACRM_RM31 = 4,
  FLACRM_NONE = 5
};
bool flex_aperiodic_cqi_report_mode_IsValid(int value);
constexpr flex_aperiodic_cqi_report_mode flex_aperiodic_cqi_report_mode_MIN = FLACRM_RM12;
constexpr flex_aperiodic_cqi_report_mode flex_aperiodic_cqi_report_mode_MAX = FLACRM_NONE;
constexpr int flex_aperiodic_cqi_report_mode_ARRAYSIZE = flex_aperiodic_cqi_report_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_aperiodic_cqi_report_mode_descriptor();
template<typename T>
inline const std::string& flex_aperiodic_cqi_report_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_aperiodic_cqi_report_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_aperiodic_cqi_report_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_aperiodic_cqi_report_mode_descriptor(), enum_t_value);
}
inline bool flex_aperiodic_cqi_report_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_aperiodic_cqi_report_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_aperiodic_cqi_report_mode>(
    flex_aperiodic_cqi_report_mode_descriptor(), name, value);
}
enum flex_tdd_ack_nack_feedback_mode : int {
  FLTANFM_BUNDLING = 0,
  FLTANFM_MULTIPLEXING = 1
};
bool flex_tdd_ack_nack_feedback_mode_IsValid(int value);
constexpr flex_tdd_ack_nack_feedback_mode flex_tdd_ack_nack_feedback_mode_MIN = FLTANFM_BUNDLING;
constexpr flex_tdd_ack_nack_feedback_mode flex_tdd_ack_nack_feedback_mode_MAX = FLTANFM_MULTIPLEXING;
constexpr int flex_tdd_ack_nack_feedback_mode_ARRAYSIZE = flex_tdd_ack_nack_feedback_mode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_tdd_ack_nack_feedback_mode_descriptor();
template<typename T>
inline const std::string& flex_tdd_ack_nack_feedback_mode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_tdd_ack_nack_feedback_mode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_tdd_ack_nack_feedback_mode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_tdd_ack_nack_feedback_mode_descriptor(), enum_t_value);
}
inline bool flex_tdd_ack_nack_feedback_mode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_tdd_ack_nack_feedback_mode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_tdd_ack_nack_feedback_mode>(
    flex_tdd_ack_nack_feedback_mode_descriptor(), name, value);
}
enum flex_lc_direction : int {
  FLLCD_UL = 0,
  FLLCD_DL = 1,
  FLLCD_BOTH = 2
};
bool flex_lc_direction_IsValid(int value);
constexpr flex_lc_direction flex_lc_direction_MIN = FLLCD_UL;
constexpr flex_lc_direction flex_lc_direction_MAX = FLLCD_BOTH;
constexpr int flex_lc_direction_ARRAYSIZE = flex_lc_direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_lc_direction_descriptor();
template<typename T>
inline const std::string& flex_lc_direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_lc_direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_lc_direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_lc_direction_descriptor(), enum_t_value);
}
inline bool flex_lc_direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_lc_direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_lc_direction>(
    flex_lc_direction_descriptor(), name, value);
}
enum flex_qos_bearer_type : int {
  FLQBT_NON_GBR = 0,
  FLQBT_GBR = 1
};
bool flex_qos_bearer_type_IsValid(int value);
constexpr flex_qos_bearer_type flex_qos_bearer_type_MIN = FLQBT_NON_GBR;
constexpr flex_qos_bearer_type flex_qos_bearer_type_MAX = FLQBT_GBR;
constexpr int flex_qos_bearer_type_ARRAYSIZE = flex_qos_bearer_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_qos_bearer_type_descriptor();
template<typename T>
inline const std::string& flex_qos_bearer_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_qos_bearer_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_qos_bearer_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_qos_bearer_type_descriptor(), enum_t_value);
}
inline bool flex_qos_bearer_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_qos_bearer_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_qos_bearer_type>(
    flex_qos_bearer_type_descriptor(), name, value);
}
enum flex_ue_state_change_type : int {
  FLUESC_UPDATED = 0,
  FLUESC_ACTIVATED = 1,
  FLUESC_DEACTIVATED = 2,
  FLUESC_MOVED = 3
};
bool flex_ue_state_change_type_IsValid(int value);
constexpr flex_ue_state_change_type flex_ue_state_change_type_MIN = FLUESC_UPDATED;
constexpr flex_ue_state_change_type flex_ue_state_change_type_MAX = FLUESC_MOVED;
constexpr int flex_ue_state_change_type_ARRAYSIZE = flex_ue_state_change_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ue_state_change_type_descriptor();
template<typename T>
inline const std::string& flex_ue_state_change_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_ue_state_change_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_ue_state_change_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_ue_state_change_type_descriptor(), enum_t_value);
}
inline bool flex_ue_state_change_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_ue_state_change_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_ue_state_change_type>(
    flex_ue_state_change_type_descriptor(), name, value);
}
enum flex_mme_state : int {
  FLMMES_DISCONNECTED = 0,
  FLMMES_WAITING = 1,
  FLMMES_CONNECTED = 2,
  FLMMES_OVERLOAD = 3
};
bool flex_mme_state_IsValid(int value);
constexpr flex_mme_state flex_mme_state_MIN = FLMMES_DISCONNECTED;
constexpr flex_mme_state flex_mme_state_MAX = FLMMES_OVERLOAD;
constexpr int flex_mme_state_ARRAYSIZE = flex_mme_state_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_mme_state_descriptor();
template<typename T>
inline const std::string& flex_mme_state_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_mme_state>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_mme_state_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_mme_state_descriptor(), enum_t_value);
}
inline bool flex_mme_state_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_mme_state* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_mme_state>(
    flex_mme_state_descriptor(), name, value);
}
// ===================================================================

class flex_si_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_si_config) */ {
 public:
  inline flex_si_config() : flex_si_config(nullptr) {}
  virtual ~flex_si_config();

  flex_si_config(const flex_si_config& from);
  flex_si_config(flex_si_config&& from) noexcept
    : flex_si_config() {
    *this = ::std::move(from);
  }

  inline flex_si_config& operator=(const flex_si_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_si_config& operator=(flex_si_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_si_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_si_config* internal_default_instance() {
    return reinterpret_cast<const flex_si_config*>(
               &_flex_si_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(flex_si_config& a, flex_si_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_si_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_si_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_si_config* New() const final {
    return CreateMaybeMessage<flex_si_config>(nullptr);
  }

  flex_si_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_si_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_si_config& from);
  void MergeFrom(const flex_si_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_si_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_si_config";
  }
  protected:
  explicit flex_si_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiMessageFieldNumber = 4,
    kSfnFieldNumber = 1,
    kSib1LengthFieldNumber = 2,
    kSiWindowLengthFieldNumber = 3,
  };
  // repeated .protocol.flex_si_message si_message = 4;
  int si_message_size() const;
  private:
  int _internal_si_message_size() const;
  public:
  void clear_si_message();
  ::protocol::flex_si_message* mutable_si_message(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_si_message >*
      mutable_si_message();
  private:
  const ::protocol::flex_si_message& _internal_si_message(int index) const;
  ::protocol::flex_si_message* _internal_add_si_message();
  public:
  const ::protocol::flex_si_message& si_message(int index) const;
  ::protocol::flex_si_message* add_si_message();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_si_message >&
      si_message() const;

  // optional uint32 sfn = 1;
  bool has_sfn() const;
  private:
  bool _internal_has_sfn() const;
  public:
  void clear_sfn();
  ::PROTOBUF_NAMESPACE_ID::uint32 sfn() const;
  void set_sfn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sfn() const;
  void _internal_set_sfn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sib1_length = 2;
  bool has_sib1_length() const;
  private:
  bool _internal_has_sib1_length() const;
  public:
  void clear_sib1_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 sib1_length() const;
  void set_sib1_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sib1_length() const;
  void _internal_set_sib1_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 si_window_length = 3;
  bool has_si_window_length() const;
  private:
  bool _internal_has_si_window_length() const;
  public:
  void clear_si_window_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 si_window_length() const;
  void set_si_window_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_si_window_length() const;
  void _internal_set_si_window_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_si_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_si_message > si_message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sfn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sib1_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 si_window_length_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_si_message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_si_message) */ {
 public:
  inline flex_si_message() : flex_si_message(nullptr) {}
  virtual ~flex_si_message();

  flex_si_message(const flex_si_message& from);
  flex_si_message(flex_si_message&& from) noexcept
    : flex_si_message() {
    *this = ::std::move(from);
  }

  inline flex_si_message& operator=(const flex_si_message& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_si_message& operator=(flex_si_message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_si_message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_si_message* internal_default_instance() {
    return reinterpret_cast<const flex_si_message*>(
               &_flex_si_message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(flex_si_message& a, flex_si_message& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_si_message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_si_message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_si_message* New() const final {
    return CreateMaybeMessage<flex_si_message>(nullptr);
  }

  flex_si_message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_si_message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_si_message& from);
  void MergeFrom(const flex_si_message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_si_message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_si_message";
  }
  protected:
  explicit flex_si_message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodicityFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // optional uint32 periodicity = 1;
  bool has_periodicity() const;
  private:
  bool _internal_has_periodicity() const;
  public:
  void clear_periodicity();
  ::PROTOBUF_NAMESPACE_ID::uint32 periodicity() const;
  void set_periodicity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_periodicity() const;
  void _internal_set_periodicity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_si_message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 periodicity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_slice_static PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_slice_static) */ {
 public:
  inline flex_slice_static() : flex_slice_static(nullptr) {}
  virtual ~flex_slice_static();

  flex_slice_static(const flex_slice_static& from);
  flex_slice_static(flex_slice_static&& from) noexcept
    : flex_slice_static() {
    *this = ::std::move(from);
  }

  inline flex_slice_static& operator=(const flex_slice_static& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_slice_static& operator=(flex_slice_static&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_slice_static& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_slice_static* internal_default_instance() {
    return reinterpret_cast<const flex_slice_static*>(
               &_flex_slice_static_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(flex_slice_static& a, flex_slice_static& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_slice_static* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_slice_static* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_slice_static* New() const final {
    return CreateMaybeMessage<flex_slice_static>(nullptr);
  }

  flex_slice_static* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_slice_static>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_slice_static& from);
  void MergeFrom(const flex_slice_static& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_slice_static* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_slice_static";
  }
  protected:
  explicit flex_slice_static(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosLowFieldNumber = 1,
    kPosHighFieldNumber = 2,
  };
  // optional uint32 posLow = 1;
  bool has_poslow() const;
  private:
  bool _internal_has_poslow() const;
  public:
  void clear_poslow();
  ::PROTOBUF_NAMESPACE_ID::uint32 poslow() const;
  void set_poslow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_poslow() const;
  void _internal_set_poslow(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 posHigh = 2;
  bool has_poshigh() const;
  private:
  bool _internal_has_poshigh() const;
  public:
  void clear_poshigh();
  ::PROTOBUF_NAMESPACE_ID::uint32 poshigh() const;
  void set_poshigh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_poshigh() const;
  void _internal_set_poshigh(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_slice_static)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 poslow_;
  ::PROTOBUF_NAMESPACE_ID::uint32 poshigh_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_slice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_slice) */ {
 public:
  inline flex_slice() : flex_slice(nullptr) {}
  virtual ~flex_slice();

  flex_slice(const flex_slice& from);
  flex_slice(flex_slice&& from) noexcept
    : flex_slice() {
    *this = ::std::move(from);
  }

  inline flex_slice& operator=(const flex_slice& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_slice& operator=(flex_slice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_slice& default_instance();

  enum ParamsCase {
    kStatic = 10,
    PARAMS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_slice* internal_default_instance() {
    return reinterpret_cast<const flex_slice*>(
               &_flex_slice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(flex_slice& a, flex_slice& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_slice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_slice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_slice* New() const final {
    return CreateMaybeMessage<flex_slice>(nullptr);
  }

  flex_slice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_slice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_slice& from);
  void MergeFrom(const flex_slice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_slice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_slice";
  }
  protected:
  explicit flex_slice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 2,
    kSchedulerFieldNumber = 3,
    kIdFieldNumber = 1,
    kStaticFieldNumber = 10,
  };
  // optional string label = 2;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // optional string scheduler = 3;
  bool has_scheduler() const;
  private:
  bool _internal_has_scheduler() const;
  public:
  void clear_scheduler();
  const std::string& scheduler() const;
  void set_scheduler(const std::string& value);
  void set_scheduler(std::string&& value);
  void set_scheduler(const char* value);
  void set_scheduler(const char* value, size_t size);
  std::string* mutable_scheduler();
  std::string* release_scheduler();
  void set_allocated_scheduler(std::string* scheduler);
  private:
  const std::string& _internal_scheduler() const;
  void _internal_set_scheduler(const std::string& value);
  std::string* _internal_mutable_scheduler();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .protocol.flex_slice_static static = 10;
  bool has_static_() const;
  private:
  bool _internal_has_static_() const;
  public:
  void clear_static_();
  const ::protocol::flex_slice_static& static_() const;
  ::protocol::flex_slice_static* release_static_();
  ::protocol::flex_slice_static* mutable_static_();
  void set_allocated_static_(::protocol::flex_slice_static* static_);
  private:
  const ::protocol::flex_slice_static& _internal_static_() const;
  ::protocol::flex_slice_static* _internal_mutable_static_();
  public:
  void unsafe_arena_set_allocated_static_(
      ::protocol::flex_slice_static* static_);
  ::protocol::flex_slice_static* unsafe_arena_release_static_();

  void clear_params();
  ParamsCase params_case() const;
  // @@protoc_insertion_point(class_scope:protocol.flex_slice)
 private:
  class _Internal;
  void set_has_static_();

  inline bool has_params() const;
  inline void clear_has_params();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheduler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  union ParamsUnion {
    ParamsUnion() {}
    ::protocol::flex_slice_static* static__;
  } params_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_slice_dl_ul_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_slice_dl_ul_config) */ {
 public:
  inline flex_slice_dl_ul_config() : flex_slice_dl_ul_config(nullptr) {}
  virtual ~flex_slice_dl_ul_config();

  flex_slice_dl_ul_config(const flex_slice_dl_ul_config& from);
  flex_slice_dl_ul_config(flex_slice_dl_ul_config&& from) noexcept
    : flex_slice_dl_ul_config() {
    *this = ::std::move(from);
  }

  inline flex_slice_dl_ul_config& operator=(const flex_slice_dl_ul_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_slice_dl_ul_config& operator=(flex_slice_dl_ul_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_slice_dl_ul_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_slice_dl_ul_config* internal_default_instance() {
    return reinterpret_cast<const flex_slice_dl_ul_config*>(
               &_flex_slice_dl_ul_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(flex_slice_dl_ul_config& a, flex_slice_dl_ul_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_slice_dl_ul_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_slice_dl_ul_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_slice_dl_ul_config* New() const final {
    return CreateMaybeMessage<flex_slice_dl_ul_config>(nullptr);
  }

  flex_slice_dl_ul_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_slice_dl_ul_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_slice_dl_ul_config& from);
  void MergeFrom(const flex_slice_dl_ul_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_slice_dl_ul_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_slice_dl_ul_config";
  }
  protected:
  explicit flex_slice_dl_ul_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicesFieldNumber = 2,
    kSchedulerFieldNumber = 3,
    kAlgorithmFieldNumber = 1,
  };
  // repeated .protocol.flex_slice slices = 2;
  int slices_size() const;
  private:
  int _internal_slices_size() const;
  public:
  void clear_slices();
  ::protocol::flex_slice* mutable_slices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_slice >*
      mutable_slices();
  private:
  const ::protocol::flex_slice& _internal_slices(int index) const;
  ::protocol::flex_slice* _internal_add_slices();
  public:
  const ::protocol::flex_slice& slices(int index) const;
  ::protocol::flex_slice* add_slices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_slice >&
      slices() const;

  // optional string scheduler = 3;
  bool has_scheduler() const;
  private:
  bool _internal_has_scheduler() const;
  public:
  void clear_scheduler();
  const std::string& scheduler() const;
  void set_scheduler(const std::string& value);
  void set_scheduler(std::string&& value);
  void set_scheduler(const char* value);
  void set_scheduler(const char* value, size_t size);
  std::string* mutable_scheduler();
  std::string* release_scheduler();
  void set_allocated_scheduler(std::string* scheduler);
  private:
  const std::string& _internal_scheduler() const;
  void _internal_set_scheduler(const std::string& value);
  std::string* _internal_mutable_scheduler();
  public:

  // optional .protocol.flex_slice_algorithm algorithm = 1;
  bool has_algorithm() const;
  private:
  bool _internal_has_algorithm() const;
  public:
  void clear_algorithm();
  ::protocol::flex_slice_algorithm algorithm() const;
  void set_algorithm(::protocol::flex_slice_algorithm value);
  private:
  ::protocol::flex_slice_algorithm _internal_algorithm() const;
  void _internal_set_algorithm(::protocol::flex_slice_algorithm value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_slice_dl_ul_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_slice > slices_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scheduler_;
  int algorithm_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_drx_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_drx_config) */ {
 public:
  inline flex_drx_config() : flex_drx_config(nullptr) {}
  virtual ~flex_drx_config();

  flex_drx_config(const flex_drx_config& from);
  flex_drx_config(flex_drx_config&& from) noexcept
    : flex_drx_config() {
    *this = ::std::move(from);
  }

  inline flex_drx_config& operator=(const flex_drx_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_drx_config& operator=(flex_drx_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_drx_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_drx_config* internal_default_instance() {
    return reinterpret_cast<const flex_drx_config*>(
               &_flex_drx_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(flex_drx_config& a, flex_drx_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_drx_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_drx_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_drx_config* New() const final {
    return CreateMaybeMessage<flex_drx_config>(nullptr);
  }

  flex_drx_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_drx_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_drx_config& from);
  void MergeFrom(const flex_drx_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_drx_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_drx_config";
  }
  protected:
  explicit flex_drx_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOnDurationTimerFieldNumber = 1,
    kDrxInactivityTimerFieldNumber = 2,
    kDrxRetransmissionTimerFieldNumber = 3,
    kLongDrxCycleFieldNumber = 4,
    kLongDrxCycleStartOffsetFieldNumber = 5,
    kShortDrxCycleFieldNumber = 6,
    kDrxShortCycleTimerFieldNumber = 7,
  };
  // optional uint32 on_duration_timer = 1;
  bool has_on_duration_timer() const;
  private:
  bool _internal_has_on_duration_timer() const;
  public:
  void clear_on_duration_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 on_duration_timer() const;
  void set_on_duration_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_on_duration_timer() const;
  void _internal_set_on_duration_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 drx_inactivity_timer = 2;
  bool has_drx_inactivity_timer() const;
  private:
  bool _internal_has_drx_inactivity_timer() const;
  public:
  void clear_drx_inactivity_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 drx_inactivity_timer() const;
  void set_drx_inactivity_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drx_inactivity_timer() const;
  void _internal_set_drx_inactivity_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 drx_retransmission_timer = 3;
  bool has_drx_retransmission_timer() const;
  private:
  bool _internal_has_drx_retransmission_timer() const;
  public:
  void clear_drx_retransmission_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 drx_retransmission_timer() const;
  void set_drx_retransmission_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drx_retransmission_timer() const;
  void _internal_set_drx_retransmission_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 long_drx_cycle = 4;
  bool has_long_drx_cycle() const;
  private:
  bool _internal_has_long_drx_cycle() const;
  public:
  void clear_long_drx_cycle();
  ::PROTOBUF_NAMESPACE_ID::uint32 long_drx_cycle() const;
  void set_long_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_long_drx_cycle() const;
  void _internal_set_long_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 long_drx_cycle_start_offset = 5;
  bool has_long_drx_cycle_start_offset() const;
  private:
  bool _internal_has_long_drx_cycle_start_offset() const;
  public:
  void clear_long_drx_cycle_start_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 long_drx_cycle_start_offset() const;
  void set_long_drx_cycle_start_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_long_drx_cycle_start_offset() const;
  void _internal_set_long_drx_cycle_start_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 short_drx_cycle = 6;
  bool has_short_drx_cycle() const;
  private:
  bool _internal_has_short_drx_cycle() const;
  public:
  void clear_short_drx_cycle();
  ::PROTOBUF_NAMESPACE_ID::uint32 short_drx_cycle() const;
  void set_short_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_short_drx_cycle() const;
  void _internal_set_short_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 drx_short_cycle_timer = 7;
  bool has_drx_short_cycle_timer() const;
  private:
  bool _internal_has_drx_short_cycle_timer() const;
  public:
  void clear_drx_short_cycle_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 drx_short_cycle_timer() const;
  void set_drx_short_cycle_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_drx_short_cycle_timer() const;
  void _internal_set_drx_short_cycle_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_drx_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 on_duration_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drx_inactivity_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drx_retransmission_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 long_drx_cycle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 long_drx_cycle_start_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 short_drx_cycle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 drx_short_cycle_timer_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_sps_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_sps_config) */ {
 public:
  inline flex_sps_config() : flex_sps_config(nullptr) {}
  virtual ~flex_sps_config();

  flex_sps_config(const flex_sps_config& from);
  flex_sps_config(flex_sps_config&& from) noexcept
    : flex_sps_config() {
    *this = ::std::move(from);
  }

  inline flex_sps_config& operator=(const flex_sps_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_sps_config& operator=(flex_sps_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_sps_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_sps_config* internal_default_instance() {
    return reinterpret_cast<const flex_sps_config*>(
               &_flex_sps_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(flex_sps_config& a, flex_sps_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_sps_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_sps_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_sps_config* New() const final {
    return CreateMaybeMessage<flex_sps_config>(nullptr);
  }

  flex_sps_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_sps_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_sps_config& from);
  void MergeFrom(const flex_sps_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_sps_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_sps_config";
  }
  protected:
  explicit flex_sps_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kN1PUCCHANPersistentElementFieldNumber = 4,
    kSemiPersistentSchedIntervalULFieldNumber = 1,
    kSemiPersistentSchedIntervalDLFieldNumber = 2,
    kNumOfConfSpsProcFieldNumber = 3,
    kImplicitReleaseAfterFieldNumber = 5,
  };
  // repeated uint32 n1_PUCCH_AN_persistent_element = 4;
  int n1_pucch_an_persistent_element_size() const;
  private:
  int _internal_n1_pucch_an_persistent_element_size() const;
  public:
  void clear_n1_pucch_an_persistent_element();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n1_pucch_an_persistent_element(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_n1_pucch_an_persistent_element() const;
  void _internal_add_n1_pucch_an_persistent_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_n1_pucch_an_persistent_element();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 n1_pucch_an_persistent_element(int index) const;
  void set_n1_pucch_an_persistent_element(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_n1_pucch_an_persistent_element(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      n1_pucch_an_persistent_element() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_n1_pucch_an_persistent_element();

  // optional uint32 semi_persistent_sched_interval_UL = 1;
  bool has_semi_persistent_sched_interval_ul() const;
  private:
  bool _internal_has_semi_persistent_sched_interval_ul() const;
  public:
  void clear_semi_persistent_sched_interval_ul();
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_persistent_sched_interval_ul() const;
  void set_semi_persistent_sched_interval_ul(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semi_persistent_sched_interval_ul() const;
  void _internal_set_semi_persistent_sched_interval_ul(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 semi_persistent_sched_interval_DL = 2;
  bool has_semi_persistent_sched_interval_dl() const;
  private:
  bool _internal_has_semi_persistent_sched_interval_dl() const;
  public:
  void clear_semi_persistent_sched_interval_dl();
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_persistent_sched_interval_dl() const;
  void set_semi_persistent_sched_interval_dl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_semi_persistent_sched_interval_dl() const;
  void _internal_set_semi_persistent_sched_interval_dl(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 num_of_conf_sps_proc = 3;
  bool has_num_of_conf_sps_proc() const;
  private:
  bool _internal_has_num_of_conf_sps_proc() const;
  public:
  void clear_num_of_conf_sps_proc();
  ::PROTOBUF_NAMESPACE_ID::uint32 num_of_conf_sps_proc() const;
  void set_num_of_conf_sps_proc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_num_of_conf_sps_proc() const;
  void _internal_set_num_of_conf_sps_proc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 implicit_release_after = 5;
  bool has_implicit_release_after() const;
  private:
  bool _internal_has_implicit_release_after() const;
  public:
  void clear_implicit_release_after();
  ::PROTOBUF_NAMESPACE_ID::uint32 implicit_release_after() const;
  void set_implicit_release_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_implicit_release_after() const;
  void _internal_set_implicit_release_after(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_sps_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > n1_pucch_an_persistent_element_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_persistent_sched_interval_ul_;
  ::PROTOBUF_NAMESPACE_ID::uint32 semi_persistent_sched_interval_dl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 num_of_conf_sps_proc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 implicit_release_after_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_sr_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_sr_config) */ {
 public:
  inline flex_sr_config() : flex_sr_config(nullptr) {}
  virtual ~flex_sr_config();

  flex_sr_config(const flex_sr_config& from);
  flex_sr_config(flex_sr_config&& from) noexcept
    : flex_sr_config() {
    *this = ::std::move(from);
  }

  inline flex_sr_config& operator=(const flex_sr_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_sr_config& operator=(flex_sr_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_sr_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_sr_config* internal_default_instance() {
    return reinterpret_cast<const flex_sr_config*>(
               &_flex_sr_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(flex_sr_config& a, flex_sr_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_sr_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_sr_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_sr_config* New() const final {
    return CreateMaybeMessage<flex_sr_config>(nullptr);
  }

  flex_sr_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_sr_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_sr_config& from);
  void MergeFrom(const flex_sr_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_sr_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_sr_config";
  }
  protected:
  explicit flex_sr_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSrActionFieldNumber = 1,
    kSchedIntervalFieldNumber = 2,
    kDsrTransMaxFieldNumber = 3,
  };
  // optional uint32 sr_action = 1;
  bool has_sr_action() const;
  private:
  bool _internal_has_sr_action() const;
  public:
  void clear_sr_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_action() const;
  void set_sr_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sr_action() const;
  void _internal_set_sr_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sched_interval = 2;
  bool has_sched_interval() const;
  private:
  bool _internal_has_sched_interval() const;
  public:
  void clear_sched_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 sched_interval() const;
  void set_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sched_interval() const;
  void _internal_set_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dsr_trans_max = 3;
  bool has_dsr_trans_max() const;
  private:
  bool _internal_has_dsr_trans_max() const;
  public:
  void clear_dsr_trans_max();
  ::PROTOBUF_NAMESPACE_ID::uint32 dsr_trans_max() const;
  void set_dsr_trans_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dsr_trans_max() const;
  void _internal_set_dsr_trans_max(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_sr_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sr_action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sched_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dsr_trans_max_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_cqi_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_cqi_config) */ {
 public:
  inline flex_cqi_config() : flex_cqi_config(nullptr) {}
  virtual ~flex_cqi_config();

  flex_cqi_config(const flex_cqi_config& from);
  flex_cqi_config(flex_cqi_config&& from) noexcept
    : flex_cqi_config() {
    *this = ::std::move(from);
  }

  inline flex_cqi_config& operator=(const flex_cqi_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_cqi_config& operator=(flex_cqi_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_cqi_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_cqi_config* internal_default_instance() {
    return reinterpret_cast<const flex_cqi_config*>(
               &_flex_cqi_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(flex_cqi_config& a, flex_cqi_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_cqi_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_cqi_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_cqi_config* New() const final {
    return CreateMaybeMessage<flex_cqi_config>(nullptr);
  }

  flex_cqi_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_cqi_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_cqi_config& from);
  void MergeFrom(const flex_cqi_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_cqi_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_cqi_config";
  }
  protected:
  explicit flex_cqi_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCqiActionFieldNumber = 1,
    kCqiSchedIntervalFieldNumber = 2,
    kRiSchedIntervalFieldNumber = 3,
  };
  // optional uint32 cqi_action = 1;
  bool has_cqi_action() const;
  private:
  bool _internal_has_cqi_action() const;
  public:
  void clear_cqi_action();
  ::PROTOBUF_NAMESPACE_ID::uint32 cqi_action() const;
  void set_cqi_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cqi_action() const;
  void _internal_set_cqi_action(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cqi_sched_interval = 2;
  bool has_cqi_sched_interval() const;
  private:
  bool _internal_has_cqi_sched_interval() const;
  public:
  void clear_cqi_sched_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 cqi_sched_interval() const;
  void set_cqi_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cqi_sched_interval() const;
  void _internal_set_cqi_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ri_sched_interval = 3;
  bool has_ri_sched_interval() const;
  private:
  bool _internal_has_ri_sched_interval() const;
  public:
  void clear_ri_sched_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 ri_sched_interval() const;
  void set_ri_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ri_sched_interval() const;
  void _internal_set_ri_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_cqi_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cqi_action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cqi_sched_interval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ri_sched_interval_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_ue_capabilities PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ue_capabilities) */ {
 public:
  inline flex_ue_capabilities() : flex_ue_capabilities(nullptr) {}
  virtual ~flex_ue_capabilities();

  flex_ue_capabilities(const flex_ue_capabilities& from);
  flex_ue_capabilities(flex_ue_capabilities&& from) noexcept
    : flex_ue_capabilities() {
    *this = ::std::move(from);
  }

  inline flex_ue_capabilities& operator=(const flex_ue_capabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_ue_capabilities& operator=(flex_ue_capabilities&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_ue_capabilities& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_ue_capabilities* internal_default_instance() {
    return reinterpret_cast<const flex_ue_capabilities*>(
               &_flex_ue_capabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(flex_ue_capabilities& a, flex_ue_capabilities& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_ue_capabilities* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_ue_capabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_ue_capabilities* New() const final {
    return CreateMaybeMessage<flex_ue_capabilities>(nullptr);
  }

  flex_ue_capabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_ue_capabilities>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_ue_capabilities& from);
  void MergeFrom(const flex_ue_capabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_ue_capabilities* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_ue_capabilities";
  }
  protected:
  explicit flex_ue_capabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHalfDuplexFieldNumber = 1,
    kIntraSFHoppingFieldNumber = 2,
    kType2Sb1FieldNumber = 3,
    kUeCategoryFieldNumber = 4,
    kResAllocType1FieldNumber = 5,
  };
  // optional uint32 half_duplex = 1;
  bool has_half_duplex() const;
  private:
  bool _internal_has_half_duplex() const;
  public:
  void clear_half_duplex();
  ::PROTOBUF_NAMESPACE_ID::uint32 half_duplex() const;
  void set_half_duplex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_half_duplex() const;
  void _internal_set_half_duplex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 intra_SF_hopping = 2;
  bool has_intra_sf_hopping() const;
  private:
  bool _internal_has_intra_sf_hopping() const;
  public:
  void clear_intra_sf_hopping();
  ::PROTOBUF_NAMESPACE_ID::uint32 intra_sf_hopping() const;
  void set_intra_sf_hopping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_intra_sf_hopping() const;
  void _internal_set_intra_sf_hopping(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 type2_sb_1 = 3;
  bool has_type2_sb_1() const;
  private:
  bool _internal_has_type2_sb_1() const;
  public:
  void clear_type2_sb_1();
  ::PROTOBUF_NAMESPACE_ID::uint32 type2_sb_1() const;
  void set_type2_sb_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_type2_sb_1() const;
  void _internal_set_type2_sb_1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ue_category = 4;
  bool has_ue_category() const;
  private:
  bool _internal_has_ue_category() const;
  public:
  void clear_ue_category();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_category() const;
  void set_ue_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_category() const;
  void _internal_set_ue_category(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 res_alloc_type1 = 5;
  bool has_res_alloc_type1() const;
  private:
  bool _internal_has_res_alloc_type1() const;
  public:
  void clear_res_alloc_type1();
  ::PROTOBUF_NAMESPACE_ID::uint32 res_alloc_type1() const;
  void set_res_alloc_type1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_res_alloc_type1() const;
  void _internal_set_res_alloc_type1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_ue_capabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 half_duplex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 intra_sf_hopping_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type2_sb_1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_category_;
  ::PROTOBUF_NAMESPACE_ID::uint32 res_alloc_type1_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_scell_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_scell_config) */ {
 public:
  inline flex_scell_config() : flex_scell_config(nullptr) {}
  virtual ~flex_scell_config();

  flex_scell_config(const flex_scell_config& from);
  flex_scell_config(flex_scell_config&& from) noexcept
    : flex_scell_config() {
    *this = ::std::move(from);
  }

  inline flex_scell_config& operator=(const flex_scell_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_scell_config& operator=(flex_scell_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_scell_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_scell_config* internal_default_instance() {
    return reinterpret_cast<const flex_scell_config*>(
               &_flex_scell_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(flex_scell_config& a, flex_scell_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_scell_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_scell_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_scell_config* New() const final {
    return CreateMaybeMessage<flex_scell_config>(nullptr);
  }

  flex_scell_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_scell_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_scell_config& from);
  void MergeFrom(const flex_scell_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_scell_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_scell_config";
  }
  protected:
  explicit flex_scell_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarrierIndexFieldNumber = 1,
    kScellIndexFieldNumber = 2,
    kUseCcsFieldNumber = 3,
    kSchedCellIndexFieldNumber = 4,
    kPdschStartFieldNumber = 5,
  };
  // optional uint32 carrier_index = 1;
  bool has_carrier_index() const;
  private:
  bool _internal_has_carrier_index() const;
  public:
  void clear_carrier_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index() const;
  void set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carrier_index() const;
  void _internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 scell_index = 2;
  bool has_scell_index() const;
  private:
  bool _internal_has_scell_index() const;
  public:
  void clear_scell_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 scell_index() const;
  void set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scell_index() const;
  void _internal_set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 use_ccs = 3;
  bool has_use_ccs() const;
  private:
  bool _internal_has_use_ccs() const;
  public:
  void clear_use_ccs();
  ::PROTOBUF_NAMESPACE_ID::uint32 use_ccs() const;
  void set_use_ccs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_use_ccs() const;
  void _internal_set_use_ccs(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 sched_cell_index = 4;
  bool has_sched_cell_index() const;
  private:
  bool _internal_has_sched_cell_index() const;
  public:
  void clear_sched_cell_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 sched_cell_index() const;
  void set_sched_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sched_cell_index() const;
  void _internal_set_sched_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pdsch_start = 5;
  bool has_pdsch_start() const;
  private:
  bool _internal_has_pdsch_start() const;
  public:
  void clear_pdsch_start();
  ::PROTOBUF_NAMESPACE_ID::uint32 pdsch_start() const;
  void set_pdsch_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pdsch_start() const;
  void _internal_set_pdsch_start(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_scell_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scell_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 use_ccs_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sched_cell_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pdsch_start_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_lc_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_lc_config) */ {
 public:
  inline flex_lc_config() : flex_lc_config(nullptr) {}
  virtual ~flex_lc_config();

  flex_lc_config(const flex_lc_config& from);
  flex_lc_config(flex_lc_config&& from) noexcept
    : flex_lc_config() {
    *this = ::std::move(from);
  }

  inline flex_lc_config& operator=(const flex_lc_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_lc_config& operator=(flex_lc_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_lc_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_lc_config* internal_default_instance() {
    return reinterpret_cast<const flex_lc_config*>(
               &_flex_lc_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(flex_lc_config& a, flex_lc_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_lc_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_lc_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_lc_config* New() const final {
    return CreateMaybeMessage<flex_lc_config>(nullptr);
  }

  flex_lc_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_lc_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_lc_config& from);
  void MergeFrom(const flex_lc_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_lc_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_lc_config";
  }
  protected:
  explicit flex_lc_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLcidFieldNumber = 1,
    kLcgFieldNumber = 2,
    kDirectionFieldNumber = 3,
    kQosBearerTypeFieldNumber = 4,
    kERABMaxBitrateULFieldNumber = 6,
    kERABMaxBitrateDLFieldNumber = 7,
    kERABGuaranteedBitrateULFieldNumber = 8,
    kERABGuaranteedBitrateDLFieldNumber = 9,
    kQciFieldNumber = 5,
  };
  // optional uint32 lcid = 1;
  bool has_lcid() const;
  private:
  bool _internal_has_lcid() const;
  public:
  void clear_lcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lcid() const;
  void set_lcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lcid() const;
  void _internal_set_lcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 lcg = 2;
  bool has_lcg() const;
  private:
  bool _internal_has_lcg() const;
  public:
  void clear_lcg();
  ::PROTOBUF_NAMESPACE_ID::uint32 lcg() const;
  void set_lcg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lcg() const;
  void _internal_set_lcg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 direction = 3;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::uint32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 qos_bearer_type = 4;
  bool has_qos_bearer_type() const;
  private:
  bool _internal_has_qos_bearer_type() const;
  public:
  void clear_qos_bearer_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 qos_bearer_type() const;
  void set_qos_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qos_bearer_type() const;
  void _internal_set_qos_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 e_RAB_max_bitrate_UL = 6;
  bool has_e_rab_max_bitrate_ul() const;
  private:
  bool _internal_has_e_rab_max_bitrate_ul() const;
  public:
  void clear_e_rab_max_bitrate_ul();
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_max_bitrate_ul() const;
  void set_e_rab_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_e_rab_max_bitrate_ul() const;
  void _internal_set_e_rab_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 e_RAB_max_bitrate_DL = 7;
  bool has_e_rab_max_bitrate_dl() const;
  private:
  bool _internal_has_e_rab_max_bitrate_dl() const;
  public:
  void clear_e_rab_max_bitrate_dl();
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_max_bitrate_dl() const;
  void set_e_rab_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_e_rab_max_bitrate_dl() const;
  void _internal_set_e_rab_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
  bool has_e_rab_guaranteed_bitrate_ul() const;
  private:
  bool _internal_has_e_rab_guaranteed_bitrate_ul() const;
  public:
  void clear_e_rab_guaranteed_bitrate_ul();
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_guaranteed_bitrate_ul() const;
  void set_e_rab_guaranteed_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_e_rab_guaranteed_bitrate_ul() const;
  void _internal_set_e_rab_guaranteed_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
  bool has_e_rab_guaranteed_bitrate_dl() const;
  private:
  bool _internal_has_e_rab_guaranteed_bitrate_dl() const;
  public:
  void clear_e_rab_guaranteed_bitrate_dl();
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_guaranteed_bitrate_dl() const;
  void set_e_rab_guaranteed_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_e_rab_guaranteed_bitrate_dl() const;
  void _internal_set_e_rab_guaranteed_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 qci = 5;
  bool has_qci() const;
  private:
  bool _internal_has_qci() const;
  public:
  void clear_qci();
  ::PROTOBUF_NAMESPACE_ID::uint32 qci() const;
  void set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_qci() const;
  void _internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_lc_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lcg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qos_bearer_type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_max_bitrate_ul_;
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_max_bitrate_dl_;
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_guaranteed_bitrate_ul_;
  ::PROTOBUF_NAMESPACE_ID::uint64 e_rab_guaranteed_bitrate_dl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 qci_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_plmn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_plmn) */ {
 public:
  inline flex_plmn() : flex_plmn(nullptr) {}
  virtual ~flex_plmn();

  flex_plmn(const flex_plmn& from);
  flex_plmn(flex_plmn&& from) noexcept
    : flex_plmn() {
    *this = ::std::move(from);
  }

  inline flex_plmn& operator=(const flex_plmn& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_plmn& operator=(flex_plmn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_plmn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_plmn* internal_default_instance() {
    return reinterpret_cast<const flex_plmn*>(
               &_flex_plmn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(flex_plmn& a, flex_plmn& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_plmn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_plmn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_plmn* New() const final {
    return CreateMaybeMessage<flex_plmn>(nullptr);
  }

  flex_plmn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_plmn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_plmn& from);
  void MergeFrom(const flex_plmn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_plmn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_plmn";
  }
  protected:
  explicit flex_plmn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMccFieldNumber = 1,
    kMncFieldNumber = 2,
    kMncLengthFieldNumber = 3,
  };
  // optional uint32 mcc = 1;
  bool has_mcc() const;
  private:
  bool _internal_has_mcc() const;
  public:
  void clear_mcc();
  ::PROTOBUF_NAMESPACE_ID::uint32 mcc() const;
  void set_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mcc() const;
  void _internal_set_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mnc = 2;
  bool has_mnc() const;
  private:
  bool _internal_has_mnc() const;
  public:
  void clear_mnc();
  ::PROTOBUF_NAMESPACE_ID::uint32 mnc() const;
  void set_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mnc() const;
  void _internal_set_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mnc_length = 3;
  bool has_mnc_length() const;
  private:
  bool _internal_has_mnc_length() const;
  public:
  void clear_mnc_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 mnc_length() const;
  void set_mnc_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mnc_length() const;
  void _internal_set_mnc_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_plmn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mcc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mnc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mnc_length_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_measurement_info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_measurement_info) */ {
 public:
  inline flex_measurement_info() : flex_measurement_info(nullptr) {}
  virtual ~flex_measurement_info();

  flex_measurement_info(const flex_measurement_info& from);
  flex_measurement_info(flex_measurement_info&& from) noexcept
    : flex_measurement_info() {
    *this = ::std::move(from);
  }

  inline flex_measurement_info& operator=(const flex_measurement_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_measurement_info& operator=(flex_measurement_info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_measurement_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_measurement_info* internal_default_instance() {
    return reinterpret_cast<const flex_measurement_info*>(
               &_flex_measurement_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(flex_measurement_info& a, flex_measurement_info& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_measurement_info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_measurement_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_measurement_info* New() const final {
    return CreateMaybeMessage<flex_measurement_info>(nullptr);
  }

  flex_measurement_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_measurement_info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_measurement_info& from);
  void MergeFrom(const flex_measurement_info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_measurement_info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_measurement_info";
  }
  protected:
  explicit flex_measurement_info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIndividualOffsetFieldNumber = 3,
    kEventFieldNumber = 6,
    kOffsetFreqServingFieldNumber = 1,
    kOffsetFreqNeighbouringFieldNumber = 2,
    kFilterCoefficientRsrpFieldNumber = 4,
    kFilterCoefficientRsrqFieldNumber = 5,
  };
  // repeated int64 cell_individual_offset = 3;
  int cell_individual_offset_size() const;
  private:
  int _internal_cell_individual_offset_size() const;
  public:
  void clear_cell_individual_offset();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cell_individual_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_cell_individual_offset() const;
  void _internal_add_cell_individual_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_cell_individual_offset();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 cell_individual_offset(int index) const;
  void set_cell_individual_offset(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_cell_individual_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      cell_individual_offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_cell_individual_offset();

  // optional .protocol.flex_measurement_event event = 6;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::protocol::flex_measurement_event& event() const;
  ::protocol::flex_measurement_event* release_event();
  ::protocol::flex_measurement_event* mutable_event();
  void set_allocated_event(::protocol::flex_measurement_event* event);
  private:
  const ::protocol::flex_measurement_event& _internal_event() const;
  ::protocol::flex_measurement_event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::protocol::flex_measurement_event* event);
  ::protocol::flex_measurement_event* unsafe_arena_release_event();

  // optional int64 offset_freq_serving = 1;
  bool has_offset_freq_serving() const;
  private:
  bool _internal_has_offset_freq_serving() const;
  public:
  void clear_offset_freq_serving();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_freq_serving() const;
  void set_offset_freq_serving(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_freq_serving() const;
  void _internal_set_offset_freq_serving(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 offset_freq_neighbouring = 2;
  bool has_offset_freq_neighbouring() const;
  private:
  bool _internal_has_offset_freq_neighbouring() const;
  public:
  void clear_offset_freq_neighbouring();
  ::PROTOBUF_NAMESPACE_ID::int64 offset_freq_neighbouring() const;
  void set_offset_freq_neighbouring(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offset_freq_neighbouring() const;
  void _internal_set_offset_freq_neighbouring(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 filter_coefficient_rsrp = 4;
  bool has_filter_coefficient_rsrp() const;
  private:
  bool _internal_has_filter_coefficient_rsrp() const;
  public:
  void clear_filter_coefficient_rsrp();
  ::PROTOBUF_NAMESPACE_ID::int64 filter_coefficient_rsrp() const;
  void set_filter_coefficient_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filter_coefficient_rsrp() const;
  void _internal_set_filter_coefficient_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 filter_coefficient_rsrq = 5;
  bool has_filter_coefficient_rsrq() const;
  private:
  bool _internal_has_filter_coefficient_rsrq() const;
  public:
  void clear_filter_coefficient_rsrq();
  ::PROTOBUF_NAMESPACE_ID::int64 filter_coefficient_rsrq() const;
  void set_filter_coefficient_rsrq(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filter_coefficient_rsrq() const;
  void _internal_set_filter_coefficient_rsrq(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_measurement_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > cell_individual_offset_;
  ::protocol::flex_measurement_event* event_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_freq_serving_;
  ::PROTOBUF_NAMESPACE_ID::int64 offset_freq_neighbouring_;
  ::PROTOBUF_NAMESPACE_ID::int64 filter_coefficient_rsrp_;
  ::PROTOBUF_NAMESPACE_ID::int64 filter_coefficient_rsrq_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_measurement_event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_measurement_event) */ {
 public:
  inline flex_measurement_event() : flex_measurement_event(nullptr) {}
  virtual ~flex_measurement_event();

  flex_measurement_event(const flex_measurement_event& from);
  flex_measurement_event(flex_measurement_event&& from) noexcept
    : flex_measurement_event() {
    *this = ::std::move(from);
  }

  inline flex_measurement_event& operator=(const flex_measurement_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_measurement_event& operator=(flex_measurement_event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_measurement_event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_measurement_event* internal_default_instance() {
    return reinterpret_cast<const flex_measurement_event*>(
               &_flex_measurement_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(flex_measurement_event& a, flex_measurement_event& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_measurement_event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_measurement_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_measurement_event* New() const final {
    return CreateMaybeMessage<flex_measurement_event>(nullptr);
  }

  flex_measurement_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_measurement_event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_measurement_event& from);
  void MergeFrom(const flex_measurement_event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_measurement_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_measurement_event";
  }
  protected:
  explicit flex_measurement_event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodicalFieldNumber = 1,
    kA1FieldNumber = 2,
    kA2FieldNumber = 3,
    kA3FieldNumber = 4,
    kA4FieldNumber = 5,
    kA5FieldNumber = 6,
  };
  // optional .protocol.flex_per_event periodical = 1;
  bool has_periodical() const;
  private:
  bool _internal_has_periodical() const;
  public:
  void clear_periodical();
  const ::protocol::flex_per_event& periodical() const;
  ::protocol::flex_per_event* release_periodical();
  ::protocol::flex_per_event* mutable_periodical();
  void set_allocated_periodical(::protocol::flex_per_event* periodical);
  private:
  const ::protocol::flex_per_event& _internal_periodical() const;
  ::protocol::flex_per_event* _internal_mutable_periodical();
  public:
  void unsafe_arena_set_allocated_periodical(
      ::protocol::flex_per_event* periodical);
  ::protocol::flex_per_event* unsafe_arena_release_periodical();

  // optional .protocol.flex_a1_event a1 = 2;
  bool has_a1() const;
  private:
  bool _internal_has_a1() const;
  public:
  void clear_a1();
  const ::protocol::flex_a1_event& a1() const;
  ::protocol::flex_a1_event* release_a1();
  ::protocol::flex_a1_event* mutable_a1();
  void set_allocated_a1(::protocol::flex_a1_event* a1);
  private:
  const ::protocol::flex_a1_event& _internal_a1() const;
  ::protocol::flex_a1_event* _internal_mutable_a1();
  public:
  void unsafe_arena_set_allocated_a1(
      ::protocol::flex_a1_event* a1);
  ::protocol::flex_a1_event* unsafe_arena_release_a1();

  // optional .protocol.flex_a2_event a2 = 3;
  bool has_a2() const;
  private:
  bool _internal_has_a2() const;
  public:
  void clear_a2();
  const ::protocol::flex_a2_event& a2() const;
  ::protocol::flex_a2_event* release_a2();
  ::protocol::flex_a2_event* mutable_a2();
  void set_allocated_a2(::protocol::flex_a2_event* a2);
  private:
  const ::protocol::flex_a2_event& _internal_a2() const;
  ::protocol::flex_a2_event* _internal_mutable_a2();
  public:
  void unsafe_arena_set_allocated_a2(
      ::protocol::flex_a2_event* a2);
  ::protocol::flex_a2_event* unsafe_arena_release_a2();

  // optional .protocol.flex_a3_event a3 = 4;
  bool has_a3() const;
  private:
  bool _internal_has_a3() const;
  public:
  void clear_a3();
  const ::protocol::flex_a3_event& a3() const;
  ::protocol::flex_a3_event* release_a3();
  ::protocol::flex_a3_event* mutable_a3();
  void set_allocated_a3(::protocol::flex_a3_event* a3);
  private:
  const ::protocol::flex_a3_event& _internal_a3() const;
  ::protocol::flex_a3_event* _internal_mutable_a3();
  public:
  void unsafe_arena_set_allocated_a3(
      ::protocol::flex_a3_event* a3);
  ::protocol::flex_a3_event* unsafe_arena_release_a3();

  // optional .protocol.flex_a4_event a4 = 5;
  bool has_a4() const;
  private:
  bool _internal_has_a4() const;
  public:
  void clear_a4();
  const ::protocol::flex_a4_event& a4() const;
  ::protocol::flex_a4_event* release_a4();
  ::protocol::flex_a4_event* mutable_a4();
  void set_allocated_a4(::protocol::flex_a4_event* a4);
  private:
  const ::protocol::flex_a4_event& _internal_a4() const;
  ::protocol::flex_a4_event* _internal_mutable_a4();
  public:
  void unsafe_arena_set_allocated_a4(
      ::protocol::flex_a4_event* a4);
  ::protocol::flex_a4_event* unsafe_arena_release_a4();

  // optional .protocol.flex_a5_event a5 = 6;
  bool has_a5() const;
  private:
  bool _internal_has_a5() const;
  public:
  void clear_a5();
  const ::protocol::flex_a5_event& a5() const;
  ::protocol::flex_a5_event* release_a5();
  ::protocol::flex_a5_event* mutable_a5();
  void set_allocated_a5(::protocol::flex_a5_event* a5);
  private:
  const ::protocol::flex_a5_event& _internal_a5() const;
  ::protocol::flex_a5_event* _internal_mutable_a5();
  public:
  void unsafe_arena_set_allocated_a5(
      ::protocol::flex_a5_event* a5);
  ::protocol::flex_a5_event* unsafe_arena_release_a5();

  // @@protoc_insertion_point(class_scope:protocol.flex_measurement_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::flex_per_event* periodical_;
  ::protocol::flex_a1_event* a1_;
  ::protocol::flex_a2_event* a2_;
  ::protocol::flex_a3_event* a3_;
  ::protocol::flex_a4_event* a4_;
  ::protocol::flex_a5_event* a5_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_per_event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_per_event) */ {
 public:
  inline flex_per_event() : flex_per_event(nullptr) {}
  virtual ~flex_per_event();

  flex_per_event(const flex_per_event& from);
  flex_per_event(flex_per_event&& from) noexcept
    : flex_per_event() {
    *this = ::std::move(from);
  }

  inline flex_per_event& operator=(const flex_per_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_per_event& operator=(flex_per_event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_per_event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_per_event* internal_default_instance() {
    return reinterpret_cast<const flex_per_event*>(
               &_flex_per_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(flex_per_event& a, flex_per_event& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_per_event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_per_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_per_event* New() const final {
    return CreateMaybeMessage<flex_per_event>(nullptr);
  }

  flex_per_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_per_event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_per_event& from);
  void MergeFrom(const flex_per_event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_per_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_per_event";
  }
  protected:
  explicit flex_per_event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxReportCellsFieldNumber = 1,
  };
  // optional int64 max_report_cells = 1;
  bool has_max_report_cells() const;
  private:
  bool _internal_has_max_report_cells() const;
  public:
  void clear_max_report_cells();
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells() const;
  void set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_report_cells() const;
  void _internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_per_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_a1_event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_a1_event) */ {
 public:
  inline flex_a1_event() : flex_a1_event(nullptr) {}
  virtual ~flex_a1_event();

  flex_a1_event(const flex_a1_event& from);
  flex_a1_event(flex_a1_event&& from) noexcept
    : flex_a1_event() {
    *this = ::std::move(from);
  }

  inline flex_a1_event& operator=(const flex_a1_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_a1_event& operator=(flex_a1_event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_a1_event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_a1_event* internal_default_instance() {
    return reinterpret_cast<const flex_a1_event*>(
               &_flex_a1_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(flex_a1_event& a, flex_a1_event& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_a1_event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_a1_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_a1_event* New() const final {
    return CreateMaybeMessage<flex_a1_event>(nullptr);
  }

  flex_a1_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_a1_event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_a1_event& from);
  void MergeFrom(const flex_a1_event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_a1_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_a1_event";
  }
  protected:
  explicit flex_a1_event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdRsrpFieldNumber = 1,
    kHysteresisFieldNumber = 2,
    kTimeToTriggerFieldNumber = 3,
    kMaxReportCellsFieldNumber = 4,
  };
  // optional int64 threshold_rsrp = 1;
  bool has_threshold_rsrp() const;
  private:
  bool _internal_has_threshold_rsrp() const;
  public:
  void clear_threshold_rsrp();
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp() const;
  void set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_threshold_rsrp() const;
  void _internal_set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 hysteresis = 2;
  bool has_hysteresis() const;
  private:
  bool _internal_has_hysteresis() const;
  public:
  void clear_hysteresis();
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis() const;
  void set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hysteresis() const;
  void _internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 time_to_trigger = 3;
  bool has_time_to_trigger() const;
  private:
  bool _internal_has_time_to_trigger() const;
  public:
  void clear_time_to_trigger();
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger() const;
  void set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_to_trigger() const;
  void _internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 max_report_cells = 4;
  bool has_max_report_cells() const;
  private:
  bool _internal_has_max_report_cells() const;
  public:
  void clear_max_report_cells();
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells() const;
  void set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_report_cells() const;
  void _internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_a1_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp_;
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_a2_event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_a2_event) */ {
 public:
  inline flex_a2_event() : flex_a2_event(nullptr) {}
  virtual ~flex_a2_event();

  flex_a2_event(const flex_a2_event& from);
  flex_a2_event(flex_a2_event&& from) noexcept
    : flex_a2_event() {
    *this = ::std::move(from);
  }

  inline flex_a2_event& operator=(const flex_a2_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_a2_event& operator=(flex_a2_event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_a2_event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_a2_event* internal_default_instance() {
    return reinterpret_cast<const flex_a2_event*>(
               &_flex_a2_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(flex_a2_event& a, flex_a2_event& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_a2_event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_a2_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_a2_event* New() const final {
    return CreateMaybeMessage<flex_a2_event>(nullptr);
  }

  flex_a2_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_a2_event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_a2_event& from);
  void MergeFrom(const flex_a2_event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_a2_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_a2_event";
  }
  protected:
  explicit flex_a2_event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdRsrpFieldNumber = 1,
    kHysteresisFieldNumber = 2,
    kTimeToTriggerFieldNumber = 3,
    kMaxReportCellsFieldNumber = 4,
  };
  // optional int64 threshold_rsrp = 1;
  bool has_threshold_rsrp() const;
  private:
  bool _internal_has_threshold_rsrp() const;
  public:
  void clear_threshold_rsrp();
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp() const;
  void set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_threshold_rsrp() const;
  void _internal_set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 hysteresis = 2;
  bool has_hysteresis() const;
  private:
  bool _internal_has_hysteresis() const;
  public:
  void clear_hysteresis();
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis() const;
  void set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hysteresis() const;
  void _internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 time_to_trigger = 3;
  bool has_time_to_trigger() const;
  private:
  bool _internal_has_time_to_trigger() const;
  public:
  void clear_time_to_trigger();
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger() const;
  void set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_to_trigger() const;
  void _internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 max_report_cells = 4;
  bool has_max_report_cells() const;
  private:
  bool _internal_has_max_report_cells() const;
  public:
  void clear_max_report_cells();
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells() const;
  void set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_report_cells() const;
  void _internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_a2_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp_;
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_a3_event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_a3_event) */ {
 public:
  inline flex_a3_event() : flex_a3_event(nullptr) {}
  virtual ~flex_a3_event();

  flex_a3_event(const flex_a3_event& from);
  flex_a3_event(flex_a3_event&& from) noexcept
    : flex_a3_event() {
    *this = ::std::move(from);
  }

  inline flex_a3_event& operator=(const flex_a3_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_a3_event& operator=(flex_a3_event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_a3_event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_a3_event* internal_default_instance() {
    return reinterpret_cast<const flex_a3_event*>(
               &_flex_a3_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(flex_a3_event& a, flex_a3_event& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_a3_event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_a3_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_a3_event* New() const final {
    return CreateMaybeMessage<flex_a3_event>(nullptr);
  }

  flex_a3_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_a3_event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_a3_event& from);
  void MergeFrom(const flex_a3_event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_a3_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_a3_event";
  }
  protected:
  explicit flex_a3_event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kA3OffsetFieldNumber = 1,
    kHysteresisFieldNumber = 3,
    kTimeToTriggerFieldNumber = 4,
    kMaxReportCellsFieldNumber = 5,
    kReportOnLeaveFieldNumber = 2,
  };
  // optional int64 a3_offset = 1;
  bool has_a3_offset() const;
  private:
  bool _internal_has_a3_offset() const;
  public:
  void clear_a3_offset();
  ::PROTOBUF_NAMESPACE_ID::int64 a3_offset() const;
  void set_a3_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_a3_offset() const;
  void _internal_set_a3_offset(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 hysteresis = 3;
  bool has_hysteresis() const;
  private:
  bool _internal_has_hysteresis() const;
  public:
  void clear_hysteresis();
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis() const;
  void set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hysteresis() const;
  void _internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 time_to_trigger = 4;
  bool has_time_to_trigger() const;
  private:
  bool _internal_has_time_to_trigger() const;
  public:
  void clear_time_to_trigger();
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger() const;
  void set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_to_trigger() const;
  void _internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 max_report_cells = 5;
  bool has_max_report_cells() const;
  private:
  bool _internal_has_max_report_cells() const;
  public:
  void clear_max_report_cells();
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells() const;
  void set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_report_cells() const;
  void _internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 report_on_leave = 2;
  bool has_report_on_leave() const;
  private:
  bool _internal_has_report_on_leave() const;
  public:
  void clear_report_on_leave();
  ::PROTOBUF_NAMESPACE_ID::int32 report_on_leave() const;
  void set_report_on_leave(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_report_on_leave() const;
  void _internal_set_report_on_leave(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_a3_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 a3_offset_;
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells_;
  ::PROTOBUF_NAMESPACE_ID::int32 report_on_leave_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_a4_event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_a4_event) */ {
 public:
  inline flex_a4_event() : flex_a4_event(nullptr) {}
  virtual ~flex_a4_event();

  flex_a4_event(const flex_a4_event& from);
  flex_a4_event(flex_a4_event&& from) noexcept
    : flex_a4_event() {
    *this = ::std::move(from);
  }

  inline flex_a4_event& operator=(const flex_a4_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_a4_event& operator=(flex_a4_event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_a4_event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_a4_event* internal_default_instance() {
    return reinterpret_cast<const flex_a4_event*>(
               &_flex_a4_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(flex_a4_event& a, flex_a4_event& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_a4_event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_a4_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_a4_event* New() const final {
    return CreateMaybeMessage<flex_a4_event>(nullptr);
  }

  flex_a4_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_a4_event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_a4_event& from);
  void MergeFrom(const flex_a4_event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_a4_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_a4_event";
  }
  protected:
  explicit flex_a4_event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdRsrpFieldNumber = 1,
    kHysteresisFieldNumber = 2,
    kTimeToTriggerFieldNumber = 3,
    kMaxReportCellsFieldNumber = 4,
  };
  // optional int64 threshold_rsrp = 1;
  bool has_threshold_rsrp() const;
  private:
  bool _internal_has_threshold_rsrp() const;
  public:
  void clear_threshold_rsrp();
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp() const;
  void set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_threshold_rsrp() const;
  void _internal_set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 hysteresis = 2;
  bool has_hysteresis() const;
  private:
  bool _internal_has_hysteresis() const;
  public:
  void clear_hysteresis();
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis() const;
  void set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hysteresis() const;
  void _internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 time_to_trigger = 3;
  bool has_time_to_trigger() const;
  private:
  bool _internal_has_time_to_trigger() const;
  public:
  void clear_time_to_trigger();
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger() const;
  void set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_to_trigger() const;
  void _internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 max_report_cells = 4;
  bool has_max_report_cells() const;
  private:
  bool _internal_has_max_report_cells() const;
  public:
  void clear_max_report_cells();
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells() const;
  void set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_report_cells() const;
  void _internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_a4_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp_;
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_a5_event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_a5_event) */ {
 public:
  inline flex_a5_event() : flex_a5_event(nullptr) {}
  virtual ~flex_a5_event();

  flex_a5_event(const flex_a5_event& from);
  flex_a5_event(flex_a5_event&& from) noexcept
    : flex_a5_event() {
    *this = ::std::move(from);
  }

  inline flex_a5_event& operator=(const flex_a5_event& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_a5_event& operator=(flex_a5_event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_a5_event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_a5_event* internal_default_instance() {
    return reinterpret_cast<const flex_a5_event*>(
               &_flex_a5_event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(flex_a5_event& a, flex_a5_event& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_a5_event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_a5_event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_a5_event* New() const final {
    return CreateMaybeMessage<flex_a5_event>(nullptr);
  }

  flex_a5_event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_a5_event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_a5_event& from);
  void MergeFrom(const flex_a5_event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_a5_event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_a5_event";
  }
  protected:
  explicit flex_a5_event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdRsrp1FieldNumber = 1,
    kThresholdRsrp2FieldNumber = 2,
    kHysteresisFieldNumber = 3,
    kTimeToTriggerFieldNumber = 4,
    kMaxReportCellsFieldNumber = 5,
  };
  // optional int64 threshold_rsrp_1 = 1;
  bool has_threshold_rsrp_1() const;
  private:
  bool _internal_has_threshold_rsrp_1() const;
  public:
  void clear_threshold_rsrp_1();
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp_1() const;
  void set_threshold_rsrp_1(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_threshold_rsrp_1() const;
  void _internal_set_threshold_rsrp_1(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 threshold_rsrp_2 = 2;
  bool has_threshold_rsrp_2() const;
  private:
  bool _internal_has_threshold_rsrp_2() const;
  public:
  void clear_threshold_rsrp_2();
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp_2() const;
  void set_threshold_rsrp_2(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_threshold_rsrp_2() const;
  void _internal_set_threshold_rsrp_2(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 hysteresis = 3;
  bool has_hysteresis() const;
  private:
  bool _internal_has_hysteresis() const;
  public:
  void clear_hysteresis();
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis() const;
  void set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_hysteresis() const;
  void _internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 time_to_trigger = 4;
  bool has_time_to_trigger() const;
  private:
  bool _internal_has_time_to_trigger() const;
  public:
  void clear_time_to_trigger();
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger() const;
  void set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time_to_trigger() const;
  void _internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int64 max_report_cells = 5;
  bool has_max_report_cells() const;
  private:
  bool _internal_has_max_report_cells() const;
  public:
  void clear_max_report_cells();
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells() const;
  void set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_max_report_cells() const;
  void _internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_a5_event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp_1_;
  ::PROTOBUF_NAMESPACE_ID::int64 threshold_rsrp_2_;
  ::PROTOBUF_NAMESPACE_ID::int64 hysteresis_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_to_trigger_;
  ::PROTOBUF_NAMESPACE_ID::int64 max_report_cells_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_gummei PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_gummei) */ {
 public:
  inline flex_gummei() : flex_gummei(nullptr) {}
  virtual ~flex_gummei();

  flex_gummei(const flex_gummei& from);
  flex_gummei(flex_gummei&& from) noexcept
    : flex_gummei() {
    *this = ::std::move(from);
  }

  inline flex_gummei& operator=(const flex_gummei& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_gummei& operator=(flex_gummei&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_gummei& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_gummei* internal_default_instance() {
    return reinterpret_cast<const flex_gummei*>(
               &_flex_gummei_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(flex_gummei& a, flex_gummei& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_gummei* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_gummei* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_gummei* New() const final {
    return CreateMaybeMessage<flex_gummei>(nullptr);
  }

  flex_gummei* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_gummei>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_gummei& from);
  void MergeFrom(const flex_gummei& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_gummei* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_gummei";
  }
  protected:
  explicit flex_gummei(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlmnFieldNumber = 1,
    kMmeGroupIdFieldNumber = 2,
    kMmeCodeFieldNumber = 3,
  };
  // optional .protocol.flex_plmn plmn = 1;
  bool has_plmn() const;
  private:
  bool _internal_has_plmn() const;
  public:
  void clear_plmn();
  const ::protocol::flex_plmn& plmn() const;
  ::protocol::flex_plmn* release_plmn();
  ::protocol::flex_plmn* mutable_plmn();
  void set_allocated_plmn(::protocol::flex_plmn* plmn);
  private:
  const ::protocol::flex_plmn& _internal_plmn() const;
  ::protocol::flex_plmn* _internal_mutable_plmn();
  public:
  void unsafe_arena_set_allocated_plmn(
      ::protocol::flex_plmn* plmn);
  ::protocol::flex_plmn* unsafe_arena_release_plmn();

  // optional uint32 mme_group_id = 2;
  bool has_mme_group_id() const;
  private:
  bool _internal_has_mme_group_id() const;
  public:
  void clear_mme_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 mme_group_id() const;
  void set_mme_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mme_group_id() const;
  void _internal_set_mme_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mme_code = 3;
  bool has_mme_code() const;
  private:
  bool _internal_has_mme_code() const;
  public:
  void clear_mme_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 mme_code() const;
  void set_mme_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mme_code() const;
  void _internal_set_mme_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_gummei)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::flex_plmn* plmn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mme_group_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mme_code_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class flex_s1ap_mme PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_s1ap_mme) */ {
 public:
  inline flex_s1ap_mme() : flex_s1ap_mme(nullptr) {}
  virtual ~flex_s1ap_mme();

  flex_s1ap_mme(const flex_s1ap_mme& from);
  flex_s1ap_mme(flex_s1ap_mme&& from) noexcept
    : flex_s1ap_mme() {
    *this = ::std::move(from);
  }

  inline flex_s1ap_mme& operator=(const flex_s1ap_mme& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_s1ap_mme& operator=(flex_s1ap_mme&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_s1ap_mme& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_s1ap_mme* internal_default_instance() {
    return reinterpret_cast<const flex_s1ap_mme*>(
               &_flex_s1ap_mme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(flex_s1ap_mme& a, flex_s1ap_mme& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_s1ap_mme* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_s1ap_mme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_s1ap_mme* New() const final {
    return CreateMaybeMessage<flex_s1ap_mme>(nullptr);
  }

  flex_s1ap_mme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_s1ap_mme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_s1ap_mme& from);
  void MergeFrom(const flex_s1ap_mme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_s1ap_mme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_s1ap_mme";
  }
  protected:
  explicit flex_s1ap_mme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fcommon_2eproto);
    return ::descriptor_table_config_5fcommon_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServedGummeisFieldNumber = 4,
    kRequestedPlmnsFieldNumber = 5,
    kS1IpFieldNumber = 1,
    kNameFieldNumber = 2,
    kStateFieldNumber = 3,
    kRelCapacityFieldNumber = 6,
  };
  // repeated .protocol.flex_gummei served_gummeis = 4;
  int served_gummeis_size() const;
  private:
  int _internal_served_gummeis_size() const;
  public:
  void clear_served_gummeis();
  ::protocol::flex_gummei* mutable_served_gummeis(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gummei >*
      mutable_served_gummeis();
  private:
  const ::protocol::flex_gummei& _internal_served_gummeis(int index) const;
  ::protocol::flex_gummei* _internal_add_served_gummeis();
  public:
  const ::protocol::flex_gummei& served_gummeis(int index) const;
  ::protocol::flex_gummei* add_served_gummeis();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gummei >&
      served_gummeis() const;

  // repeated .protocol.flex_plmn requested_plmns = 5;
  int requested_plmns_size() const;
  private:
  int _internal_requested_plmns_size() const;
  public:
  void clear_requested_plmns();
  ::protocol::flex_plmn* mutable_requested_plmns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >*
      mutable_requested_plmns();
  private:
  const ::protocol::flex_plmn& _internal_requested_plmns(int index) const;
  ::protocol::flex_plmn* _internal_add_requested_plmns();
  public:
  const ::protocol::flex_plmn& requested_plmns(int index) const;
  ::protocol::flex_plmn* add_requested_plmns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >&
      requested_plmns() const;

  // optional string s1_ip = 1;
  bool has_s1_ip() const;
  private:
  bool _internal_has_s1_ip() const;
  public:
  void clear_s1_ip();
  const std::string& s1_ip() const;
  void set_s1_ip(const std::string& value);
  void set_s1_ip(std::string&& value);
  void set_s1_ip(const char* value);
  void set_s1_ip(const char* value, size_t size);
  std::string* mutable_s1_ip();
  std::string* release_s1_ip();
  void set_allocated_s1_ip(std::string* s1_ip);
  private:
  const std::string& _internal_s1_ip() const;
  void _internal_set_s1_ip(const std::string& value);
  std::string* _internal_mutable_s1_ip();
  public:

  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional .protocol.flex_mme_state state = 3;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::protocol::flex_mme_state state() const;
  void set_state(::protocol::flex_mme_state value);
  private:
  ::protocol::flex_mme_state _internal_state() const;
  void _internal_set_state(::protocol::flex_mme_state value);
  public:

  // optional uint32 rel_capacity = 6;
  bool has_rel_capacity() const;
  private:
  bool _internal_has_rel_capacity() const;
  public:
  void clear_rel_capacity();
  ::PROTOBUF_NAMESPACE_ID::uint32 rel_capacity() const;
  void set_rel_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rel_capacity() const;
  void _internal_set_rel_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_s1ap_mme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gummei > served_gummeis_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn > requested_plmns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s1_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int state_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rel_capacity_;
  friend struct ::TableStruct_config_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// flex_si_config

// optional uint32 sfn = 1;
inline bool flex_si_config::_internal_has_sfn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_si_config::has_sfn() const {
  return _internal_has_sfn();
}
inline void flex_si_config::clear_sfn() {
  sfn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_config::_internal_sfn() const {
  return sfn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_config::sfn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.sfn)
  return _internal_sfn();
}
inline void flex_si_config::_internal_set_sfn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sfn_ = value;
}
inline void flex_si_config::set_sfn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sfn(value);
  // @@protoc_insertion_point(field_set:protocol.flex_si_config.sfn)
}

// optional uint32 sib1_length = 2;
inline bool flex_si_config::_internal_has_sib1_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_si_config::has_sib1_length() const {
  return _internal_has_sib1_length();
}
inline void flex_si_config::clear_sib1_length() {
  sib1_length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_config::_internal_sib1_length() const {
  return sib1_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_config::sib1_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.sib1_length)
  return _internal_sib1_length();
}
inline void flex_si_config::_internal_set_sib1_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sib1_length_ = value;
}
inline void flex_si_config::set_sib1_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sib1_length(value);
  // @@protoc_insertion_point(field_set:protocol.flex_si_config.sib1_length)
}

// optional uint32 si_window_length = 3;
inline bool flex_si_config::_internal_has_si_window_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_si_config::has_si_window_length() const {
  return _internal_has_si_window_length();
}
inline void flex_si_config::clear_si_window_length() {
  si_window_length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_config::_internal_si_window_length() const {
  return si_window_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_config::si_window_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.si_window_length)
  return _internal_si_window_length();
}
inline void flex_si_config::_internal_set_si_window_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  si_window_length_ = value;
}
inline void flex_si_config::set_si_window_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_si_window_length(value);
  // @@protoc_insertion_point(field_set:protocol.flex_si_config.si_window_length)
}

// repeated .protocol.flex_si_message si_message = 4;
inline int flex_si_config::_internal_si_message_size() const {
  return si_message_.size();
}
inline int flex_si_config::si_message_size() const {
  return _internal_si_message_size();
}
inline void flex_si_config::clear_si_message() {
  si_message_.Clear();
}
inline ::protocol::flex_si_message* flex_si_config::mutable_si_message(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_si_config.si_message)
  return si_message_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_si_message >*
flex_si_config::mutable_si_message() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_si_config.si_message)
  return &si_message_;
}
inline const ::protocol::flex_si_message& flex_si_config::_internal_si_message(int index) const {
  return si_message_.Get(index);
}
inline const ::protocol::flex_si_message& flex_si_config::si_message(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_config.si_message)
  return _internal_si_message(index);
}
inline ::protocol::flex_si_message* flex_si_config::_internal_add_si_message() {
  return si_message_.Add();
}
inline ::protocol::flex_si_message* flex_si_config::add_si_message() {
  // @@protoc_insertion_point(field_add:protocol.flex_si_config.si_message)
  return _internal_add_si_message();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_si_message >&
flex_si_config::si_message() const {
  // @@protoc_insertion_point(field_list:protocol.flex_si_config.si_message)
  return si_message_;
}

// -------------------------------------------------------------------

// flex_si_message

// optional uint32 periodicity = 1;
inline bool flex_si_message::_internal_has_periodicity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_si_message::has_periodicity() const {
  return _internal_has_periodicity();
}
inline void flex_si_message::clear_periodicity() {
  periodicity_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_message::_internal_periodicity() const {
  return periodicity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_message::periodicity() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_message.periodicity)
  return _internal_periodicity();
}
inline void flex_si_message::_internal_set_periodicity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  periodicity_ = value;
}
inline void flex_si_message::set_periodicity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_periodicity(value);
  // @@protoc_insertion_point(field_set:protocol.flex_si_message.periodicity)
}

// optional uint32 length = 2;
inline bool flex_si_message::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_si_message::has_length() const {
  return _internal_has_length();
}
inline void flex_si_message::clear_length() {
  length_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_message::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_si_message::length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_si_message.length)
  return _internal_length();
}
inline void flex_si_message::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void flex_si_message::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:protocol.flex_si_message.length)
}

// -------------------------------------------------------------------

// flex_slice_static

// optional uint32 posLow = 1;
inline bool flex_slice_static::_internal_has_poslow() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_slice_static::has_poslow() const {
  return _internal_has_poslow();
}
inline void flex_slice_static::clear_poslow() {
  poslow_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_slice_static::_internal_poslow() const {
  return poslow_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_slice_static::poslow() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_static.posLow)
  return _internal_poslow();
}
inline void flex_slice_static::_internal_set_poslow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  poslow_ = value;
}
inline void flex_slice_static::set_poslow(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_poslow(value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice_static.posLow)
}

// optional uint32 posHigh = 2;
inline bool flex_slice_static::_internal_has_poshigh() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_slice_static::has_poshigh() const {
  return _internal_has_poshigh();
}
inline void flex_slice_static::clear_poshigh() {
  poshigh_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_slice_static::_internal_poshigh() const {
  return poshigh_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_slice_static::poshigh() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_static.posHigh)
  return _internal_poshigh();
}
inline void flex_slice_static::_internal_set_poshigh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  poshigh_ = value;
}
inline void flex_slice_static::set_poshigh(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_poshigh(value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice_static.posHigh)
}

// -------------------------------------------------------------------

// flex_slice

// optional uint32 id = 1;
inline bool flex_slice::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_slice::has_id() const {
  return _internal_has_id();
}
inline void flex_slice::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_slice::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_slice::id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.id)
  return _internal_id();
}
inline void flex_slice::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void flex_slice::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice.id)
}

// optional string label = 2;
inline bool flex_slice::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_slice::has_label() const {
  return _internal_has_label();
}
inline void flex_slice::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& flex_slice::label() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.label)
  return _internal_label();
}
inline void flex_slice::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice.label)
}
inline std::string* flex_slice::mutable_label() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice.label)
  return _internal_mutable_label();
}
inline const std::string& flex_slice::_internal_label() const {
  return label_.Get();
}
inline void flex_slice::_internal_set_label(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void flex_slice::set_label(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_slice.label)
}
inline void flex_slice::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.flex_slice.label)
}
inline void flex_slice::set_label(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_slice.label)
}
inline std::string* flex_slice::_internal_mutable_label() {
  _has_bits_[0] |= 0x00000001u;
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* flex_slice::release_label() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice.label)
  if (!_internal_has_label()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return label_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void flex_slice::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice.label)
}

// optional string scheduler = 3;
inline bool flex_slice::_internal_has_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_slice::has_scheduler() const {
  return _internal_has_scheduler();
}
inline void flex_slice::clear_scheduler() {
  scheduler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& flex_slice::scheduler() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.scheduler)
  return _internal_scheduler();
}
inline void flex_slice::set_scheduler(const std::string& value) {
  _internal_set_scheduler(value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice.scheduler)
}
inline std::string* flex_slice::mutable_scheduler() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice.scheduler)
  return _internal_mutable_scheduler();
}
inline const std::string& flex_slice::_internal_scheduler() const {
  return scheduler_.Get();
}
inline void flex_slice::_internal_set_scheduler(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void flex_slice::set_scheduler(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  scheduler_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_slice.scheduler)
}
inline void flex_slice::set_scheduler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.flex_slice.scheduler)
}
inline void flex_slice::set_scheduler(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_slice.scheduler)
}
inline std::string* flex_slice::_internal_mutable_scheduler() {
  _has_bits_[0] |= 0x00000002u;
  return scheduler_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* flex_slice::release_scheduler() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice.scheduler)
  if (!_internal_has_scheduler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return scheduler_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void flex_slice::set_allocated_scheduler(std::string* scheduler) {
  if (scheduler != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  scheduler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheduler,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice.scheduler)
}

// .protocol.flex_slice_static static = 10;
inline bool flex_slice::_internal_has_static_() const {
  return params_case() == kStatic;
}
inline bool flex_slice::has_static_() const {
  return _internal_has_static_();
}
inline void flex_slice::set_has_static_() {
  _oneof_case_[0] = kStatic;
}
inline void flex_slice::clear_static_() {
  if (_internal_has_static_()) {
    if (GetArena() == nullptr) {
      delete params_.static__;
    }
    clear_has_params();
  }
}
inline ::protocol::flex_slice_static* flex_slice::release_static_() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice.static)
  if (_internal_has_static_()) {
    clear_has_params();
      ::protocol::flex_slice_static* temp = params_.static__;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    params_.static__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::flex_slice_static& flex_slice::_internal_static_() const {
  return _internal_has_static_()
      ? *params_.static__
      : *reinterpret_cast< ::protocol::flex_slice_static*>(&::protocol::_flex_slice_static_default_instance_);
}
inline const ::protocol::flex_slice_static& flex_slice::static_() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice.static)
  return _internal_static_();
}
inline ::protocol::flex_slice_static* flex_slice::unsafe_arena_release_static_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.flex_slice.static)
  if (_internal_has_static_()) {
    clear_has_params();
    ::protocol::flex_slice_static* temp = params_.static__;
    params_.static__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void flex_slice::unsafe_arena_set_allocated_static_(::protocol::flex_slice_static* static_) {
  clear_params();
  if (static_) {
    set_has_static_();
    params_.static__ = static_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_slice.static)
}
inline ::protocol::flex_slice_static* flex_slice::_internal_mutable_static_() {
  if (!_internal_has_static_()) {
    clear_params();
    set_has_static_();
    params_.static__ = CreateMaybeMessage< ::protocol::flex_slice_static >(GetArena());
  }
  return params_.static__;
}
inline ::protocol::flex_slice_static* flex_slice::mutable_static_() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice.static)
  return _internal_mutable_static_();
}

inline bool flex_slice::has_params() const {
  return params_case() != PARAMS_NOT_SET;
}
inline void flex_slice::clear_has_params() {
  _oneof_case_[0] = PARAMS_NOT_SET;
}
inline flex_slice::ParamsCase flex_slice::params_case() const {
  return flex_slice::ParamsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// flex_slice_dl_ul_config

// optional .protocol.flex_slice_algorithm algorithm = 1;
inline bool flex_slice_dl_ul_config::_internal_has_algorithm() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_slice_dl_ul_config::has_algorithm() const {
  return _internal_has_algorithm();
}
inline void flex_slice_dl_ul_config::clear_algorithm() {
  algorithm_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::protocol::flex_slice_algorithm flex_slice_dl_ul_config::_internal_algorithm() const {
  return static_cast< ::protocol::flex_slice_algorithm >(algorithm_);
}
inline ::protocol::flex_slice_algorithm flex_slice_dl_ul_config::algorithm() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_dl_ul_config.algorithm)
  return _internal_algorithm();
}
inline void flex_slice_dl_ul_config::_internal_set_algorithm(::protocol::flex_slice_algorithm value) {
  assert(::protocol::flex_slice_algorithm_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  algorithm_ = value;
}
inline void flex_slice_dl_ul_config::set_algorithm(::protocol::flex_slice_algorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice_dl_ul_config.algorithm)
}

// repeated .protocol.flex_slice slices = 2;
inline int flex_slice_dl_ul_config::_internal_slices_size() const {
  return slices_.size();
}
inline int flex_slice_dl_ul_config::slices_size() const {
  return _internal_slices_size();
}
inline void flex_slice_dl_ul_config::clear_slices() {
  slices_.Clear();
}
inline ::protocol::flex_slice* flex_slice_dl_ul_config::mutable_slices(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_dl_ul_config.slices)
  return slices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_slice >*
flex_slice_dl_ul_config::mutable_slices() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_slice_dl_ul_config.slices)
  return &slices_;
}
inline const ::protocol::flex_slice& flex_slice_dl_ul_config::_internal_slices(int index) const {
  return slices_.Get(index);
}
inline const ::protocol::flex_slice& flex_slice_dl_ul_config::slices(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_dl_ul_config.slices)
  return _internal_slices(index);
}
inline ::protocol::flex_slice* flex_slice_dl_ul_config::_internal_add_slices() {
  return slices_.Add();
}
inline ::protocol::flex_slice* flex_slice_dl_ul_config::add_slices() {
  // @@protoc_insertion_point(field_add:protocol.flex_slice_dl_ul_config.slices)
  return _internal_add_slices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_slice >&
flex_slice_dl_ul_config::slices() const {
  // @@protoc_insertion_point(field_list:protocol.flex_slice_dl_ul_config.slices)
  return slices_;
}

// optional string scheduler = 3;
inline bool flex_slice_dl_ul_config::_internal_has_scheduler() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_slice_dl_ul_config::has_scheduler() const {
  return _internal_has_scheduler();
}
inline void flex_slice_dl_ul_config::clear_scheduler() {
  scheduler_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& flex_slice_dl_ul_config::scheduler() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_dl_ul_config.scheduler)
  return _internal_scheduler();
}
inline void flex_slice_dl_ul_config::set_scheduler(const std::string& value) {
  _internal_set_scheduler(value);
  // @@protoc_insertion_point(field_set:protocol.flex_slice_dl_ul_config.scheduler)
}
inline std::string* flex_slice_dl_ul_config::mutable_scheduler() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_dl_ul_config.scheduler)
  return _internal_mutable_scheduler();
}
inline const std::string& flex_slice_dl_ul_config::_internal_scheduler() const {
  return scheduler_.Get();
}
inline void flex_slice_dl_ul_config::_internal_set_scheduler(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void flex_slice_dl_ul_config::set_scheduler(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  scheduler_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_slice_dl_ul_config.scheduler)
}
inline void flex_slice_dl_ul_config::set_scheduler(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.flex_slice_dl_ul_config.scheduler)
}
inline void flex_slice_dl_ul_config::set_scheduler(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  scheduler_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_slice_dl_ul_config.scheduler)
}
inline std::string* flex_slice_dl_ul_config::_internal_mutable_scheduler() {
  _has_bits_[0] |= 0x00000001u;
  return scheduler_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* flex_slice_dl_ul_config::release_scheduler() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_dl_ul_config.scheduler)
  if (!_internal_has_scheduler()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return scheduler_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void flex_slice_dl_ul_config::set_allocated_scheduler(std::string* scheduler) {
  if (scheduler != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scheduler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scheduler,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_dl_ul_config.scheduler)
}

// -------------------------------------------------------------------

// flex_drx_config

// optional uint32 on_duration_timer = 1;
inline bool flex_drx_config::_internal_has_on_duration_timer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_drx_config::has_on_duration_timer() const {
  return _internal_has_on_duration_timer();
}
inline void flex_drx_config::clear_on_duration_timer() {
  on_duration_timer_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::_internal_on_duration_timer() const {
  return on_duration_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::on_duration_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.on_duration_timer)
  return _internal_on_duration_timer();
}
inline void flex_drx_config::_internal_set_on_duration_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  on_duration_timer_ = value;
}
inline void flex_drx_config::set_on_duration_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_on_duration_timer(value);
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.on_duration_timer)
}

// optional uint32 drx_inactivity_timer = 2;
inline bool flex_drx_config::_internal_has_drx_inactivity_timer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_drx_config::has_drx_inactivity_timer() const {
  return _internal_has_drx_inactivity_timer();
}
inline void flex_drx_config::clear_drx_inactivity_timer() {
  drx_inactivity_timer_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::_internal_drx_inactivity_timer() const {
  return drx_inactivity_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::drx_inactivity_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.drx_inactivity_timer)
  return _internal_drx_inactivity_timer();
}
inline void flex_drx_config::_internal_set_drx_inactivity_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  drx_inactivity_timer_ = value;
}
inline void flex_drx_config::set_drx_inactivity_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drx_inactivity_timer(value);
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.drx_inactivity_timer)
}

// optional uint32 drx_retransmission_timer = 3;
inline bool flex_drx_config::_internal_has_drx_retransmission_timer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_drx_config::has_drx_retransmission_timer() const {
  return _internal_has_drx_retransmission_timer();
}
inline void flex_drx_config::clear_drx_retransmission_timer() {
  drx_retransmission_timer_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::_internal_drx_retransmission_timer() const {
  return drx_retransmission_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::drx_retransmission_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.drx_retransmission_timer)
  return _internal_drx_retransmission_timer();
}
inline void flex_drx_config::_internal_set_drx_retransmission_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  drx_retransmission_timer_ = value;
}
inline void flex_drx_config::set_drx_retransmission_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drx_retransmission_timer(value);
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.drx_retransmission_timer)
}

// optional uint32 long_drx_cycle = 4;
inline bool flex_drx_config::_internal_has_long_drx_cycle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_drx_config::has_long_drx_cycle() const {
  return _internal_has_long_drx_cycle();
}
inline void flex_drx_config::clear_long_drx_cycle() {
  long_drx_cycle_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::_internal_long_drx_cycle() const {
  return long_drx_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::long_drx_cycle() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.long_drx_cycle)
  return _internal_long_drx_cycle();
}
inline void flex_drx_config::_internal_set_long_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  long_drx_cycle_ = value;
}
inline void flex_drx_config::set_long_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_long_drx_cycle(value);
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.long_drx_cycle)
}

// optional uint32 long_drx_cycle_start_offset = 5;
inline bool flex_drx_config::_internal_has_long_drx_cycle_start_offset() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_drx_config::has_long_drx_cycle_start_offset() const {
  return _internal_has_long_drx_cycle_start_offset();
}
inline void flex_drx_config::clear_long_drx_cycle_start_offset() {
  long_drx_cycle_start_offset_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::_internal_long_drx_cycle_start_offset() const {
  return long_drx_cycle_start_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::long_drx_cycle_start_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.long_drx_cycle_start_offset)
  return _internal_long_drx_cycle_start_offset();
}
inline void flex_drx_config::_internal_set_long_drx_cycle_start_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  long_drx_cycle_start_offset_ = value;
}
inline void flex_drx_config::set_long_drx_cycle_start_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_long_drx_cycle_start_offset(value);
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.long_drx_cycle_start_offset)
}

// optional uint32 short_drx_cycle = 6;
inline bool flex_drx_config::_internal_has_short_drx_cycle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool flex_drx_config::has_short_drx_cycle() const {
  return _internal_has_short_drx_cycle();
}
inline void flex_drx_config::clear_short_drx_cycle() {
  short_drx_cycle_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::_internal_short_drx_cycle() const {
  return short_drx_cycle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::short_drx_cycle() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.short_drx_cycle)
  return _internal_short_drx_cycle();
}
inline void flex_drx_config::_internal_set_short_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  short_drx_cycle_ = value;
}
inline void flex_drx_config::set_short_drx_cycle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_short_drx_cycle(value);
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.short_drx_cycle)
}

// optional uint32 drx_short_cycle_timer = 7;
inline bool flex_drx_config::_internal_has_drx_short_cycle_timer() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool flex_drx_config::has_drx_short_cycle_timer() const {
  return _internal_has_drx_short_cycle_timer();
}
inline void flex_drx_config::clear_drx_short_cycle_timer() {
  drx_short_cycle_timer_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::_internal_drx_short_cycle_timer() const {
  return drx_short_cycle_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_drx_config::drx_short_cycle_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_drx_config.drx_short_cycle_timer)
  return _internal_drx_short_cycle_timer();
}
inline void flex_drx_config::_internal_set_drx_short_cycle_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  drx_short_cycle_timer_ = value;
}
inline void flex_drx_config::set_drx_short_cycle_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_drx_short_cycle_timer(value);
  // @@protoc_insertion_point(field_set:protocol.flex_drx_config.drx_short_cycle_timer)
}

// -------------------------------------------------------------------

// flex_sps_config

// optional uint32 semi_persistent_sched_interval_UL = 1;
inline bool flex_sps_config::_internal_has_semi_persistent_sched_interval_ul() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_sps_config::has_semi_persistent_sched_interval_ul() const {
  return _internal_has_semi_persistent_sched_interval_ul();
}
inline void flex_sps_config::clear_semi_persistent_sched_interval_ul() {
  semi_persistent_sched_interval_ul_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::_internal_semi_persistent_sched_interval_ul() const {
  return semi_persistent_sched_interval_ul_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::semi_persistent_sched_interval_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.semi_persistent_sched_interval_UL)
  return _internal_semi_persistent_sched_interval_ul();
}
inline void flex_sps_config::_internal_set_semi_persistent_sched_interval_ul(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  semi_persistent_sched_interval_ul_ = value;
}
inline void flex_sps_config::set_semi_persistent_sched_interval_ul(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semi_persistent_sched_interval_ul(value);
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.semi_persistent_sched_interval_UL)
}

// optional uint32 semi_persistent_sched_interval_DL = 2;
inline bool flex_sps_config::_internal_has_semi_persistent_sched_interval_dl() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_sps_config::has_semi_persistent_sched_interval_dl() const {
  return _internal_has_semi_persistent_sched_interval_dl();
}
inline void flex_sps_config::clear_semi_persistent_sched_interval_dl() {
  semi_persistent_sched_interval_dl_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::_internal_semi_persistent_sched_interval_dl() const {
  return semi_persistent_sched_interval_dl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::semi_persistent_sched_interval_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.semi_persistent_sched_interval_DL)
  return _internal_semi_persistent_sched_interval_dl();
}
inline void flex_sps_config::_internal_set_semi_persistent_sched_interval_dl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  semi_persistent_sched_interval_dl_ = value;
}
inline void flex_sps_config::set_semi_persistent_sched_interval_dl(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_semi_persistent_sched_interval_dl(value);
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.semi_persistent_sched_interval_DL)
}

// optional uint32 num_of_conf_sps_proc = 3;
inline bool flex_sps_config::_internal_has_num_of_conf_sps_proc() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_sps_config::has_num_of_conf_sps_proc() const {
  return _internal_has_num_of_conf_sps_proc();
}
inline void flex_sps_config::clear_num_of_conf_sps_proc() {
  num_of_conf_sps_proc_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::_internal_num_of_conf_sps_proc() const {
  return num_of_conf_sps_proc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::num_of_conf_sps_proc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.num_of_conf_sps_proc)
  return _internal_num_of_conf_sps_proc();
}
inline void flex_sps_config::_internal_set_num_of_conf_sps_proc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  num_of_conf_sps_proc_ = value;
}
inline void flex_sps_config::set_num_of_conf_sps_proc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_num_of_conf_sps_proc(value);
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.num_of_conf_sps_proc)
}

// repeated uint32 n1_PUCCH_AN_persistent_element = 4;
inline int flex_sps_config::_internal_n1_pucch_an_persistent_element_size() const {
  return n1_pucch_an_persistent_element_.size();
}
inline int flex_sps_config::n1_pucch_an_persistent_element_size() const {
  return _internal_n1_pucch_an_persistent_element_size();
}
inline void flex_sps_config::clear_n1_pucch_an_persistent_element() {
  n1_pucch_an_persistent_element_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::_internal_n1_pucch_an_persistent_element(int index) const {
  return n1_pucch_an_persistent_element_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::n1_pucch_an_persistent_element(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
  return _internal_n1_pucch_an_persistent_element(index);
}
inline void flex_sps_config::set_n1_pucch_an_persistent_element(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n1_pucch_an_persistent_element_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
}
inline void flex_sps_config::_internal_add_n1_pucch_an_persistent_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  n1_pucch_an_persistent_element_.Add(value);
}
inline void flex_sps_config::add_n1_pucch_an_persistent_element(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_n1_pucch_an_persistent_element(value);
  // @@protoc_insertion_point(field_add:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_sps_config::_internal_n1_pucch_an_persistent_element() const {
  return n1_pucch_an_persistent_element_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_sps_config::n1_pucch_an_persistent_element() const {
  // @@protoc_insertion_point(field_list:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
  return _internal_n1_pucch_an_persistent_element();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_sps_config::_internal_mutable_n1_pucch_an_persistent_element() {
  return &n1_pucch_an_persistent_element_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_sps_config::mutable_n1_pucch_an_persistent_element() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_sps_config.n1_PUCCH_AN_persistent_element)
  return _internal_mutable_n1_pucch_an_persistent_element();
}

// optional uint32 implicit_release_after = 5;
inline bool flex_sps_config::_internal_has_implicit_release_after() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_sps_config::has_implicit_release_after() const {
  return _internal_has_implicit_release_after();
}
inline void flex_sps_config::clear_implicit_release_after() {
  implicit_release_after_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::_internal_implicit_release_after() const {
  return implicit_release_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sps_config::implicit_release_after() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sps_config.implicit_release_after)
  return _internal_implicit_release_after();
}
inline void flex_sps_config::_internal_set_implicit_release_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  implicit_release_after_ = value;
}
inline void flex_sps_config::set_implicit_release_after(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_implicit_release_after(value);
  // @@protoc_insertion_point(field_set:protocol.flex_sps_config.implicit_release_after)
}

// -------------------------------------------------------------------

// flex_sr_config

// optional uint32 sr_action = 1;
inline bool flex_sr_config::_internal_has_sr_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_sr_config::has_sr_action() const {
  return _internal_has_sr_action();
}
inline void flex_sr_config::clear_sr_action() {
  sr_action_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sr_config::_internal_sr_action() const {
  return sr_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sr_config::sr_action() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sr_config.sr_action)
  return _internal_sr_action();
}
inline void flex_sr_config::_internal_set_sr_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  sr_action_ = value;
}
inline void flex_sr_config::set_sr_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sr_action(value);
  // @@protoc_insertion_point(field_set:protocol.flex_sr_config.sr_action)
}

// optional uint32 sched_interval = 2;
inline bool flex_sr_config::_internal_has_sched_interval() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_sr_config::has_sched_interval() const {
  return _internal_has_sched_interval();
}
inline void flex_sr_config::clear_sched_interval() {
  sched_interval_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sr_config::_internal_sched_interval() const {
  return sched_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sr_config::sched_interval() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sr_config.sched_interval)
  return _internal_sched_interval();
}
inline void flex_sr_config::_internal_set_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sched_interval_ = value;
}
inline void flex_sr_config::set_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sched_interval(value);
  // @@protoc_insertion_point(field_set:protocol.flex_sr_config.sched_interval)
}

// optional uint32 dsr_trans_max = 3;
inline bool flex_sr_config::_internal_has_dsr_trans_max() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_sr_config::has_dsr_trans_max() const {
  return _internal_has_dsr_trans_max();
}
inline void flex_sr_config::clear_dsr_trans_max() {
  dsr_trans_max_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sr_config::_internal_dsr_trans_max() const {
  return dsr_trans_max_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_sr_config::dsr_trans_max() const {
  // @@protoc_insertion_point(field_get:protocol.flex_sr_config.dsr_trans_max)
  return _internal_dsr_trans_max();
}
inline void flex_sr_config::_internal_set_dsr_trans_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  dsr_trans_max_ = value;
}
inline void flex_sr_config::set_dsr_trans_max(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dsr_trans_max(value);
  // @@protoc_insertion_point(field_set:protocol.flex_sr_config.dsr_trans_max)
}

// -------------------------------------------------------------------

// flex_cqi_config

// optional uint32 cqi_action = 1;
inline bool flex_cqi_config::_internal_has_cqi_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_cqi_config::has_cqi_action() const {
  return _internal_has_cqi_action();
}
inline void flex_cqi_config::clear_cqi_action() {
  cqi_action_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cqi_config::_internal_cqi_action() const {
  return cqi_action_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cqi_config::cqi_action() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cqi_config.cqi_action)
  return _internal_cqi_action();
}
inline void flex_cqi_config::_internal_set_cqi_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  cqi_action_ = value;
}
inline void flex_cqi_config::set_cqi_action(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cqi_action(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cqi_config.cqi_action)
}

// optional uint32 cqi_sched_interval = 2;
inline bool flex_cqi_config::_internal_has_cqi_sched_interval() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_cqi_config::has_cqi_sched_interval() const {
  return _internal_has_cqi_sched_interval();
}
inline void flex_cqi_config::clear_cqi_sched_interval() {
  cqi_sched_interval_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cqi_config::_internal_cqi_sched_interval() const {
  return cqi_sched_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cqi_config::cqi_sched_interval() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cqi_config.cqi_sched_interval)
  return _internal_cqi_sched_interval();
}
inline void flex_cqi_config::_internal_set_cqi_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  cqi_sched_interval_ = value;
}
inline void flex_cqi_config::set_cqi_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cqi_sched_interval(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cqi_config.cqi_sched_interval)
}

// optional uint32 ri_sched_interval = 3;
inline bool flex_cqi_config::_internal_has_ri_sched_interval() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_cqi_config::has_ri_sched_interval() const {
  return _internal_has_ri_sched_interval();
}
inline void flex_cqi_config::clear_ri_sched_interval() {
  ri_sched_interval_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cqi_config::_internal_ri_sched_interval() const {
  return ri_sched_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cqi_config::ri_sched_interval() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cqi_config.ri_sched_interval)
  return _internal_ri_sched_interval();
}
inline void flex_cqi_config::_internal_set_ri_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ri_sched_interval_ = value;
}
inline void flex_cqi_config::set_ri_sched_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ri_sched_interval(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cqi_config.ri_sched_interval)
}

// -------------------------------------------------------------------

// flex_ue_capabilities

// optional uint32 half_duplex = 1;
inline bool flex_ue_capabilities::_internal_has_half_duplex() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_ue_capabilities::has_half_duplex() const {
  return _internal_has_half_duplex();
}
inline void flex_ue_capabilities::clear_half_duplex() {
  half_duplex_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::_internal_half_duplex() const {
  return half_duplex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::half_duplex() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.half_duplex)
  return _internal_half_duplex();
}
inline void flex_ue_capabilities::_internal_set_half_duplex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  half_duplex_ = value;
}
inline void flex_ue_capabilities::set_half_duplex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_half_duplex(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.half_duplex)
}

// optional uint32 intra_SF_hopping = 2;
inline bool flex_ue_capabilities::_internal_has_intra_sf_hopping() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_ue_capabilities::has_intra_sf_hopping() const {
  return _internal_has_intra_sf_hopping();
}
inline void flex_ue_capabilities::clear_intra_sf_hopping() {
  intra_sf_hopping_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::_internal_intra_sf_hopping() const {
  return intra_sf_hopping_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::intra_sf_hopping() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.intra_SF_hopping)
  return _internal_intra_sf_hopping();
}
inline void flex_ue_capabilities::_internal_set_intra_sf_hopping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  intra_sf_hopping_ = value;
}
inline void flex_ue_capabilities::set_intra_sf_hopping(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_intra_sf_hopping(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.intra_SF_hopping)
}

// optional uint32 type2_sb_1 = 3;
inline bool flex_ue_capabilities::_internal_has_type2_sb_1() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_ue_capabilities::has_type2_sb_1() const {
  return _internal_has_type2_sb_1();
}
inline void flex_ue_capabilities::clear_type2_sb_1() {
  type2_sb_1_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::_internal_type2_sb_1() const {
  return type2_sb_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::type2_sb_1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.type2_sb_1)
  return _internal_type2_sb_1();
}
inline void flex_ue_capabilities::_internal_set_type2_sb_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  type2_sb_1_ = value;
}
inline void flex_ue_capabilities::set_type2_sb_1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_type2_sb_1(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.type2_sb_1)
}

// optional uint32 ue_category = 4;
inline bool flex_ue_capabilities::_internal_has_ue_category() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_ue_capabilities::has_ue_category() const {
  return _internal_has_ue_category();
}
inline void flex_ue_capabilities::clear_ue_category() {
  ue_category_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::_internal_ue_category() const {
  return ue_category_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::ue_category() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.ue_category)
  return _internal_ue_category();
}
inline void flex_ue_capabilities::_internal_set_ue_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ue_category_ = value;
}
inline void flex_ue_capabilities::set_ue_category(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_category(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.ue_category)
}

// optional uint32 res_alloc_type1 = 5;
inline bool flex_ue_capabilities::_internal_has_res_alloc_type1() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_ue_capabilities::has_res_alloc_type1() const {
  return _internal_has_res_alloc_type1();
}
inline void flex_ue_capabilities::clear_res_alloc_type1() {
  res_alloc_type1_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::_internal_res_alloc_type1() const {
  return res_alloc_type1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_capabilities::res_alloc_type1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_capabilities.res_alloc_type1)
  return _internal_res_alloc_type1();
}
inline void flex_ue_capabilities::_internal_set_res_alloc_type1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  res_alloc_type1_ = value;
}
inline void flex_ue_capabilities::set_res_alloc_type1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_res_alloc_type1(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_capabilities.res_alloc_type1)
}

// -------------------------------------------------------------------

// flex_scell_config

// optional uint32 carrier_index = 1;
inline bool flex_scell_config::_internal_has_carrier_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_scell_config::has_carrier_index() const {
  return _internal_has_carrier_index();
}
inline void flex_scell_config::clear_carrier_index() {
  carrier_index_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::_internal_carrier_index() const {
  return carrier_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.carrier_index)
  return _internal_carrier_index();
}
inline void flex_scell_config::_internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  carrier_index_ = value;
}
inline void flex_scell_config::set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carrier_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.carrier_index)
}

// optional uint32 scell_index = 2;
inline bool flex_scell_config::_internal_has_scell_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_scell_config::has_scell_index() const {
  return _internal_has_scell_index();
}
inline void flex_scell_config::clear_scell_index() {
  scell_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::_internal_scell_index() const {
  return scell_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::scell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.scell_index)
  return _internal_scell_index();
}
inline void flex_scell_config::_internal_set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  scell_index_ = value;
}
inline void flex_scell_config::set_scell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scell_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.scell_index)
}

// optional uint32 use_ccs = 3;
inline bool flex_scell_config::_internal_has_use_ccs() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_scell_config::has_use_ccs() const {
  return _internal_has_use_ccs();
}
inline void flex_scell_config::clear_use_ccs() {
  use_ccs_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::_internal_use_ccs() const {
  return use_ccs_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::use_ccs() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.use_ccs)
  return _internal_use_ccs();
}
inline void flex_scell_config::_internal_set_use_ccs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  use_ccs_ = value;
}
inline void flex_scell_config::set_use_ccs(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_use_ccs(value);
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.use_ccs)
}

// optional uint32 sched_cell_index = 4;
inline bool flex_scell_config::_internal_has_sched_cell_index() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_scell_config::has_sched_cell_index() const {
  return _internal_has_sched_cell_index();
}
inline void flex_scell_config::clear_sched_cell_index() {
  sched_cell_index_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::_internal_sched_cell_index() const {
  return sched_cell_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::sched_cell_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.sched_cell_index)
  return _internal_sched_cell_index();
}
inline void flex_scell_config::_internal_set_sched_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  sched_cell_index_ = value;
}
inline void flex_scell_config::set_sched_cell_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sched_cell_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.sched_cell_index)
}

// optional uint32 pdsch_start = 5;
inline bool flex_scell_config::_internal_has_pdsch_start() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_scell_config::has_pdsch_start() const {
  return _internal_has_pdsch_start();
}
inline void flex_scell_config::clear_pdsch_start() {
  pdsch_start_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::_internal_pdsch_start() const {
  return pdsch_start_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_scell_config::pdsch_start() const {
  // @@protoc_insertion_point(field_get:protocol.flex_scell_config.pdsch_start)
  return _internal_pdsch_start();
}
inline void flex_scell_config::_internal_set_pdsch_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  pdsch_start_ = value;
}
inline void flex_scell_config::set_pdsch_start(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pdsch_start(value);
  // @@protoc_insertion_point(field_set:protocol.flex_scell_config.pdsch_start)
}

// -------------------------------------------------------------------

// flex_lc_config

// optional uint32 lcid = 1;
inline bool flex_lc_config::_internal_has_lcid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_lc_config::has_lcid() const {
  return _internal_has_lcid();
}
inline void flex_lc_config::clear_lcid() {
  lcid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::_internal_lcid() const {
  return lcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::lcid() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.lcid)
  return _internal_lcid();
}
inline void flex_lc_config::_internal_set_lcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  lcid_ = value;
}
inline void flex_lc_config::set_lcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lcid(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.lcid)
}

// optional uint32 lcg = 2;
inline bool flex_lc_config::_internal_has_lcg() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_lc_config::has_lcg() const {
  return _internal_has_lcg();
}
inline void flex_lc_config::clear_lcg() {
  lcg_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::_internal_lcg() const {
  return lcg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::lcg() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.lcg)
  return _internal_lcg();
}
inline void flex_lc_config::_internal_set_lcg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  lcg_ = value;
}
inline void flex_lc_config::set_lcg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lcg(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.lcg)
}

// optional uint32 direction = 3;
inline bool flex_lc_config::_internal_has_direction() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_lc_config::has_direction() const {
  return _internal_has_direction();
}
inline void flex_lc_config::clear_direction() {
  direction_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::direction() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.direction)
  return _internal_direction();
}
inline void flex_lc_config::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  direction_ = value;
}
inline void flex_lc_config::set_direction(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.direction)
}

// optional uint32 qos_bearer_type = 4;
inline bool flex_lc_config::_internal_has_qos_bearer_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_lc_config::has_qos_bearer_type() const {
  return _internal_has_qos_bearer_type();
}
inline void flex_lc_config::clear_qos_bearer_type() {
  qos_bearer_type_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::_internal_qos_bearer_type() const {
  return qos_bearer_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::qos_bearer_type() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.qos_bearer_type)
  return _internal_qos_bearer_type();
}
inline void flex_lc_config::_internal_set_qos_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  qos_bearer_type_ = value;
}
inline void flex_lc_config::set_qos_bearer_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qos_bearer_type(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.qos_bearer_type)
}

// optional uint32 qci = 5;
inline bool flex_lc_config::_internal_has_qci() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool flex_lc_config::has_qci() const {
  return _internal_has_qci();
}
inline void flex_lc_config::clear_qci() {
  qci_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::_internal_qci() const {
  return qci_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_config::qci() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.qci)
  return _internal_qci();
}
inline void flex_lc_config::_internal_set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  qci_ = value;
}
inline void flex_lc_config::set_qci(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_qci(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.qci)
}

// optional uint64 e_RAB_max_bitrate_UL = 6;
inline bool flex_lc_config::_internal_has_e_rab_max_bitrate_ul() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_lc_config::has_e_rab_max_bitrate_ul() const {
  return _internal_has_e_rab_max_bitrate_ul();
}
inline void flex_lc_config::clear_e_rab_max_bitrate_ul() {
  e_rab_max_bitrate_ul_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::_internal_e_rab_max_bitrate_ul() const {
  return e_rab_max_bitrate_ul_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::e_rab_max_bitrate_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_max_bitrate_UL)
  return _internal_e_rab_max_bitrate_ul();
}
inline void flex_lc_config::_internal_set_e_rab_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  e_rab_max_bitrate_ul_ = value;
}
inline void flex_lc_config::set_e_rab_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_e_rab_max_bitrate_ul(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_max_bitrate_UL)
}

// optional uint64 e_RAB_max_bitrate_DL = 7;
inline bool flex_lc_config::_internal_has_e_rab_max_bitrate_dl() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool flex_lc_config::has_e_rab_max_bitrate_dl() const {
  return _internal_has_e_rab_max_bitrate_dl();
}
inline void flex_lc_config::clear_e_rab_max_bitrate_dl() {
  e_rab_max_bitrate_dl_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::_internal_e_rab_max_bitrate_dl() const {
  return e_rab_max_bitrate_dl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::e_rab_max_bitrate_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_max_bitrate_DL)
  return _internal_e_rab_max_bitrate_dl();
}
inline void flex_lc_config::_internal_set_e_rab_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  e_rab_max_bitrate_dl_ = value;
}
inline void flex_lc_config::set_e_rab_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_e_rab_max_bitrate_dl(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_max_bitrate_DL)
}

// optional uint64 e_RAB_guaranteed_bitrate_UL = 8;
inline bool flex_lc_config::_internal_has_e_rab_guaranteed_bitrate_ul() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool flex_lc_config::has_e_rab_guaranteed_bitrate_ul() const {
  return _internal_has_e_rab_guaranteed_bitrate_ul();
}
inline void flex_lc_config::clear_e_rab_guaranteed_bitrate_ul() {
  e_rab_guaranteed_bitrate_ul_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::_internal_e_rab_guaranteed_bitrate_ul() const {
  return e_rab_guaranteed_bitrate_ul_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::e_rab_guaranteed_bitrate_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_UL)
  return _internal_e_rab_guaranteed_bitrate_ul();
}
inline void flex_lc_config::_internal_set_e_rab_guaranteed_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  e_rab_guaranteed_bitrate_ul_ = value;
}
inline void flex_lc_config::set_e_rab_guaranteed_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_e_rab_guaranteed_bitrate_ul(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_UL)
}

// optional uint64 e_RAB_guaranteed_bitrate_DL = 9;
inline bool flex_lc_config::_internal_has_e_rab_guaranteed_bitrate_dl() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool flex_lc_config::has_e_rab_guaranteed_bitrate_dl() const {
  return _internal_has_e_rab_guaranteed_bitrate_dl();
}
inline void flex_lc_config::clear_e_rab_guaranteed_bitrate_dl() {
  e_rab_guaranteed_bitrate_dl_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::_internal_e_rab_guaranteed_bitrate_dl() const {
  return e_rab_guaranteed_bitrate_dl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_lc_config::e_rab_guaranteed_bitrate_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_DL)
  return _internal_e_rab_guaranteed_bitrate_dl();
}
inline void flex_lc_config::_internal_set_e_rab_guaranteed_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  e_rab_guaranteed_bitrate_dl_ = value;
}
inline void flex_lc_config::set_e_rab_guaranteed_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_e_rab_guaranteed_bitrate_dl(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_config.e_RAB_guaranteed_bitrate_DL)
}

// -------------------------------------------------------------------

// flex_plmn

// optional uint32 mcc = 1;
inline bool flex_plmn::_internal_has_mcc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_plmn::has_mcc() const {
  return _internal_has_mcc();
}
inline void flex_plmn::clear_mcc() {
  mcc_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_plmn::_internal_mcc() const {
  return mcc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_plmn::mcc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_plmn.mcc)
  return _internal_mcc();
}
inline void flex_plmn::_internal_set_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  mcc_ = value;
}
inline void flex_plmn::set_mcc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mcc(value);
  // @@protoc_insertion_point(field_set:protocol.flex_plmn.mcc)
}

// optional uint32 mnc = 2;
inline bool flex_plmn::_internal_has_mnc() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_plmn::has_mnc() const {
  return _internal_has_mnc();
}
inline void flex_plmn::clear_mnc() {
  mnc_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_plmn::_internal_mnc() const {
  return mnc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_plmn::mnc() const {
  // @@protoc_insertion_point(field_get:protocol.flex_plmn.mnc)
  return _internal_mnc();
}
inline void flex_plmn::_internal_set_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mnc_ = value;
}
inline void flex_plmn::set_mnc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mnc(value);
  // @@protoc_insertion_point(field_set:protocol.flex_plmn.mnc)
}

// optional uint32 mnc_length = 3;
inline bool flex_plmn::_internal_has_mnc_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_plmn::has_mnc_length() const {
  return _internal_has_mnc_length();
}
inline void flex_plmn::clear_mnc_length() {
  mnc_length_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_plmn::_internal_mnc_length() const {
  return mnc_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_plmn::mnc_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_plmn.mnc_length)
  return _internal_mnc_length();
}
inline void flex_plmn::_internal_set_mnc_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mnc_length_ = value;
}
inline void flex_plmn::set_mnc_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mnc_length(value);
  // @@protoc_insertion_point(field_set:protocol.flex_plmn.mnc_length)
}

// -------------------------------------------------------------------

// flex_measurement_info

// optional int64 offset_freq_serving = 1;
inline bool flex_measurement_info::_internal_has_offset_freq_serving() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_measurement_info::has_offset_freq_serving() const {
  return _internal_has_offset_freq_serving();
}
inline void flex_measurement_info::clear_offset_freq_serving() {
  offset_freq_serving_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::_internal_offset_freq_serving() const {
  return offset_freq_serving_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::offset_freq_serving() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.offset_freq_serving)
  return _internal_offset_freq_serving();
}
inline void flex_measurement_info::_internal_set_offset_freq_serving(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  offset_freq_serving_ = value;
}
inline void flex_measurement_info::set_offset_freq_serving(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_freq_serving(value);
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.offset_freq_serving)
}

// optional int64 offset_freq_neighbouring = 2;
inline bool flex_measurement_info::_internal_has_offset_freq_neighbouring() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_measurement_info::has_offset_freq_neighbouring() const {
  return _internal_has_offset_freq_neighbouring();
}
inline void flex_measurement_info::clear_offset_freq_neighbouring() {
  offset_freq_neighbouring_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::_internal_offset_freq_neighbouring() const {
  return offset_freq_neighbouring_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::offset_freq_neighbouring() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.offset_freq_neighbouring)
  return _internal_offset_freq_neighbouring();
}
inline void flex_measurement_info::_internal_set_offset_freq_neighbouring(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  offset_freq_neighbouring_ = value;
}
inline void flex_measurement_info::set_offset_freq_neighbouring(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offset_freq_neighbouring(value);
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.offset_freq_neighbouring)
}

// repeated int64 cell_individual_offset = 3;
inline int flex_measurement_info::_internal_cell_individual_offset_size() const {
  return cell_individual_offset_.size();
}
inline int flex_measurement_info::cell_individual_offset_size() const {
  return _internal_cell_individual_offset_size();
}
inline void flex_measurement_info::clear_cell_individual_offset() {
  cell_individual_offset_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::_internal_cell_individual_offset(int index) const {
  return cell_individual_offset_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::cell_individual_offset(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.cell_individual_offset)
  return _internal_cell_individual_offset(index);
}
inline void flex_measurement_info::set_cell_individual_offset(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  cell_individual_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.cell_individual_offset)
}
inline void flex_measurement_info::_internal_add_cell_individual_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  cell_individual_offset_.Add(value);
}
inline void flex_measurement_info::add_cell_individual_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_cell_individual_offset(value);
  // @@protoc_insertion_point(field_add:protocol.flex_measurement_info.cell_individual_offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
flex_measurement_info::_internal_cell_individual_offset() const {
  return cell_individual_offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
flex_measurement_info::cell_individual_offset() const {
  // @@protoc_insertion_point(field_list:protocol.flex_measurement_info.cell_individual_offset)
  return _internal_cell_individual_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
flex_measurement_info::_internal_mutable_cell_individual_offset() {
  return &cell_individual_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
flex_measurement_info::mutable_cell_individual_offset() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_measurement_info.cell_individual_offset)
  return _internal_mutable_cell_individual_offset();
}

// optional int64 filter_coefficient_rsrp = 4;
inline bool flex_measurement_info::_internal_has_filter_coefficient_rsrp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_measurement_info::has_filter_coefficient_rsrp() const {
  return _internal_has_filter_coefficient_rsrp();
}
inline void flex_measurement_info::clear_filter_coefficient_rsrp() {
  filter_coefficient_rsrp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::_internal_filter_coefficient_rsrp() const {
  return filter_coefficient_rsrp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::filter_coefficient_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.filter_coefficient_rsrp)
  return _internal_filter_coefficient_rsrp();
}
inline void flex_measurement_info::_internal_set_filter_coefficient_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  filter_coefficient_rsrp_ = value;
}
inline void flex_measurement_info::set_filter_coefficient_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filter_coefficient_rsrp(value);
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.filter_coefficient_rsrp)
}

// optional int64 filter_coefficient_rsrq = 5;
inline bool flex_measurement_info::_internal_has_filter_coefficient_rsrq() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_measurement_info::has_filter_coefficient_rsrq() const {
  return _internal_has_filter_coefficient_rsrq();
}
inline void flex_measurement_info::clear_filter_coefficient_rsrq() {
  filter_coefficient_rsrq_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::_internal_filter_coefficient_rsrq() const {
  return filter_coefficient_rsrq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_measurement_info::filter_coefficient_rsrq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.filter_coefficient_rsrq)
  return _internal_filter_coefficient_rsrq();
}
inline void flex_measurement_info::_internal_set_filter_coefficient_rsrq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  filter_coefficient_rsrq_ = value;
}
inline void flex_measurement_info::set_filter_coefficient_rsrq(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filter_coefficient_rsrq(value);
  // @@protoc_insertion_point(field_set:protocol.flex_measurement_info.filter_coefficient_rsrq)
}

// optional .protocol.flex_measurement_event event = 6;
inline bool flex_measurement_info::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || event_ != nullptr);
  return value;
}
inline bool flex_measurement_info::has_event() const {
  return _internal_has_event();
}
inline void flex_measurement_info::clear_event() {
  if (event_ != nullptr) event_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::flex_measurement_event& flex_measurement_info::_internal_event() const {
  const ::protocol::flex_measurement_event* p = event_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_measurement_event*>(
      &::protocol::_flex_measurement_event_default_instance_);
}
inline const ::protocol::flex_measurement_event& flex_measurement_info::event() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_info.event)
  return _internal_event();
}
inline void flex_measurement_info::unsafe_arena_set_allocated_event(
    ::protocol::flex_measurement_event* event) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_measurement_info.event)
}
inline ::protocol::flex_measurement_event* flex_measurement_info::release_event() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_measurement_event* temp = event_;
  event_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_measurement_event* flex_measurement_info::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_info.event)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_measurement_event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::protocol::flex_measurement_event* flex_measurement_info::_internal_mutable_event() {
  _has_bits_[0] |= 0x00000001u;
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_measurement_event>(GetArena());
    event_ = p;
  }
  return event_;
}
inline ::protocol::flex_measurement_event* flex_measurement_info::mutable_event() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_info.event)
  return _internal_mutable_event();
}
inline void flex_measurement_info::set_allocated_event(::protocol::flex_measurement_event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_info.event)
}

// -------------------------------------------------------------------

// flex_measurement_event

// optional .protocol.flex_per_event periodical = 1;
inline bool flex_measurement_event::_internal_has_periodical() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || periodical_ != nullptr);
  return value;
}
inline bool flex_measurement_event::has_periodical() const {
  return _internal_has_periodical();
}
inline void flex_measurement_event::clear_periodical() {
  if (periodical_ != nullptr) periodical_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::flex_per_event& flex_measurement_event::_internal_periodical() const {
  const ::protocol::flex_per_event* p = periodical_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_per_event*>(
      &::protocol::_flex_per_event_default_instance_);
}
inline const ::protocol::flex_per_event& flex_measurement_event::periodical() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.periodical)
  return _internal_periodical();
}
inline void flex_measurement_event::unsafe_arena_set_allocated_periodical(
    ::protocol::flex_per_event* periodical) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(periodical_);
  }
  periodical_ = periodical;
  if (periodical) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_measurement_event.periodical)
}
inline ::protocol::flex_per_event* flex_measurement_event::release_periodical() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_per_event* temp = periodical_;
  periodical_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_per_event* flex_measurement_event::unsafe_arena_release_periodical() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.periodical)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_per_event* temp = periodical_;
  periodical_ = nullptr;
  return temp;
}
inline ::protocol::flex_per_event* flex_measurement_event::_internal_mutable_periodical() {
  _has_bits_[0] |= 0x00000001u;
  if (periodical_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_per_event>(GetArena());
    periodical_ = p;
  }
  return periodical_;
}
inline ::protocol::flex_per_event* flex_measurement_event::mutable_periodical() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.periodical)
  return _internal_mutable_periodical();
}
inline void flex_measurement_event::set_allocated_periodical(::protocol::flex_per_event* periodical) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete periodical_;
  }
  if (periodical) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(periodical);
    if (message_arena != submessage_arena) {
      periodical = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, periodical, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  periodical_ = periodical;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.periodical)
}

// optional .protocol.flex_a1_event a1 = 2;
inline bool flex_measurement_event::_internal_has_a1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || a1_ != nullptr);
  return value;
}
inline bool flex_measurement_event::has_a1() const {
  return _internal_has_a1();
}
inline void flex_measurement_event::clear_a1() {
  if (a1_ != nullptr) a1_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protocol::flex_a1_event& flex_measurement_event::_internal_a1() const {
  const ::protocol::flex_a1_event* p = a1_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_a1_event*>(
      &::protocol::_flex_a1_event_default_instance_);
}
inline const ::protocol::flex_a1_event& flex_measurement_event::a1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a1)
  return _internal_a1();
}
inline void flex_measurement_event::unsafe_arena_set_allocated_a1(
    ::protocol::flex_a1_event* a1) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a1_);
  }
  a1_ = a1;
  if (a1) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_measurement_event.a1)
}
inline ::protocol::flex_a1_event* flex_measurement_event::release_a1() {
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_a1_event* temp = a1_;
  a1_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_a1_event* flex_measurement_event::unsafe_arena_release_a1() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a1)
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_a1_event* temp = a1_;
  a1_ = nullptr;
  return temp;
}
inline ::protocol::flex_a1_event* flex_measurement_event::_internal_mutable_a1() {
  _has_bits_[0] |= 0x00000002u;
  if (a1_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_a1_event>(GetArena());
    a1_ = p;
  }
  return a1_;
}
inline ::protocol::flex_a1_event* flex_measurement_event::mutable_a1() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a1)
  return _internal_mutable_a1();
}
inline void flex_measurement_event::set_allocated_a1(::protocol::flex_a1_event* a1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a1_;
  }
  if (a1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a1);
    if (message_arena != submessage_arena) {
      a1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a1, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  a1_ = a1;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a1)
}

// optional .protocol.flex_a2_event a2 = 3;
inline bool flex_measurement_event::_internal_has_a2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || a2_ != nullptr);
  return value;
}
inline bool flex_measurement_event::has_a2() const {
  return _internal_has_a2();
}
inline void flex_measurement_event::clear_a2() {
  if (a2_ != nullptr) a2_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::protocol::flex_a2_event& flex_measurement_event::_internal_a2() const {
  const ::protocol::flex_a2_event* p = a2_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_a2_event*>(
      &::protocol::_flex_a2_event_default_instance_);
}
inline const ::protocol::flex_a2_event& flex_measurement_event::a2() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a2)
  return _internal_a2();
}
inline void flex_measurement_event::unsafe_arena_set_allocated_a2(
    ::protocol::flex_a2_event* a2) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a2_);
  }
  a2_ = a2;
  if (a2) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_measurement_event.a2)
}
inline ::protocol::flex_a2_event* flex_measurement_event::release_a2() {
  _has_bits_[0] &= ~0x00000004u;
  ::protocol::flex_a2_event* temp = a2_;
  a2_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_a2_event* flex_measurement_event::unsafe_arena_release_a2() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a2)
  _has_bits_[0] &= ~0x00000004u;
  ::protocol::flex_a2_event* temp = a2_;
  a2_ = nullptr;
  return temp;
}
inline ::protocol::flex_a2_event* flex_measurement_event::_internal_mutable_a2() {
  _has_bits_[0] |= 0x00000004u;
  if (a2_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_a2_event>(GetArena());
    a2_ = p;
  }
  return a2_;
}
inline ::protocol::flex_a2_event* flex_measurement_event::mutable_a2() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a2)
  return _internal_mutable_a2();
}
inline void flex_measurement_event::set_allocated_a2(::protocol::flex_a2_event* a2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a2_;
  }
  if (a2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a2);
    if (message_arena != submessage_arena) {
      a2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a2, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  a2_ = a2;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a2)
}

// optional .protocol.flex_a3_event a3 = 4;
inline bool flex_measurement_event::_internal_has_a3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || a3_ != nullptr);
  return value;
}
inline bool flex_measurement_event::has_a3() const {
  return _internal_has_a3();
}
inline void flex_measurement_event::clear_a3() {
  if (a3_ != nullptr) a3_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::protocol::flex_a3_event& flex_measurement_event::_internal_a3() const {
  const ::protocol::flex_a3_event* p = a3_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_a3_event*>(
      &::protocol::_flex_a3_event_default_instance_);
}
inline const ::protocol::flex_a3_event& flex_measurement_event::a3() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a3)
  return _internal_a3();
}
inline void flex_measurement_event::unsafe_arena_set_allocated_a3(
    ::protocol::flex_a3_event* a3) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a3_);
  }
  a3_ = a3;
  if (a3) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_measurement_event.a3)
}
inline ::protocol::flex_a3_event* flex_measurement_event::release_a3() {
  _has_bits_[0] &= ~0x00000008u;
  ::protocol::flex_a3_event* temp = a3_;
  a3_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_a3_event* flex_measurement_event::unsafe_arena_release_a3() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a3)
  _has_bits_[0] &= ~0x00000008u;
  ::protocol::flex_a3_event* temp = a3_;
  a3_ = nullptr;
  return temp;
}
inline ::protocol::flex_a3_event* flex_measurement_event::_internal_mutable_a3() {
  _has_bits_[0] |= 0x00000008u;
  if (a3_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_a3_event>(GetArena());
    a3_ = p;
  }
  return a3_;
}
inline ::protocol::flex_a3_event* flex_measurement_event::mutable_a3() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a3)
  return _internal_mutable_a3();
}
inline void flex_measurement_event::set_allocated_a3(::protocol::flex_a3_event* a3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a3_;
  }
  if (a3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a3);
    if (message_arena != submessage_arena) {
      a3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a3, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  a3_ = a3;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a3)
}

// optional .protocol.flex_a4_event a4 = 5;
inline bool flex_measurement_event::_internal_has_a4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || a4_ != nullptr);
  return value;
}
inline bool flex_measurement_event::has_a4() const {
  return _internal_has_a4();
}
inline void flex_measurement_event::clear_a4() {
  if (a4_ != nullptr) a4_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::protocol::flex_a4_event& flex_measurement_event::_internal_a4() const {
  const ::protocol::flex_a4_event* p = a4_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_a4_event*>(
      &::protocol::_flex_a4_event_default_instance_);
}
inline const ::protocol::flex_a4_event& flex_measurement_event::a4() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a4)
  return _internal_a4();
}
inline void flex_measurement_event::unsafe_arena_set_allocated_a4(
    ::protocol::flex_a4_event* a4) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a4_);
  }
  a4_ = a4;
  if (a4) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_measurement_event.a4)
}
inline ::protocol::flex_a4_event* flex_measurement_event::release_a4() {
  _has_bits_[0] &= ~0x00000010u;
  ::protocol::flex_a4_event* temp = a4_;
  a4_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_a4_event* flex_measurement_event::unsafe_arena_release_a4() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a4)
  _has_bits_[0] &= ~0x00000010u;
  ::protocol::flex_a4_event* temp = a4_;
  a4_ = nullptr;
  return temp;
}
inline ::protocol::flex_a4_event* flex_measurement_event::_internal_mutable_a4() {
  _has_bits_[0] |= 0x00000010u;
  if (a4_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_a4_event>(GetArena());
    a4_ = p;
  }
  return a4_;
}
inline ::protocol::flex_a4_event* flex_measurement_event::mutable_a4() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a4)
  return _internal_mutable_a4();
}
inline void flex_measurement_event::set_allocated_a4(::protocol::flex_a4_event* a4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a4_;
  }
  if (a4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a4);
    if (message_arena != submessage_arena) {
      a4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a4, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  a4_ = a4;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a4)
}

// optional .protocol.flex_a5_event a5 = 6;
inline bool flex_measurement_event::_internal_has_a5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || a5_ != nullptr);
  return value;
}
inline bool flex_measurement_event::has_a5() const {
  return _internal_has_a5();
}
inline void flex_measurement_event::clear_a5() {
  if (a5_ != nullptr) a5_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::protocol::flex_a5_event& flex_measurement_event::_internal_a5() const {
  const ::protocol::flex_a5_event* p = a5_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_a5_event*>(
      &::protocol::_flex_a5_event_default_instance_);
}
inline const ::protocol::flex_a5_event& flex_measurement_event::a5() const {
  // @@protoc_insertion_point(field_get:protocol.flex_measurement_event.a5)
  return _internal_a5();
}
inline void flex_measurement_event::unsafe_arena_set_allocated_a5(
    ::protocol::flex_a5_event* a5) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(a5_);
  }
  a5_ = a5;
  if (a5) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_measurement_event.a5)
}
inline ::protocol::flex_a5_event* flex_measurement_event::release_a5() {
  _has_bits_[0] &= ~0x00000020u;
  ::protocol::flex_a5_event* temp = a5_;
  a5_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_a5_event* flex_measurement_event::unsafe_arena_release_a5() {
  // @@protoc_insertion_point(field_release:protocol.flex_measurement_event.a5)
  _has_bits_[0] &= ~0x00000020u;
  ::protocol::flex_a5_event* temp = a5_;
  a5_ = nullptr;
  return temp;
}
inline ::protocol::flex_a5_event* flex_measurement_event::_internal_mutable_a5() {
  _has_bits_[0] |= 0x00000020u;
  if (a5_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_a5_event>(GetArena());
    a5_ = p;
  }
  return a5_;
}
inline ::protocol::flex_a5_event* flex_measurement_event::mutable_a5() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_measurement_event.a5)
  return _internal_mutable_a5();
}
inline void flex_measurement_event::set_allocated_a5(::protocol::flex_a5_event* a5) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete a5_;
  }
  if (a5) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(a5);
    if (message_arena != submessage_arena) {
      a5 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, a5, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  a5_ = a5;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_measurement_event.a5)
}

// -------------------------------------------------------------------

// flex_per_event

// optional int64 max_report_cells = 1;
inline bool flex_per_event::_internal_has_max_report_cells() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_per_event::has_max_report_cells() const {
  return _internal_has_max_report_cells();
}
inline void flex_per_event::clear_max_report_cells() {
  max_report_cells_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_per_event::_internal_max_report_cells() const {
  return max_report_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_per_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_per_event.max_report_cells)
  return _internal_max_report_cells();
}
inline void flex_per_event::_internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  max_report_cells_ = value;
}
inline void flex_per_event::set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_report_cells(value);
  // @@protoc_insertion_point(field_set:protocol.flex_per_event.max_report_cells)
}

// -------------------------------------------------------------------

// flex_a1_event

// optional int64 threshold_rsrp = 1;
inline bool flex_a1_event::_internal_has_threshold_rsrp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_a1_event::has_threshold_rsrp() const {
  return _internal_has_threshold_rsrp();
}
inline void flex_a1_event::clear_threshold_rsrp() {
  threshold_rsrp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::_internal_threshold_rsrp() const {
  return threshold_rsrp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::threshold_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.threshold_rsrp)
  return _internal_threshold_rsrp();
}
inline void flex_a1_event::_internal_set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  threshold_rsrp_ = value;
}
inline void flex_a1_event::set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_threshold_rsrp(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.threshold_rsrp)
}

// optional int64 hysteresis = 2;
inline bool flex_a1_event::_internal_has_hysteresis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_a1_event::has_hysteresis() const {
  return _internal_has_hysteresis();
}
inline void flex_a1_event::clear_hysteresis() {
  hysteresis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::_internal_hysteresis() const {
  return hysteresis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.hysteresis)
  return _internal_hysteresis();
}
inline void flex_a1_event::_internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  hysteresis_ = value;
}
inline void flex_a1_event::set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.hysteresis)
}

// optional int64 time_to_trigger = 3;
inline bool flex_a1_event::_internal_has_time_to_trigger() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_a1_event::has_time_to_trigger() const {
  return _internal_has_time_to_trigger();
}
inline void flex_a1_event::clear_time_to_trigger() {
  time_to_trigger_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::_internal_time_to_trigger() const {
  return time_to_trigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.time_to_trigger)
  return _internal_time_to_trigger();
}
inline void flex_a1_event::_internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_to_trigger_ = value;
}
inline void flex_a1_event::set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_to_trigger(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.time_to_trigger)
}

// optional int64 max_report_cells = 4;
inline bool flex_a1_event::_internal_has_max_report_cells() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_a1_event::has_max_report_cells() const {
  return _internal_has_max_report_cells();
}
inline void flex_a1_event::clear_max_report_cells() {
  max_report_cells_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::_internal_max_report_cells() const {
  return max_report_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a1_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a1_event.max_report_cells)
  return _internal_max_report_cells();
}
inline void flex_a1_event::_internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  max_report_cells_ = value;
}
inline void flex_a1_event::set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_report_cells(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a1_event.max_report_cells)
}

// -------------------------------------------------------------------

// flex_a2_event

// optional int64 threshold_rsrp = 1;
inline bool flex_a2_event::_internal_has_threshold_rsrp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_a2_event::has_threshold_rsrp() const {
  return _internal_has_threshold_rsrp();
}
inline void flex_a2_event::clear_threshold_rsrp() {
  threshold_rsrp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::_internal_threshold_rsrp() const {
  return threshold_rsrp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::threshold_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.threshold_rsrp)
  return _internal_threshold_rsrp();
}
inline void flex_a2_event::_internal_set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  threshold_rsrp_ = value;
}
inline void flex_a2_event::set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_threshold_rsrp(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.threshold_rsrp)
}

// optional int64 hysteresis = 2;
inline bool flex_a2_event::_internal_has_hysteresis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_a2_event::has_hysteresis() const {
  return _internal_has_hysteresis();
}
inline void flex_a2_event::clear_hysteresis() {
  hysteresis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::_internal_hysteresis() const {
  return hysteresis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.hysteresis)
  return _internal_hysteresis();
}
inline void flex_a2_event::_internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  hysteresis_ = value;
}
inline void flex_a2_event::set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.hysteresis)
}

// optional int64 time_to_trigger = 3;
inline bool flex_a2_event::_internal_has_time_to_trigger() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_a2_event::has_time_to_trigger() const {
  return _internal_has_time_to_trigger();
}
inline void flex_a2_event::clear_time_to_trigger() {
  time_to_trigger_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::_internal_time_to_trigger() const {
  return time_to_trigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.time_to_trigger)
  return _internal_time_to_trigger();
}
inline void flex_a2_event::_internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_to_trigger_ = value;
}
inline void flex_a2_event::set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_to_trigger(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.time_to_trigger)
}

// optional int64 max_report_cells = 4;
inline bool flex_a2_event::_internal_has_max_report_cells() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_a2_event::has_max_report_cells() const {
  return _internal_has_max_report_cells();
}
inline void flex_a2_event::clear_max_report_cells() {
  max_report_cells_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::_internal_max_report_cells() const {
  return max_report_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a2_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a2_event.max_report_cells)
  return _internal_max_report_cells();
}
inline void flex_a2_event::_internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  max_report_cells_ = value;
}
inline void flex_a2_event::set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_report_cells(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a2_event.max_report_cells)
}

// -------------------------------------------------------------------

// flex_a3_event

// optional int64 a3_offset = 1;
inline bool flex_a3_event::_internal_has_a3_offset() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_a3_event::has_a3_offset() const {
  return _internal_has_a3_offset();
}
inline void flex_a3_event::clear_a3_offset() {
  a3_offset_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::_internal_a3_offset() const {
  return a3_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::a3_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.a3_offset)
  return _internal_a3_offset();
}
inline void flex_a3_event::_internal_set_a3_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  a3_offset_ = value;
}
inline void flex_a3_event::set_a3_offset(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_a3_offset(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.a3_offset)
}

// optional int32 report_on_leave = 2;
inline bool flex_a3_event::_internal_has_report_on_leave() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_a3_event::has_report_on_leave() const {
  return _internal_has_report_on_leave();
}
inline void flex_a3_event::clear_report_on_leave() {
  report_on_leave_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 flex_a3_event::_internal_report_on_leave() const {
  return report_on_leave_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 flex_a3_event::report_on_leave() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.report_on_leave)
  return _internal_report_on_leave();
}
inline void flex_a3_event::_internal_set_report_on_leave(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  report_on_leave_ = value;
}
inline void flex_a3_event::set_report_on_leave(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_report_on_leave(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.report_on_leave)
}

// optional int64 hysteresis = 3;
inline bool flex_a3_event::_internal_has_hysteresis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_a3_event::has_hysteresis() const {
  return _internal_has_hysteresis();
}
inline void flex_a3_event::clear_hysteresis() {
  hysteresis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::_internal_hysteresis() const {
  return hysteresis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.hysteresis)
  return _internal_hysteresis();
}
inline void flex_a3_event::_internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  hysteresis_ = value;
}
inline void flex_a3_event::set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.hysteresis)
}

// optional int64 time_to_trigger = 4;
inline bool flex_a3_event::_internal_has_time_to_trigger() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_a3_event::has_time_to_trigger() const {
  return _internal_has_time_to_trigger();
}
inline void flex_a3_event::clear_time_to_trigger() {
  time_to_trigger_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::_internal_time_to_trigger() const {
  return time_to_trigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.time_to_trigger)
  return _internal_time_to_trigger();
}
inline void flex_a3_event::_internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_to_trigger_ = value;
}
inline void flex_a3_event::set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_to_trigger(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.time_to_trigger)
}

// optional int64 max_report_cells = 5;
inline bool flex_a3_event::_internal_has_max_report_cells() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_a3_event::has_max_report_cells() const {
  return _internal_has_max_report_cells();
}
inline void flex_a3_event::clear_max_report_cells() {
  max_report_cells_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::_internal_max_report_cells() const {
  return max_report_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a3_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a3_event.max_report_cells)
  return _internal_max_report_cells();
}
inline void flex_a3_event::_internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  max_report_cells_ = value;
}
inline void flex_a3_event::set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_report_cells(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a3_event.max_report_cells)
}

// -------------------------------------------------------------------

// flex_a4_event

// optional int64 threshold_rsrp = 1;
inline bool flex_a4_event::_internal_has_threshold_rsrp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_a4_event::has_threshold_rsrp() const {
  return _internal_has_threshold_rsrp();
}
inline void flex_a4_event::clear_threshold_rsrp() {
  threshold_rsrp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::_internal_threshold_rsrp() const {
  return threshold_rsrp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::threshold_rsrp() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.threshold_rsrp)
  return _internal_threshold_rsrp();
}
inline void flex_a4_event::_internal_set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  threshold_rsrp_ = value;
}
inline void flex_a4_event::set_threshold_rsrp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_threshold_rsrp(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.threshold_rsrp)
}

// optional int64 hysteresis = 2;
inline bool flex_a4_event::_internal_has_hysteresis() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_a4_event::has_hysteresis() const {
  return _internal_has_hysteresis();
}
inline void flex_a4_event::clear_hysteresis() {
  hysteresis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::_internal_hysteresis() const {
  return hysteresis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.hysteresis)
  return _internal_hysteresis();
}
inline void flex_a4_event::_internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  hysteresis_ = value;
}
inline void flex_a4_event::set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.hysteresis)
}

// optional int64 time_to_trigger = 3;
inline bool flex_a4_event::_internal_has_time_to_trigger() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_a4_event::has_time_to_trigger() const {
  return _internal_has_time_to_trigger();
}
inline void flex_a4_event::clear_time_to_trigger() {
  time_to_trigger_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::_internal_time_to_trigger() const {
  return time_to_trigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.time_to_trigger)
  return _internal_time_to_trigger();
}
inline void flex_a4_event::_internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_to_trigger_ = value;
}
inline void flex_a4_event::set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_to_trigger(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.time_to_trigger)
}

// optional int64 max_report_cells = 4;
inline bool flex_a4_event::_internal_has_max_report_cells() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_a4_event::has_max_report_cells() const {
  return _internal_has_max_report_cells();
}
inline void flex_a4_event::clear_max_report_cells() {
  max_report_cells_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::_internal_max_report_cells() const {
  return max_report_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a4_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a4_event.max_report_cells)
  return _internal_max_report_cells();
}
inline void flex_a4_event::_internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  max_report_cells_ = value;
}
inline void flex_a4_event::set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_report_cells(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a4_event.max_report_cells)
}

// -------------------------------------------------------------------

// flex_a5_event

// optional int64 threshold_rsrp_1 = 1;
inline bool flex_a5_event::_internal_has_threshold_rsrp_1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_a5_event::has_threshold_rsrp_1() const {
  return _internal_has_threshold_rsrp_1();
}
inline void flex_a5_event::clear_threshold_rsrp_1() {
  threshold_rsrp_1_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::_internal_threshold_rsrp_1() const {
  return threshold_rsrp_1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::threshold_rsrp_1() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.threshold_rsrp_1)
  return _internal_threshold_rsrp_1();
}
inline void flex_a5_event::_internal_set_threshold_rsrp_1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  threshold_rsrp_1_ = value;
}
inline void flex_a5_event::set_threshold_rsrp_1(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_threshold_rsrp_1(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.threshold_rsrp_1)
}

// optional int64 threshold_rsrp_2 = 2;
inline bool flex_a5_event::_internal_has_threshold_rsrp_2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_a5_event::has_threshold_rsrp_2() const {
  return _internal_has_threshold_rsrp_2();
}
inline void flex_a5_event::clear_threshold_rsrp_2() {
  threshold_rsrp_2_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::_internal_threshold_rsrp_2() const {
  return threshold_rsrp_2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::threshold_rsrp_2() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.threshold_rsrp_2)
  return _internal_threshold_rsrp_2();
}
inline void flex_a5_event::_internal_set_threshold_rsrp_2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  threshold_rsrp_2_ = value;
}
inline void flex_a5_event::set_threshold_rsrp_2(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_threshold_rsrp_2(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.threshold_rsrp_2)
}

// optional int64 hysteresis = 3;
inline bool flex_a5_event::_internal_has_hysteresis() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_a5_event::has_hysteresis() const {
  return _internal_has_hysteresis();
}
inline void flex_a5_event::clear_hysteresis() {
  hysteresis_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::_internal_hysteresis() const {
  return hysteresis_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::hysteresis() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.hysteresis)
  return _internal_hysteresis();
}
inline void flex_a5_event::_internal_set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  hysteresis_ = value;
}
inline void flex_a5_event::set_hysteresis(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.hysteresis)
}

// optional int64 time_to_trigger = 4;
inline bool flex_a5_event::_internal_has_time_to_trigger() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_a5_event::has_time_to_trigger() const {
  return _internal_has_time_to_trigger();
}
inline void flex_a5_event::clear_time_to_trigger() {
  time_to_trigger_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::_internal_time_to_trigger() const {
  return time_to_trigger_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.time_to_trigger)
  return _internal_time_to_trigger();
}
inline void flex_a5_event::_internal_set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_to_trigger_ = value;
}
inline void flex_a5_event::set_time_to_trigger(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time_to_trigger(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.time_to_trigger)
}

// optional int64 max_report_cells = 5;
inline bool flex_a5_event::_internal_has_max_report_cells() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_a5_event::has_max_report_cells() const {
  return _internal_has_max_report_cells();
}
inline void flex_a5_event::clear_max_report_cells() {
  max_report_cells_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::_internal_max_report_cells() const {
  return max_report_cells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 flex_a5_event::max_report_cells() const {
  // @@protoc_insertion_point(field_get:protocol.flex_a5_event.max_report_cells)
  return _internal_max_report_cells();
}
inline void flex_a5_event::_internal_set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  max_report_cells_ = value;
}
inline void flex_a5_event::set_max_report_cells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_max_report_cells(value);
  // @@protoc_insertion_point(field_set:protocol.flex_a5_event.max_report_cells)
}

// -------------------------------------------------------------------

// flex_gummei

// optional .protocol.flex_plmn plmn = 1;
inline bool flex_gummei::_internal_has_plmn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || plmn_ != nullptr);
  return value;
}
inline bool flex_gummei::has_plmn() const {
  return _internal_has_plmn();
}
inline void flex_gummei::clear_plmn() {
  if (plmn_ != nullptr) plmn_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protocol::flex_plmn& flex_gummei::_internal_plmn() const {
  const ::protocol::flex_plmn* p = plmn_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_plmn*>(
      &::protocol::_flex_plmn_default_instance_);
}
inline const ::protocol::flex_plmn& flex_gummei::plmn() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gummei.plmn)
  return _internal_plmn();
}
inline void flex_gummei::unsafe_arena_set_allocated_plmn(
    ::protocol::flex_plmn* plmn) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plmn_);
  }
  plmn_ = plmn;
  if (plmn) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_gummei.plmn)
}
inline ::protocol::flex_plmn* flex_gummei::release_plmn() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_plmn* temp = plmn_;
  plmn_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_plmn* flex_gummei::unsafe_arena_release_plmn() {
  // @@protoc_insertion_point(field_release:protocol.flex_gummei.plmn)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_plmn* temp = plmn_;
  plmn_ = nullptr;
  return temp;
}
inline ::protocol::flex_plmn* flex_gummei::_internal_mutable_plmn() {
  _has_bits_[0] |= 0x00000001u;
  if (plmn_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_plmn>(GetArena());
    plmn_ = p;
  }
  return plmn_;
}
inline ::protocol::flex_plmn* flex_gummei::mutable_plmn() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_gummei.plmn)
  return _internal_mutable_plmn();
}
inline void flex_gummei::set_allocated_plmn(::protocol::flex_plmn* plmn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete plmn_;
  }
  if (plmn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(plmn);
    if (message_arena != submessage_arena) {
      plmn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, plmn, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  plmn_ = plmn;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_gummei.plmn)
}

// optional uint32 mme_group_id = 2;
inline bool flex_gummei::_internal_has_mme_group_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_gummei::has_mme_group_id() const {
  return _internal_has_mme_group_id();
}
inline void flex_gummei::clear_mme_group_id() {
  mme_group_id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_gummei::_internal_mme_group_id() const {
  return mme_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_gummei::mme_group_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gummei.mme_group_id)
  return _internal_mme_group_id();
}
inline void flex_gummei::_internal_set_mme_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  mme_group_id_ = value;
}
inline void flex_gummei::set_mme_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mme_group_id(value);
  // @@protoc_insertion_point(field_set:protocol.flex_gummei.mme_group_id)
}

// optional uint32 mme_code = 3;
inline bool flex_gummei::_internal_has_mme_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_gummei::has_mme_code() const {
  return _internal_has_mme_code();
}
inline void flex_gummei::clear_mme_code() {
  mme_code_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_gummei::_internal_mme_code() const {
  return mme_code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_gummei::mme_code() const {
  // @@protoc_insertion_point(field_get:protocol.flex_gummei.mme_code)
  return _internal_mme_code();
}
inline void flex_gummei::_internal_set_mme_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mme_code_ = value;
}
inline void flex_gummei::set_mme_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mme_code(value);
  // @@protoc_insertion_point(field_set:protocol.flex_gummei.mme_code)
}

// -------------------------------------------------------------------

// flex_s1ap_mme

// optional string s1_ip = 1;
inline bool flex_s1ap_mme::_internal_has_s1_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_s1ap_mme::has_s1_ip() const {
  return _internal_has_s1_ip();
}
inline void flex_s1ap_mme::clear_s1_ip() {
  s1_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& flex_s1ap_mme::s1_ip() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.s1_ip)
  return _internal_s1_ip();
}
inline void flex_s1ap_mme::set_s1_ip(const std::string& value) {
  _internal_set_s1_ip(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.s1_ip)
}
inline std::string* flex_s1ap_mme::mutable_s1_ip() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.s1_ip)
  return _internal_mutable_s1_ip();
}
inline const std::string& flex_s1ap_mme::_internal_s1_ip() const {
  return s1_ip_.Get();
}
inline void flex_s1ap_mme::_internal_set_s1_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void flex_s1ap_mme::set_s1_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  s1_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_mme.s1_ip)
}
inline void flex_s1ap_mme::set_s1_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_mme.s1_ip)
}
inline void flex_s1ap_mme::set_s1_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_mme.s1_ip)
}
inline std::string* flex_s1ap_mme::_internal_mutable_s1_ip() {
  _has_bits_[0] |= 0x00000001u;
  return s1_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* flex_s1ap_mme::release_s1_ip() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_mme.s1_ip)
  if (!_internal_has_s1_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return s1_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void flex_s1ap_mme::set_allocated_s1_ip(std::string* s1_ip) {
  if (s1_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  s1_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s1_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_mme.s1_ip)
}

// optional string name = 2;
inline bool flex_s1ap_mme::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_s1ap_mme::has_name() const {
  return _internal_has_name();
}
inline void flex_s1ap_mme::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& flex_s1ap_mme::name() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.name)
  return _internal_name();
}
inline void flex_s1ap_mme::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.name)
}
inline std::string* flex_s1ap_mme::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.name)
  return _internal_mutable_name();
}
inline const std::string& flex_s1ap_mme::_internal_name() const {
  return name_.Get();
}
inline void flex_s1ap_mme::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void flex_s1ap_mme::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_mme.name)
}
inline void flex_s1ap_mme::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_mme.name)
}
inline void flex_s1ap_mme::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_mme.name)
}
inline std::string* flex_s1ap_mme::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* flex_s1ap_mme::release_name() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_mme.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void flex_s1ap_mme::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_mme.name)
}

// optional .protocol.flex_mme_state state = 3;
inline bool flex_s1ap_mme::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_s1ap_mme::has_state() const {
  return _internal_has_state();
}
inline void flex_s1ap_mme::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::protocol::flex_mme_state flex_s1ap_mme::_internal_state() const {
  return static_cast< ::protocol::flex_mme_state >(state_);
}
inline ::protocol::flex_mme_state flex_s1ap_mme::state() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.state)
  return _internal_state();
}
inline void flex_s1ap_mme::_internal_set_state(::protocol::flex_mme_state value) {
  assert(::protocol::flex_mme_state_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  state_ = value;
}
inline void flex_s1ap_mme::set_state(::protocol::flex_mme_state value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.state)
}

// repeated .protocol.flex_gummei served_gummeis = 4;
inline int flex_s1ap_mme::_internal_served_gummeis_size() const {
  return served_gummeis_.size();
}
inline int flex_s1ap_mme::served_gummeis_size() const {
  return _internal_served_gummeis_size();
}
inline void flex_s1ap_mme::clear_served_gummeis() {
  served_gummeis_.Clear();
}
inline ::protocol::flex_gummei* flex_s1ap_mme::mutable_served_gummeis(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.served_gummeis)
  return served_gummeis_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gummei >*
flex_s1ap_mme::mutable_served_gummeis() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_s1ap_mme.served_gummeis)
  return &served_gummeis_;
}
inline const ::protocol::flex_gummei& flex_s1ap_mme::_internal_served_gummeis(int index) const {
  return served_gummeis_.Get(index);
}
inline const ::protocol::flex_gummei& flex_s1ap_mme::served_gummeis(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.served_gummeis)
  return _internal_served_gummeis(index);
}
inline ::protocol::flex_gummei* flex_s1ap_mme::_internal_add_served_gummeis() {
  return served_gummeis_.Add();
}
inline ::protocol::flex_gummei* flex_s1ap_mme::add_served_gummeis() {
  // @@protoc_insertion_point(field_add:protocol.flex_s1ap_mme.served_gummeis)
  return _internal_add_served_gummeis();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gummei >&
flex_s1ap_mme::served_gummeis() const {
  // @@protoc_insertion_point(field_list:protocol.flex_s1ap_mme.served_gummeis)
  return served_gummeis_;
}

// repeated .protocol.flex_plmn requested_plmns = 5;
inline int flex_s1ap_mme::_internal_requested_plmns_size() const {
  return requested_plmns_.size();
}
inline int flex_s1ap_mme::requested_plmns_size() const {
  return _internal_requested_plmns_size();
}
inline void flex_s1ap_mme::clear_requested_plmns() {
  requested_plmns_.Clear();
}
inline ::protocol::flex_plmn* flex_s1ap_mme::mutable_requested_plmns(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_mme.requested_plmns)
  return requested_plmns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >*
flex_s1ap_mme::mutable_requested_plmns() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_s1ap_mme.requested_plmns)
  return &requested_plmns_;
}
inline const ::protocol::flex_plmn& flex_s1ap_mme::_internal_requested_plmns(int index) const {
  return requested_plmns_.Get(index);
}
inline const ::protocol::flex_plmn& flex_s1ap_mme::requested_plmns(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.requested_plmns)
  return _internal_requested_plmns(index);
}
inline ::protocol::flex_plmn* flex_s1ap_mme::_internal_add_requested_plmns() {
  return requested_plmns_.Add();
}
inline ::protocol::flex_plmn* flex_s1ap_mme::add_requested_plmns() {
  // @@protoc_insertion_point(field_add:protocol.flex_s1ap_mme.requested_plmns)
  return _internal_add_requested_plmns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >&
flex_s1ap_mme::requested_plmns() const {
  // @@protoc_insertion_point(field_list:protocol.flex_s1ap_mme.requested_plmns)
  return requested_plmns_;
}

// optional uint32 rel_capacity = 6;
inline bool flex_s1ap_mme::_internal_has_rel_capacity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_s1ap_mme::has_rel_capacity() const {
  return _internal_has_rel_capacity();
}
inline void flex_s1ap_mme::clear_rel_capacity() {
  rel_capacity_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_s1ap_mme::_internal_rel_capacity() const {
  return rel_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_s1ap_mme::rel_capacity() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_mme.rel_capacity)
  return _internal_rel_capacity();
}
inline void flex_s1ap_mme::_internal_set_rel_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rel_capacity_ = value;
}
inline void flex_s1ap_mme::set_rel_capacity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rel_capacity(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_mme.rel_capacity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::flex_hopping_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_hopping_mode>() {
  return ::protocol::flex_hopping_mode_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_phich_resource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_phich_resource>() {
  return ::protocol::flex_phich_resource_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_phich_duration> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_phich_duration>() {
  return ::protocol::flex_phich_duration_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_ul_cyclic_prefix_length> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_ul_cyclic_prefix_length>() {
  return ::protocol::flex_ul_cyclic_prefix_length_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_dl_cyclic_prefix_length> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_dl_cyclic_prefix_length>() {
  return ::protocol::flex_dl_cyclic_prefix_length_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_duplex_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_duplex_mode>() {
  return ::protocol::flex_duplex_mode_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_qam> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_qam>() {
  return ::protocol::flex_qam_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_slice_algorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_slice_algorithm>() {
  return ::protocol::flex_slice_algorithm_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_meas_gap_config_pattern> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_meas_gap_config_pattern>() {
  return ::protocol::flex_meas_gap_config_pattern_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_setup_release_action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_setup_release_action>() {
  return ::protocol::flex_setup_release_action_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_ue_transmission_antenna> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_ue_transmission_antenna>() {
  return ::protocol::flex_ue_transmission_antenna_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_aperiodic_cqi_report_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_aperiodic_cqi_report_mode>() {
  return ::protocol::flex_aperiodic_cqi_report_mode_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_tdd_ack_nack_feedback_mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_tdd_ack_nack_feedback_mode>() {
  return ::protocol::flex_tdd_ack_nack_feedback_mode_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_lc_direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_lc_direction>() {
  return ::protocol::flex_lc_direction_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_qos_bearer_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_qos_bearer_type>() {
  return ::protocol::flex_qos_bearer_type_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_ue_state_change_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_ue_state_change_type>() {
  return ::protocol::flex_ue_state_change_type_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_mme_state> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_mme_state>() {
  return ::protocol::flex_mme_state_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_5fcommon_2eproto
