// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stats_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stats_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "stats_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stats_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stats_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stats_5fmessages_2eproto;
namespace protocol {
class flex_cell_stats_report;
class flex_cell_stats_reportDefaultTypeInternal;
extern flex_cell_stats_reportDefaultTypeInternal _flex_cell_stats_report_default_instance_;
class flex_cell_stats_request;
class flex_cell_stats_requestDefaultTypeInternal;
extern flex_cell_stats_requestDefaultTypeInternal _flex_cell_stats_request_default_instance_;
class flex_complete_stats_request;
class flex_complete_stats_requestDefaultTypeInternal;
extern flex_complete_stats_requestDefaultTypeInternal _flex_complete_stats_request_default_instance_;
class flex_complete_stats_request_repeated;
class flex_complete_stats_request_repeatedDefaultTypeInternal;
extern flex_complete_stats_request_repeatedDefaultTypeInternal _flex_complete_stats_request_repeated_default_instance_;
class flex_ue_stats_report;
class flex_ue_stats_reportDefaultTypeInternal;
extern flex_ue_stats_reportDefaultTypeInternal _flex_ue_stats_report_default_instance_;
class flex_ue_stats_request;
class flex_ue_stats_requestDefaultTypeInternal;
extern flex_ue_stats_requestDefaultTypeInternal _flex_ue_stats_request_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::flex_cell_stats_report* Arena::CreateMaybeMessage<::protocol::flex_cell_stats_report>(Arena*);
template<> ::protocol::flex_cell_stats_request* Arena::CreateMaybeMessage<::protocol::flex_cell_stats_request>(Arena*);
template<> ::protocol::flex_complete_stats_request* Arena::CreateMaybeMessage<::protocol::flex_complete_stats_request>(Arena*);
template<> ::protocol::flex_complete_stats_request_repeated* Arena::CreateMaybeMessage<::protocol::flex_complete_stats_request_repeated>(Arena*);
template<> ::protocol::flex_ue_stats_report* Arena::CreateMaybeMessage<::protocol::flex_ue_stats_report>(Arena*);
template<> ::protocol::flex_ue_stats_request* Arena::CreateMaybeMessage<::protocol::flex_ue_stats_request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

enum flex_stats_type : int {
  FLST_COMPLETE_STATS = 0,
  FLST_CELL_STATS = 1,
  FLST_UE_STATS = 2
};
bool flex_stats_type_IsValid(int value);
constexpr flex_stats_type flex_stats_type_MIN = FLST_COMPLETE_STATS;
constexpr flex_stats_type flex_stats_type_MAX = FLST_UE_STATS;
constexpr int flex_stats_type_ARRAYSIZE = flex_stats_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_stats_type_descriptor();
template<typename T>
inline const std::string& flex_stats_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_stats_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_stats_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_stats_type_descriptor(), enum_t_value);
}
inline bool flex_stats_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_stats_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_stats_type>(
    flex_stats_type_descriptor(), name, value);
}
enum flex_stats_report_freq : int {
  FLSRF_ONCE = 0,
  FLSRF_PERIODICAL = 1,
  FLSRF_CONTINUOUS = 2,
  FLSRF_OFF = 3
};
bool flex_stats_report_freq_IsValid(int value);
constexpr flex_stats_report_freq flex_stats_report_freq_MIN = FLSRF_ONCE;
constexpr flex_stats_report_freq flex_stats_report_freq_MAX = FLSRF_OFF;
constexpr int flex_stats_report_freq_ARRAYSIZE = flex_stats_report_freq_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_stats_report_freq_descriptor();
template<typename T>
inline const std::string& flex_stats_report_freq_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_stats_report_freq>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_stats_report_freq_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_stats_report_freq_descriptor(), enum_t_value);
}
inline bool flex_stats_report_freq_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_stats_report_freq* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_stats_report_freq>(
    flex_stats_report_freq_descriptor(), name, value);
}
enum flex_cell_stats_type : int {
  FLCST_NOISE_INTERFERENCE = 1
};
bool flex_cell_stats_type_IsValid(int value);
constexpr flex_cell_stats_type flex_cell_stats_type_MIN = FLCST_NOISE_INTERFERENCE;
constexpr flex_cell_stats_type flex_cell_stats_type_MAX = FLCST_NOISE_INTERFERENCE;
constexpr int flex_cell_stats_type_ARRAYSIZE = flex_cell_stats_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_cell_stats_type_descriptor();
template<typename T>
inline const std::string& flex_cell_stats_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_cell_stats_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_cell_stats_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_cell_stats_type_descriptor(), enum_t_value);
}
inline bool flex_cell_stats_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_cell_stats_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_cell_stats_type>(
    flex_cell_stats_type_descriptor(), name, value);
}
enum flex_ue_stats_type : int {
  FLUST_BSR = 1,
  FLUST_PHR = 2,
  FLUST_RLC_BS = 4,
  FLUST_MAC_CE_BS = 8,
  FLUST_DL_CQI = 16,
  FLUST_PBS = 32,
  FLUST_UL_CQI = 64,
  FLUST_MAC_STATS = 128,
  FLUST_PDCP_STATS = 1024,
  FLUST_GTP_STATS = 2048,
  FLUST_S1AP_STATS = 4096,
  FLUST_RRC_MEASUREMENTS = 65536
};
bool flex_ue_stats_type_IsValid(int value);
constexpr flex_ue_stats_type flex_ue_stats_type_MIN = FLUST_BSR;
constexpr flex_ue_stats_type flex_ue_stats_type_MAX = FLUST_RRC_MEASUREMENTS;
constexpr int flex_ue_stats_type_ARRAYSIZE = flex_ue_stats_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ue_stats_type_descriptor();
template<typename T>
inline const std::string& flex_ue_stats_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, flex_ue_stats_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function flex_ue_stats_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    flex_ue_stats_type_descriptor(), enum_t_value);
}
inline bool flex_ue_stats_type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, flex_ue_stats_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<flex_ue_stats_type>(
    flex_ue_stats_type_descriptor(), name, value);
}
// ===================================================================

class flex_complete_stats_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_complete_stats_request) */ {
 public:
  inline flex_complete_stats_request() : flex_complete_stats_request(nullptr) {}
  virtual ~flex_complete_stats_request();

  flex_complete_stats_request(const flex_complete_stats_request& from);
  flex_complete_stats_request(flex_complete_stats_request&& from) noexcept
    : flex_complete_stats_request() {
    *this = ::std::move(from);
  }

  inline flex_complete_stats_request& operator=(const flex_complete_stats_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_complete_stats_request& operator=(flex_complete_stats_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_complete_stats_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_complete_stats_request* internal_default_instance() {
    return reinterpret_cast<const flex_complete_stats_request*>(
               &_flex_complete_stats_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(flex_complete_stats_request& a, flex_complete_stats_request& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_complete_stats_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_complete_stats_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_complete_stats_request* New() const final {
    return CreateMaybeMessage<flex_complete_stats_request>(nullptr);
  }

  flex_complete_stats_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_complete_stats_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_complete_stats_request& from);
  void MergeFrom(const flex_complete_stats_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_complete_stats_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_complete_stats_request";
  }
  protected:
  explicit flex_complete_stats_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stats_5fmessages_2eproto);
    return ::descriptor_table_stats_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellReportsFieldNumber = 5,
    kUeReportsFieldNumber = 6,
    kReportFrequencyFieldNumber = 1,
    kSfFieldNumber = 2,
    kCellReportFlagsFieldNumber = 3,
    kUeReportFlagsFieldNumber = 4,
  };
  // repeated .protocol.flex_cell_stats_type cell_reports = 5;
  int cell_reports_size() const;
  private:
  int _internal_cell_reports_size() const;
  public:
  void clear_cell_reports();
  private:
  ::protocol::flex_cell_stats_type _internal_cell_reports(int index) const;
  void _internal_add_cell_reports(::protocol::flex_cell_stats_type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_cell_reports();
  public:
  ::protocol::flex_cell_stats_type cell_reports(int index) const;
  void set_cell_reports(int index, ::protocol::flex_cell_stats_type value);
  void add_cell_reports(::protocol::flex_cell_stats_type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& cell_reports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_cell_reports();

  // repeated .protocol.flex_ue_stats_type ue_reports = 6;
  int ue_reports_size() const;
  private:
  int _internal_ue_reports_size() const;
  public:
  void clear_ue_reports();
  private:
  ::protocol::flex_ue_stats_type _internal_ue_reports(int index) const;
  void _internal_add_ue_reports(::protocol::flex_ue_stats_type value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ue_reports();
  public:
  ::protocol::flex_ue_stats_type ue_reports(int index) const;
  void set_ue_reports(int index, ::protocol::flex_ue_stats_type value);
  void add_ue_reports(::protocol::flex_ue_stats_type value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ue_reports() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ue_reports();

  // optional .protocol.flex_stats_report_freq report_frequency = 1;
  bool has_report_frequency() const;
  private:
  bool _internal_has_report_frequency() const;
  public:
  void clear_report_frequency();
  ::protocol::flex_stats_report_freq report_frequency() const;
  void set_report_frequency(::protocol::flex_stats_report_freq value);
  private:
  ::protocol::flex_stats_report_freq _internal_report_frequency() const;
  void _internal_set_report_frequency(::protocol::flex_stats_report_freq value);
  public:

  // optional uint32 sf = 2;
  bool has_sf() const;
  private:
  bool _internal_has_sf() const;
  public:
  void clear_sf();
  ::PROTOBUF_NAMESPACE_ID::uint32 sf() const;
  void set_sf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sf() const;
  void _internal_set_sf(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cell_report_flags = 3;
  bool has_cell_report_flags() const;
  private:
  bool _internal_has_cell_report_flags() const;
  public:
  void clear_cell_report_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_report_flags() const;
  void set_cell_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell_report_flags() const;
  void _internal_set_cell_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ue_report_flags = 4;
  bool has_ue_report_flags() const;
  private:
  bool _internal_has_ue_report_flags() const;
  public:
  void clear_ue_report_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_report_flags() const;
  void set_ue_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_report_flags() const;
  void _internal_set_ue_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_complete_stats_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> cell_reports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ue_reports_;
  int report_frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sf_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cell_report_flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_report_flags_;
  friend struct ::TableStruct_stats_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_cell_stats_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_cell_stats_request) */ {
 public:
  inline flex_cell_stats_request() : flex_cell_stats_request(nullptr) {}
  virtual ~flex_cell_stats_request();

  flex_cell_stats_request(const flex_cell_stats_request& from);
  flex_cell_stats_request(flex_cell_stats_request&& from) noexcept
    : flex_cell_stats_request() {
    *this = ::std::move(from);
  }

  inline flex_cell_stats_request& operator=(const flex_cell_stats_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_cell_stats_request& operator=(flex_cell_stats_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_cell_stats_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_cell_stats_request* internal_default_instance() {
    return reinterpret_cast<const flex_cell_stats_request*>(
               &_flex_cell_stats_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(flex_cell_stats_request& a, flex_cell_stats_request& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_cell_stats_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_cell_stats_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_cell_stats_request* New() const final {
    return CreateMaybeMessage<flex_cell_stats_request>(nullptr);
  }

  flex_cell_stats_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_cell_stats_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_cell_stats_request& from);
  void MergeFrom(const flex_cell_stats_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_cell_stats_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_cell_stats_request";
  }
  protected:
  explicit flex_cell_stats_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stats_5fmessages_2eproto);
    return ::descriptor_table_stats_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // repeated uint32 cell = 1;
  int cell_size() const;
  private:
  int _internal_cell_size() const;
  public:
  void clear_cell();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cell(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_cell() const;
  void _internal_add_cell(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_cell();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 cell(int index) const;
  void set_cell(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_cell(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      cell() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_cell();

  // optional uint32 flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_cell_stats_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > cell_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_stats_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_ue_stats_request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ue_stats_request) */ {
 public:
  inline flex_ue_stats_request() : flex_ue_stats_request(nullptr) {}
  virtual ~flex_ue_stats_request();

  flex_ue_stats_request(const flex_ue_stats_request& from);
  flex_ue_stats_request(flex_ue_stats_request&& from) noexcept
    : flex_ue_stats_request() {
    *this = ::std::move(from);
  }

  inline flex_ue_stats_request& operator=(const flex_ue_stats_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_ue_stats_request& operator=(flex_ue_stats_request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_ue_stats_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_ue_stats_request* internal_default_instance() {
    return reinterpret_cast<const flex_ue_stats_request*>(
               &_flex_ue_stats_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(flex_ue_stats_request& a, flex_ue_stats_request& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_ue_stats_request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_ue_stats_request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_ue_stats_request* New() const final {
    return CreateMaybeMessage<flex_ue_stats_request>(nullptr);
  }

  flex_ue_stats_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_ue_stats_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_ue_stats_request& from);
  void MergeFrom(const flex_ue_stats_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_ue_stats_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_ue_stats_request";
  }
  protected:
  explicit flex_ue_stats_request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stats_5fmessages_2eproto);
    return ::descriptor_table_stats_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRntiFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // repeated uint32 rnti = 1;
  int rnti_size() const;
  private:
  int _internal_rnti_size() const;
  public:
  void clear_rnti();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_rnti() const;
  void _internal_add_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_rnti();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti(int index) const;
  void set_rnti(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      rnti() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_rnti();

  // optional uint32 flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_ue_stats_request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_stats_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_cell_stats_report PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_cell_stats_report) */ {
 public:
  inline flex_cell_stats_report() : flex_cell_stats_report(nullptr) {}
  virtual ~flex_cell_stats_report();

  flex_cell_stats_report(const flex_cell_stats_report& from);
  flex_cell_stats_report(flex_cell_stats_report&& from) noexcept
    : flex_cell_stats_report() {
    *this = ::std::move(from);
  }

  inline flex_cell_stats_report& operator=(const flex_cell_stats_report& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_cell_stats_report& operator=(flex_cell_stats_report&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_cell_stats_report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_cell_stats_report* internal_default_instance() {
    return reinterpret_cast<const flex_cell_stats_report*>(
               &_flex_cell_stats_report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(flex_cell_stats_report& a, flex_cell_stats_report& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_cell_stats_report* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_cell_stats_report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_cell_stats_report* New() const final {
    return CreateMaybeMessage<flex_cell_stats_report>(nullptr);
  }

  flex_cell_stats_report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_cell_stats_report>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_cell_stats_report& from);
  void MergeFrom(const flex_cell_stats_report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_cell_stats_report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_cell_stats_report";
  }
  protected:
  explicit flex_cell_stats_report(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stats_5fmessages_2eproto);
    return ::descriptor_table_stats_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoiseInterReportFieldNumber = 3,
    kCarrierIndexFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
  bool has_noise_inter_report() const;
  private:
  bool _internal_has_noise_inter_report() const;
  public:
  void clear_noise_inter_report();
  const ::protocol::flex_noise_interference_report& noise_inter_report() const;
  ::protocol::flex_noise_interference_report* release_noise_inter_report();
  ::protocol::flex_noise_interference_report* mutable_noise_inter_report();
  void set_allocated_noise_inter_report(::protocol::flex_noise_interference_report* noise_inter_report);
  private:
  const ::protocol::flex_noise_interference_report& _internal_noise_inter_report() const;
  ::protocol::flex_noise_interference_report* _internal_mutable_noise_inter_report();
  public:
  void unsafe_arena_set_allocated_noise_inter_report(
      ::protocol::flex_noise_interference_report* noise_inter_report);
  ::protocol::flex_noise_interference_report* unsafe_arena_release_noise_inter_report();

  // optional uint32 carrier_index = 1;
  bool has_carrier_index() const;
  private:
  bool _internal_has_carrier_index() const;
  public:
  void clear_carrier_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index() const;
  void set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carrier_index() const;
  void _internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_cell_stats_report)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::flex_noise_interference_report* noise_inter_report_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  friend struct ::TableStruct_stats_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_ue_stats_report PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ue_stats_report) */ {
 public:
  inline flex_ue_stats_report() : flex_ue_stats_report(nullptr) {}
  virtual ~flex_ue_stats_report();

  flex_ue_stats_report(const flex_ue_stats_report& from);
  flex_ue_stats_report(flex_ue_stats_report&& from) noexcept
    : flex_ue_stats_report() {
    *this = ::std::move(from);
  }

  inline flex_ue_stats_report& operator=(const flex_ue_stats_report& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_ue_stats_report& operator=(flex_ue_stats_report&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_ue_stats_report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_ue_stats_report* internal_default_instance() {
    return reinterpret_cast<const flex_ue_stats_report*>(
               &_flex_ue_stats_report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(flex_ue_stats_report& a, flex_ue_stats_report& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_ue_stats_report* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_ue_stats_report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_ue_stats_report* New() const final {
    return CreateMaybeMessage<flex_ue_stats_report>(nullptr);
  }

  flex_ue_stats_report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_ue_stats_report>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_ue_stats_report& from);
  void MergeFrom(const flex_ue_stats_report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_ue_stats_report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_ue_stats_report";
  }
  protected:
  explicit flex_ue_stats_report(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stats_5fmessages_2eproto);
    return ::descriptor_table_stats_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBsrFieldNumber = 3,
    kRlcReportFieldNumber = 5,
    kGtpStatsFieldNumber = 13,
    kDlCqiReportFieldNumber = 7,
    kPbrFieldNumber = 8,
    kUlCqiReportFieldNumber = 9,
    kRrcMeasurementsFieldNumber = 10,
    kPdcpStatsFieldNumber = 11,
    kMacStatsFieldNumber = 12,
    kS1ApStatsFieldNumber = 14,
    kRntiFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kPhrFieldNumber = 4,
    kPendingMacCesFieldNumber = 6,
  };
  // repeated uint32 bsr = 3;
  int bsr_size() const;
  private:
  int _internal_bsr_size() const;
  public:
  void clear_bsr();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bsr(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_bsr() const;
  void _internal_add_bsr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_bsr();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 bsr(int index) const;
  void set_bsr(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_bsr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      bsr() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_bsr();

  // repeated .protocol.flex_rlc_bsr rlc_report = 5;
  int rlc_report_size() const;
  private:
  int _internal_rlc_report_size() const;
  public:
  void clear_rlc_report();
  ::protocol::flex_rlc_bsr* mutable_rlc_report(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_bsr >*
      mutable_rlc_report();
  private:
  const ::protocol::flex_rlc_bsr& _internal_rlc_report(int index) const;
  ::protocol::flex_rlc_bsr* _internal_add_rlc_report();
  public:
  const ::protocol::flex_rlc_bsr& rlc_report(int index) const;
  ::protocol::flex_rlc_bsr* add_rlc_report();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_bsr >&
      rlc_report() const;

  // repeated .protocol.flex_gtp_stats gtp_stats = 13;
  int gtp_stats_size() const;
  private:
  int _internal_gtp_stats_size() const;
  public:
  void clear_gtp_stats();
  ::protocol::flex_gtp_stats* mutable_gtp_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gtp_stats >*
      mutable_gtp_stats();
  private:
  const ::protocol::flex_gtp_stats& _internal_gtp_stats(int index) const;
  ::protocol::flex_gtp_stats* _internal_add_gtp_stats();
  public:
  const ::protocol::flex_gtp_stats& gtp_stats(int index) const;
  ::protocol::flex_gtp_stats* add_gtp_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gtp_stats >&
      gtp_stats() const;

  // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
  bool has_dl_cqi_report() const;
  private:
  bool _internal_has_dl_cqi_report() const;
  public:
  void clear_dl_cqi_report();
  const ::protocol::flex_dl_cqi_report& dl_cqi_report() const;
  ::protocol::flex_dl_cqi_report* release_dl_cqi_report();
  ::protocol::flex_dl_cqi_report* mutable_dl_cqi_report();
  void set_allocated_dl_cqi_report(::protocol::flex_dl_cqi_report* dl_cqi_report);
  private:
  const ::protocol::flex_dl_cqi_report& _internal_dl_cqi_report() const;
  ::protocol::flex_dl_cqi_report* _internal_mutable_dl_cqi_report();
  public:
  void unsafe_arena_set_allocated_dl_cqi_report(
      ::protocol::flex_dl_cqi_report* dl_cqi_report);
  ::protocol::flex_dl_cqi_report* unsafe_arena_release_dl_cqi_report();

  // optional .protocol.flex_paging_buffer_report pbr = 8;
  bool has_pbr() const;
  private:
  bool _internal_has_pbr() const;
  public:
  void clear_pbr();
  const ::protocol::flex_paging_buffer_report& pbr() const;
  ::protocol::flex_paging_buffer_report* release_pbr();
  ::protocol::flex_paging_buffer_report* mutable_pbr();
  void set_allocated_pbr(::protocol::flex_paging_buffer_report* pbr);
  private:
  const ::protocol::flex_paging_buffer_report& _internal_pbr() const;
  ::protocol::flex_paging_buffer_report* _internal_mutable_pbr();
  public:
  void unsafe_arena_set_allocated_pbr(
      ::protocol::flex_paging_buffer_report* pbr);
  ::protocol::flex_paging_buffer_report* unsafe_arena_release_pbr();

  // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
  bool has_ul_cqi_report() const;
  private:
  bool _internal_has_ul_cqi_report() const;
  public:
  void clear_ul_cqi_report();
  const ::protocol::flex_ul_cqi_report& ul_cqi_report() const;
  ::protocol::flex_ul_cqi_report* release_ul_cqi_report();
  ::protocol::flex_ul_cqi_report* mutable_ul_cqi_report();
  void set_allocated_ul_cqi_report(::protocol::flex_ul_cqi_report* ul_cqi_report);
  private:
  const ::protocol::flex_ul_cqi_report& _internal_ul_cqi_report() const;
  ::protocol::flex_ul_cqi_report* _internal_mutable_ul_cqi_report();
  public:
  void unsafe_arena_set_allocated_ul_cqi_report(
      ::protocol::flex_ul_cqi_report* ul_cqi_report);
  ::protocol::flex_ul_cqi_report* unsafe_arena_release_ul_cqi_report();

  // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
  bool has_rrc_measurements() const;
  private:
  bool _internal_has_rrc_measurements() const;
  public:
  void clear_rrc_measurements();
  const ::protocol::flex_rrc_measurements& rrc_measurements() const;
  ::protocol::flex_rrc_measurements* release_rrc_measurements();
  ::protocol::flex_rrc_measurements* mutable_rrc_measurements();
  void set_allocated_rrc_measurements(::protocol::flex_rrc_measurements* rrc_measurements);
  private:
  const ::protocol::flex_rrc_measurements& _internal_rrc_measurements() const;
  ::protocol::flex_rrc_measurements* _internal_mutable_rrc_measurements();
  public:
  void unsafe_arena_set_allocated_rrc_measurements(
      ::protocol::flex_rrc_measurements* rrc_measurements);
  ::protocol::flex_rrc_measurements* unsafe_arena_release_rrc_measurements();

  // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
  bool has_pdcp_stats() const;
  private:
  bool _internal_has_pdcp_stats() const;
  public:
  void clear_pdcp_stats();
  const ::protocol::flex_pdcp_stats& pdcp_stats() const;
  ::protocol::flex_pdcp_stats* release_pdcp_stats();
  ::protocol::flex_pdcp_stats* mutable_pdcp_stats();
  void set_allocated_pdcp_stats(::protocol::flex_pdcp_stats* pdcp_stats);
  private:
  const ::protocol::flex_pdcp_stats& _internal_pdcp_stats() const;
  ::protocol::flex_pdcp_stats* _internal_mutable_pdcp_stats();
  public:
  void unsafe_arena_set_allocated_pdcp_stats(
      ::protocol::flex_pdcp_stats* pdcp_stats);
  ::protocol::flex_pdcp_stats* unsafe_arena_release_pdcp_stats();

  // optional .protocol.flex_mac_stats mac_stats = 12;
  bool has_mac_stats() const;
  private:
  bool _internal_has_mac_stats() const;
  public:
  void clear_mac_stats();
  const ::protocol::flex_mac_stats& mac_stats() const;
  ::protocol::flex_mac_stats* release_mac_stats();
  ::protocol::flex_mac_stats* mutable_mac_stats();
  void set_allocated_mac_stats(::protocol::flex_mac_stats* mac_stats);
  private:
  const ::protocol::flex_mac_stats& _internal_mac_stats() const;
  ::protocol::flex_mac_stats* _internal_mutable_mac_stats();
  public:
  void unsafe_arena_set_allocated_mac_stats(
      ::protocol::flex_mac_stats* mac_stats);
  ::protocol::flex_mac_stats* unsafe_arena_release_mac_stats();

  // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
  bool has_s1ap_stats() const;
  private:
  bool _internal_has_s1ap_stats() const;
  public:
  void clear_s1ap_stats();
  const ::protocol::flex_s1ap_ue& s1ap_stats() const;
  ::protocol::flex_s1ap_ue* release_s1ap_stats();
  ::protocol::flex_s1ap_ue* mutable_s1ap_stats();
  void set_allocated_s1ap_stats(::protocol::flex_s1ap_ue* s1ap_stats);
  private:
  const ::protocol::flex_s1ap_ue& _internal_s1ap_stats() const;
  ::protocol::flex_s1ap_ue* _internal_mutable_s1ap_stats();
  public:
  void unsafe_arena_set_allocated_s1ap_stats(
      ::protocol::flex_s1ap_ue* s1ap_stats);
  ::protocol::flex_s1ap_ue* unsafe_arena_release_s1ap_stats();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flags = 2;
  bool has_flags() const;
  private:
  bool _internal_has_flags() const;
  public:
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 phr = 4;
  bool has_phr() const;
  private:
  bool _internal_has_phr() const;
  public:
  void clear_phr();
  ::PROTOBUF_NAMESPACE_ID::uint32 phr() const;
  void set_phr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phr() const;
  void _internal_set_phr(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pending_mac_ces = 6;
  bool has_pending_mac_ces() const;
  private:
  bool _internal_has_pending_mac_ces() const;
  public:
  void clear_pending_mac_ces();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_mac_ces() const;
  void set_pending_mac_ces(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending_mac_ces() const;
  void _internal_set_pending_mac_ces(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_ue_stats_report)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > bsr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_bsr > rlc_report_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gtp_stats > gtp_stats_;
  ::protocol::flex_dl_cqi_report* dl_cqi_report_;
  ::protocol::flex_paging_buffer_report* pbr_;
  ::protocol::flex_ul_cqi_report* ul_cqi_report_;
  ::protocol::flex_rrc_measurements* rrc_measurements_;
  ::protocol::flex_pdcp_stats* pdcp_stats_;
  ::protocol::flex_mac_stats* mac_stats_;
  ::protocol::flex_s1ap_ue* s1ap_stats_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_mac_ces_;
  friend struct ::TableStruct_stats_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_complete_stats_request_repeated PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_complete_stats_request_repeated) */ {
 public:
  inline flex_complete_stats_request_repeated() : flex_complete_stats_request_repeated(nullptr) {}
  virtual ~flex_complete_stats_request_repeated();

  flex_complete_stats_request_repeated(const flex_complete_stats_request_repeated& from);
  flex_complete_stats_request_repeated(flex_complete_stats_request_repeated&& from) noexcept
    : flex_complete_stats_request_repeated() {
    *this = ::std::move(from);
  }

  inline flex_complete_stats_request_repeated& operator=(const flex_complete_stats_request_repeated& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_complete_stats_request_repeated& operator=(flex_complete_stats_request_repeated&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_complete_stats_request_repeated& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_complete_stats_request_repeated* internal_default_instance() {
    return reinterpret_cast<const flex_complete_stats_request_repeated*>(
               &_flex_complete_stats_request_repeated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(flex_complete_stats_request_repeated& a, flex_complete_stats_request_repeated& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_complete_stats_request_repeated* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_complete_stats_request_repeated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_complete_stats_request_repeated* New() const final {
    return CreateMaybeMessage<flex_complete_stats_request_repeated>(nullptr);
  }

  flex_complete_stats_request_repeated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_complete_stats_request_repeated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_complete_stats_request_repeated& from);
  void MergeFrom(const flex_complete_stats_request_repeated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_complete_stats_request_repeated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_complete_stats_request_repeated";
  }
  protected:
  explicit flex_complete_stats_request_repeated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_stats_5fmessages_2eproto);
    return ::descriptor_table_stats_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportsFieldNumber = 1,
  };
  // repeated .protocol.flex_complete_stats_request reports = 1;
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::protocol::flex_complete_stats_request* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_complete_stats_request >*
      mutable_reports();
  private:
  const ::protocol::flex_complete_stats_request& _internal_reports(int index) const;
  ::protocol::flex_complete_stats_request* _internal_add_reports();
  public:
  const ::protocol::flex_complete_stats_request& reports(int index) const;
  ::protocol::flex_complete_stats_request* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_complete_stats_request >&
      reports() const;

  // @@protoc_insertion_point(class_scope:protocol.flex_complete_stats_request_repeated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_complete_stats_request > reports_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stats_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// flex_complete_stats_request

// optional .protocol.flex_stats_report_freq report_frequency = 1;
inline bool flex_complete_stats_request::_internal_has_report_frequency() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_complete_stats_request::has_report_frequency() const {
  return _internal_has_report_frequency();
}
inline void flex_complete_stats_request::clear_report_frequency() {
  report_frequency_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::protocol::flex_stats_report_freq flex_complete_stats_request::_internal_report_frequency() const {
  return static_cast< ::protocol::flex_stats_report_freq >(report_frequency_);
}
inline ::protocol::flex_stats_report_freq flex_complete_stats_request::report_frequency() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.report_frequency)
  return _internal_report_frequency();
}
inline void flex_complete_stats_request::_internal_set_report_frequency(::protocol::flex_stats_report_freq value) {
  assert(::protocol::flex_stats_report_freq_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  report_frequency_ = value;
}
inline void flex_complete_stats_request::set_report_frequency(::protocol::flex_stats_report_freq value) {
  _internal_set_report_frequency(value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.report_frequency)
}

// optional uint32 sf = 2;
inline bool flex_complete_stats_request::_internal_has_sf() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_complete_stats_request::has_sf() const {
  return _internal_has_sf();
}
inline void flex_complete_stats_request::clear_sf() {
  sf_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_complete_stats_request::_internal_sf() const {
  return sf_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_complete_stats_request::sf() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.sf)
  return _internal_sf();
}
inline void flex_complete_stats_request::_internal_set_sf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  sf_ = value;
}
inline void flex_complete_stats_request::set_sf(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sf(value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.sf)
}

// optional uint32 cell_report_flags = 3;
inline bool flex_complete_stats_request::_internal_has_cell_report_flags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_complete_stats_request::has_cell_report_flags() const {
  return _internal_has_cell_report_flags();
}
inline void flex_complete_stats_request::clear_cell_report_flags() {
  cell_report_flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_complete_stats_request::_internal_cell_report_flags() const {
  return cell_report_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_complete_stats_request::cell_report_flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.cell_report_flags)
  return _internal_cell_report_flags();
}
inline void flex_complete_stats_request::_internal_set_cell_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  cell_report_flags_ = value;
}
inline void flex_complete_stats_request::set_cell_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cell_report_flags(value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.cell_report_flags)
}

// optional uint32 ue_report_flags = 4;
inline bool flex_complete_stats_request::_internal_has_ue_report_flags() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_complete_stats_request::has_ue_report_flags() const {
  return _internal_has_ue_report_flags();
}
inline void flex_complete_stats_request::clear_ue_report_flags() {
  ue_report_flags_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_complete_stats_request::_internal_ue_report_flags() const {
  return ue_report_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_complete_stats_request::ue_report_flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.ue_report_flags)
  return _internal_ue_report_flags();
}
inline void flex_complete_stats_request::_internal_set_ue_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  ue_report_flags_ = value;
}
inline void flex_complete_stats_request::set_ue_report_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_report_flags(value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.ue_report_flags)
}

// repeated .protocol.flex_cell_stats_type cell_reports = 5;
inline int flex_complete_stats_request::_internal_cell_reports_size() const {
  return cell_reports_.size();
}
inline int flex_complete_stats_request::cell_reports_size() const {
  return _internal_cell_reports_size();
}
inline void flex_complete_stats_request::clear_cell_reports() {
  cell_reports_.Clear();
}
inline ::protocol::flex_cell_stats_type flex_complete_stats_request::_internal_cell_reports(int index) const {
  return static_cast< ::protocol::flex_cell_stats_type >(cell_reports_.Get(index));
}
inline ::protocol::flex_cell_stats_type flex_complete_stats_request::cell_reports(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.cell_reports)
  return _internal_cell_reports(index);
}
inline void flex_complete_stats_request::set_cell_reports(int index, ::protocol::flex_cell_stats_type value) {
  assert(::protocol::flex_cell_stats_type_IsValid(value));
  cell_reports_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.cell_reports)
}
inline void flex_complete_stats_request::_internal_add_cell_reports(::protocol::flex_cell_stats_type value) {
  assert(::protocol::flex_cell_stats_type_IsValid(value));
  cell_reports_.Add(value);
}
inline void flex_complete_stats_request::add_cell_reports(::protocol::flex_cell_stats_type value) {
  // @@protoc_insertion_point(field_add:protocol.flex_complete_stats_request.cell_reports)
  _internal_add_cell_reports(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
flex_complete_stats_request::cell_reports() const {
  // @@protoc_insertion_point(field_list:protocol.flex_complete_stats_request.cell_reports)
  return cell_reports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
flex_complete_stats_request::_internal_mutable_cell_reports() {
  return &cell_reports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
flex_complete_stats_request::mutable_cell_reports() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_complete_stats_request.cell_reports)
  return _internal_mutable_cell_reports();
}

// repeated .protocol.flex_ue_stats_type ue_reports = 6;
inline int flex_complete_stats_request::_internal_ue_reports_size() const {
  return ue_reports_.size();
}
inline int flex_complete_stats_request::ue_reports_size() const {
  return _internal_ue_reports_size();
}
inline void flex_complete_stats_request::clear_ue_reports() {
  ue_reports_.Clear();
}
inline ::protocol::flex_ue_stats_type flex_complete_stats_request::_internal_ue_reports(int index) const {
  return static_cast< ::protocol::flex_ue_stats_type >(ue_reports_.Get(index));
}
inline ::protocol::flex_ue_stats_type flex_complete_stats_request::ue_reports(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request.ue_reports)
  return _internal_ue_reports(index);
}
inline void flex_complete_stats_request::set_ue_reports(int index, ::protocol::flex_ue_stats_type value) {
  assert(::protocol::flex_ue_stats_type_IsValid(value));
  ue_reports_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_complete_stats_request.ue_reports)
}
inline void flex_complete_stats_request::_internal_add_ue_reports(::protocol::flex_ue_stats_type value) {
  assert(::protocol::flex_ue_stats_type_IsValid(value));
  ue_reports_.Add(value);
}
inline void flex_complete_stats_request::add_ue_reports(::protocol::flex_ue_stats_type value) {
  // @@protoc_insertion_point(field_add:protocol.flex_complete_stats_request.ue_reports)
  _internal_add_ue_reports(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
flex_complete_stats_request::ue_reports() const {
  // @@protoc_insertion_point(field_list:protocol.flex_complete_stats_request.ue_reports)
  return ue_reports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
flex_complete_stats_request::_internal_mutable_ue_reports() {
  return &ue_reports_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
flex_complete_stats_request::mutable_ue_reports() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_complete_stats_request.ue_reports)
  return _internal_mutable_ue_reports();
}

// -------------------------------------------------------------------

// flex_cell_stats_request

// repeated uint32 cell = 1;
inline int flex_cell_stats_request::_internal_cell_size() const {
  return cell_.size();
}
inline int flex_cell_stats_request::cell_size() const {
  return _internal_cell_size();
}
inline void flex_cell_stats_request::clear_cell() {
  cell_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_request::_internal_cell(int index) const {
  return cell_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_request::cell(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_request.cell)
  return _internal_cell(index);
}
inline void flex_cell_stats_request::set_cell(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cell_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_request.cell)
}
inline void flex_cell_stats_request::_internal_add_cell(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  cell_.Add(value);
}
inline void flex_cell_stats_request::add_cell(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_cell(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_stats_request.cell)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_stats_request::_internal_cell() const {
  return cell_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_stats_request::cell() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_stats_request.cell)
  return _internal_cell();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_stats_request::_internal_mutable_cell() {
  return &cell_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_stats_request::mutable_cell() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_stats_request.cell)
  return _internal_mutable_cell();
}

// optional uint32 flags = 2;
inline bool flex_cell_stats_request::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_cell_stats_request::has_flags() const {
  return _internal_has_flags();
}
inline void flex_cell_stats_request::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_request::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_request::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_request.flags)
  return _internal_flags();
}
inline void flex_cell_stats_request::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  flags_ = value;
}
inline void flex_cell_stats_request::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_request.flags)
}

// -------------------------------------------------------------------

// flex_ue_stats_request

// repeated uint32 rnti = 1;
inline int flex_ue_stats_request::_internal_rnti_size() const {
  return rnti_.size();
}
inline int flex_ue_stats_request::rnti_size() const {
  return _internal_rnti_size();
}
inline void flex_ue_stats_request::clear_rnti() {
  rnti_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_request::_internal_rnti(int index) const {
  return rnti_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_request::rnti(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_request.rnti)
  return _internal_rnti(index);
}
inline void flex_ue_stats_request::set_rnti(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rnti_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_request.rnti)
}
inline void flex_ue_stats_request::_internal_add_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  rnti_.Add(value);
}
inline void flex_ue_stats_request::add_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_rnti(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_request.rnti)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_ue_stats_request::_internal_rnti() const {
  return rnti_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_ue_stats_request::rnti() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_request.rnti)
  return _internal_rnti();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_ue_stats_request::_internal_mutable_rnti() {
  return &rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_ue_stats_request::mutable_rnti() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_request.rnti)
  return _internal_mutable_rnti();
}

// optional uint32 flags = 2;
inline bool flex_ue_stats_request::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_ue_stats_request::has_flags() const {
  return _internal_has_flags();
}
inline void flex_ue_stats_request::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_request::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_request::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_request.flags)
  return _internal_flags();
}
inline void flex_ue_stats_request::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  flags_ = value;
}
inline void flex_ue_stats_request::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_request.flags)
}

// -------------------------------------------------------------------

// flex_cell_stats_report

// optional uint32 carrier_index = 1;
inline bool flex_cell_stats_report::_internal_has_carrier_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_cell_stats_report::has_carrier_index() const {
  return _internal_has_carrier_index();
}
inline void flex_cell_stats_report::clear_carrier_index() {
  carrier_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_report::_internal_carrier_index() const {
  return carrier_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_report::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_report.carrier_index)
  return _internal_carrier_index();
}
inline void flex_cell_stats_report::_internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  carrier_index_ = value;
}
inline void flex_cell_stats_report::set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carrier_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_report.carrier_index)
}

// optional uint32 flags = 2;
inline bool flex_cell_stats_report::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_cell_stats_report::has_flags() const {
  return _internal_has_flags();
}
inline void flex_cell_stats_report::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_report::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_stats_report::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_report.flags)
  return _internal_flags();
}
inline void flex_cell_stats_report::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  flags_ = value;
}
inline void flex_cell_stats_report::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_stats_report.flags)
}

// optional .protocol.flex_noise_interference_report noise_inter_report = 3;
inline bool flex_cell_stats_report::_internal_has_noise_inter_report() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || noise_inter_report_ != nullptr);
  return value;
}
inline bool flex_cell_stats_report::has_noise_inter_report() const {
  return _internal_has_noise_inter_report();
}
inline const ::protocol::flex_noise_interference_report& flex_cell_stats_report::_internal_noise_inter_report() const {
  const ::protocol::flex_noise_interference_report* p = noise_inter_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_noise_interference_report*>(
      &::protocol::_flex_noise_interference_report_default_instance_);
}
inline const ::protocol::flex_noise_interference_report& flex_cell_stats_report::noise_inter_report() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_stats_report.noise_inter_report)
  return _internal_noise_inter_report();
}
inline void flex_cell_stats_report::unsafe_arena_set_allocated_noise_inter_report(
    ::protocol::flex_noise_interference_report* noise_inter_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noise_inter_report_);
  }
  noise_inter_report_ = noise_inter_report;
  if (noise_inter_report) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_cell_stats_report.noise_inter_report)
}
inline ::protocol::flex_noise_interference_report* flex_cell_stats_report::release_noise_inter_report() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_noise_interference_report* temp = noise_inter_report_;
  noise_inter_report_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_noise_interference_report* flex_cell_stats_report::unsafe_arena_release_noise_inter_report() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_stats_report.noise_inter_report)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_noise_interference_report* temp = noise_inter_report_;
  noise_inter_report_ = nullptr;
  return temp;
}
inline ::protocol::flex_noise_interference_report* flex_cell_stats_report::_internal_mutable_noise_inter_report() {
  _has_bits_[0] |= 0x00000001u;
  if (noise_inter_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_noise_interference_report>(GetArena());
    noise_inter_report_ = p;
  }
  return noise_inter_report_;
}
inline ::protocol::flex_noise_interference_report* flex_cell_stats_report::mutable_noise_inter_report() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_stats_report.noise_inter_report)
  return _internal_mutable_noise_inter_report();
}
inline void flex_cell_stats_report::set_allocated_noise_inter_report(::protocol::flex_noise_interference_report* noise_inter_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(noise_inter_report_);
  }
  if (noise_inter_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(noise_inter_report)->GetArena();
    if (message_arena != submessage_arena) {
      noise_inter_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, noise_inter_report, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  noise_inter_report_ = noise_inter_report;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_stats_report.noise_inter_report)
}

// -------------------------------------------------------------------

// flex_ue_stats_report

// optional uint32 rnti = 1;
inline bool flex_ue_stats_report::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool flex_ue_stats_report::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_ue_stats_report::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.rnti)
  return _internal_rnti();
}
inline void flex_ue_stats_report::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  rnti_ = value;
}
inline void flex_ue_stats_report::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.rnti)
}

// optional uint32 flags = 2;
inline bool flex_ue_stats_report::_internal_has_flags() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool flex_ue_stats_report::has_flags() const {
  return _internal_has_flags();
}
inline void flex_ue_stats_report::clear_flags() {
  flags_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::flags() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.flags)
  return _internal_flags();
}
inline void flex_ue_stats_report::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  flags_ = value;
}
inline void flex_ue_stats_report::set_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.flags)
}

// repeated uint32 bsr = 3;
inline int flex_ue_stats_report::_internal_bsr_size() const {
  return bsr_.size();
}
inline int flex_ue_stats_report::bsr_size() const {
  return _internal_bsr_size();
}
inline void flex_ue_stats_report::clear_bsr() {
  bsr_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::_internal_bsr(int index) const {
  return bsr_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::bsr(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.bsr)
  return _internal_bsr(index);
}
inline void flex_ue_stats_report::set_bsr(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bsr_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.bsr)
}
inline void flex_ue_stats_report::_internal_add_bsr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  bsr_.Add(value);
}
inline void flex_ue_stats_report::add_bsr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_bsr(value);
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_report.bsr)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_ue_stats_report::_internal_bsr() const {
  return bsr_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_ue_stats_report::bsr() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_report.bsr)
  return _internal_bsr();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_ue_stats_report::_internal_mutable_bsr() {
  return &bsr_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_ue_stats_report::mutable_bsr() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_report.bsr)
  return _internal_mutable_bsr();
}

// optional uint32 phr = 4;
inline bool flex_ue_stats_report::_internal_has_phr() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool flex_ue_stats_report::has_phr() const {
  return _internal_has_phr();
}
inline void flex_ue_stats_report::clear_phr() {
  phr_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::_internal_phr() const {
  return phr_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::phr() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.phr)
  return _internal_phr();
}
inline void flex_ue_stats_report::_internal_set_phr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  phr_ = value;
}
inline void flex_ue_stats_report::set_phr(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phr(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.phr)
}

// repeated .protocol.flex_rlc_bsr rlc_report = 5;
inline int flex_ue_stats_report::_internal_rlc_report_size() const {
  return rlc_report_.size();
}
inline int flex_ue_stats_report::rlc_report_size() const {
  return _internal_rlc_report_size();
}
inline ::protocol::flex_rlc_bsr* flex_ue_stats_report::mutable_rlc_report(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.rlc_report)
  return rlc_report_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_bsr >*
flex_ue_stats_report::mutable_rlc_report() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_report.rlc_report)
  return &rlc_report_;
}
inline const ::protocol::flex_rlc_bsr& flex_ue_stats_report::_internal_rlc_report(int index) const {
  return rlc_report_.Get(index);
}
inline const ::protocol::flex_rlc_bsr& flex_ue_stats_report::rlc_report(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.rlc_report)
  return _internal_rlc_report(index);
}
inline ::protocol::flex_rlc_bsr* flex_ue_stats_report::_internal_add_rlc_report() {
  return rlc_report_.Add();
}
inline ::protocol::flex_rlc_bsr* flex_ue_stats_report::add_rlc_report() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_report.rlc_report)
  return _internal_add_rlc_report();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_rlc_bsr >&
flex_ue_stats_report::rlc_report() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_report.rlc_report)
  return rlc_report_;
}

// optional uint32 pending_mac_ces = 6;
inline bool flex_ue_stats_report::_internal_has_pending_mac_ces() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool flex_ue_stats_report::has_pending_mac_ces() const {
  return _internal_has_pending_mac_ces();
}
inline void flex_ue_stats_report::clear_pending_mac_ces() {
  pending_mac_ces_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::_internal_pending_mac_ces() const {
  return pending_mac_ces_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_stats_report::pending_mac_ces() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.pending_mac_ces)
  return _internal_pending_mac_ces();
}
inline void flex_ue_stats_report::_internal_set_pending_mac_ces(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  pending_mac_ces_ = value;
}
inline void flex_ue_stats_report::set_pending_mac_ces(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending_mac_ces(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_stats_report.pending_mac_ces)
}

// optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
inline bool flex_ue_stats_report::_internal_has_dl_cqi_report() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dl_cqi_report_ != nullptr);
  return value;
}
inline bool flex_ue_stats_report::has_dl_cqi_report() const {
  return _internal_has_dl_cqi_report();
}
inline const ::protocol::flex_dl_cqi_report& flex_ue_stats_report::_internal_dl_cqi_report() const {
  const ::protocol::flex_dl_cqi_report* p = dl_cqi_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_dl_cqi_report*>(
      &::protocol::_flex_dl_cqi_report_default_instance_);
}
inline const ::protocol::flex_dl_cqi_report& flex_ue_stats_report::dl_cqi_report() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.dl_cqi_report)
  return _internal_dl_cqi_report();
}
inline void flex_ue_stats_report::unsafe_arena_set_allocated_dl_cqi_report(
    ::protocol::flex_dl_cqi_report* dl_cqi_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_cqi_report_);
  }
  dl_cqi_report_ = dl_cqi_report;
  if (dl_cqi_report) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_stats_report.dl_cqi_report)
}
inline ::protocol::flex_dl_cqi_report* flex_ue_stats_report::release_dl_cqi_report() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_cqi_report* temp = dl_cqi_report_;
  dl_cqi_report_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_dl_cqi_report* flex_ue_stats_report::unsafe_arena_release_dl_cqi_report() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.dl_cqi_report)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_dl_cqi_report* temp = dl_cqi_report_;
  dl_cqi_report_ = nullptr;
  return temp;
}
inline ::protocol::flex_dl_cqi_report* flex_ue_stats_report::_internal_mutable_dl_cqi_report() {
  _has_bits_[0] |= 0x00000001u;
  if (dl_cqi_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_dl_cqi_report>(GetArena());
    dl_cqi_report_ = p;
  }
  return dl_cqi_report_;
}
inline ::protocol::flex_dl_cqi_report* flex_ue_stats_report::mutable_dl_cqi_report() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.dl_cqi_report)
  return _internal_mutable_dl_cqi_report();
}
inline void flex_ue_stats_report::set_allocated_dl_cqi_report(::protocol::flex_dl_cqi_report* dl_cqi_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_cqi_report_);
  }
  if (dl_cqi_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_cqi_report)->GetArena();
    if (message_arena != submessage_arena) {
      dl_cqi_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dl_cqi_report, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dl_cqi_report_ = dl_cqi_report;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.dl_cqi_report)
}

// optional .protocol.flex_paging_buffer_report pbr = 8;
inline bool flex_ue_stats_report::_internal_has_pbr() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pbr_ != nullptr);
  return value;
}
inline bool flex_ue_stats_report::has_pbr() const {
  return _internal_has_pbr();
}
inline const ::protocol::flex_paging_buffer_report& flex_ue_stats_report::_internal_pbr() const {
  const ::protocol::flex_paging_buffer_report* p = pbr_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_paging_buffer_report*>(
      &::protocol::_flex_paging_buffer_report_default_instance_);
}
inline const ::protocol::flex_paging_buffer_report& flex_ue_stats_report::pbr() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.pbr)
  return _internal_pbr();
}
inline void flex_ue_stats_report::unsafe_arena_set_allocated_pbr(
    ::protocol::flex_paging_buffer_report* pbr) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbr_);
  }
  pbr_ = pbr;
  if (pbr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_stats_report.pbr)
}
inline ::protocol::flex_paging_buffer_report* flex_ue_stats_report::release_pbr() {
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_paging_buffer_report* temp = pbr_;
  pbr_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_paging_buffer_report* flex_ue_stats_report::unsafe_arena_release_pbr() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.pbr)
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_paging_buffer_report* temp = pbr_;
  pbr_ = nullptr;
  return temp;
}
inline ::protocol::flex_paging_buffer_report* flex_ue_stats_report::_internal_mutable_pbr() {
  _has_bits_[0] |= 0x00000002u;
  if (pbr_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_paging_buffer_report>(GetArena());
    pbr_ = p;
  }
  return pbr_;
}
inline ::protocol::flex_paging_buffer_report* flex_ue_stats_report::mutable_pbr() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.pbr)
  return _internal_mutable_pbr();
}
inline void flex_ue_stats_report::set_allocated_pbr(::protocol::flex_paging_buffer_report* pbr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbr_);
  }
  if (pbr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbr)->GetArena();
    if (message_arena != submessage_arena) {
      pbr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pbr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pbr_ = pbr;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.pbr)
}

// optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
inline bool flex_ue_stats_report::_internal_has_ul_cqi_report() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || ul_cqi_report_ != nullptr);
  return value;
}
inline bool flex_ue_stats_report::has_ul_cqi_report() const {
  return _internal_has_ul_cqi_report();
}
inline const ::protocol::flex_ul_cqi_report& flex_ue_stats_report::_internal_ul_cqi_report() const {
  const ::protocol::flex_ul_cqi_report* p = ul_cqi_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_ul_cqi_report*>(
      &::protocol::_flex_ul_cqi_report_default_instance_);
}
inline const ::protocol::flex_ul_cqi_report& flex_ue_stats_report::ul_cqi_report() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.ul_cqi_report)
  return _internal_ul_cqi_report();
}
inline void flex_ue_stats_report::unsafe_arena_set_allocated_ul_cqi_report(
    ::protocol::flex_ul_cqi_report* ul_cqi_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_cqi_report_);
  }
  ul_cqi_report_ = ul_cqi_report;
  if (ul_cqi_report) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_stats_report.ul_cqi_report)
}
inline ::protocol::flex_ul_cqi_report* flex_ue_stats_report::release_ul_cqi_report() {
  _has_bits_[0] &= ~0x00000004u;
  ::protocol::flex_ul_cqi_report* temp = ul_cqi_report_;
  ul_cqi_report_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_ul_cqi_report* flex_ue_stats_report::unsafe_arena_release_ul_cqi_report() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.ul_cqi_report)
  _has_bits_[0] &= ~0x00000004u;
  ::protocol::flex_ul_cqi_report* temp = ul_cqi_report_;
  ul_cqi_report_ = nullptr;
  return temp;
}
inline ::protocol::flex_ul_cqi_report* flex_ue_stats_report::_internal_mutable_ul_cqi_report() {
  _has_bits_[0] |= 0x00000004u;
  if (ul_cqi_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_ul_cqi_report>(GetArena());
    ul_cqi_report_ = p;
  }
  return ul_cqi_report_;
}
inline ::protocol::flex_ul_cqi_report* flex_ue_stats_report::mutable_ul_cqi_report() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.ul_cqi_report)
  return _internal_mutable_ul_cqi_report();
}
inline void flex_ue_stats_report::set_allocated_ul_cqi_report(::protocol::flex_ul_cqi_report* ul_cqi_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_cqi_report_);
  }
  if (ul_cqi_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_cqi_report)->GetArena();
    if (message_arena != submessage_arena) {
      ul_cqi_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ul_cqi_report, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ul_cqi_report_ = ul_cqi_report;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.ul_cqi_report)
}

// optional .protocol.flex_rrc_measurements rrc_measurements = 10;
inline bool flex_ue_stats_report::_internal_has_rrc_measurements() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || rrc_measurements_ != nullptr);
  return value;
}
inline bool flex_ue_stats_report::has_rrc_measurements() const {
  return _internal_has_rrc_measurements();
}
inline const ::protocol::flex_rrc_measurements& flex_ue_stats_report::_internal_rrc_measurements() const {
  const ::protocol::flex_rrc_measurements* p = rrc_measurements_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_rrc_measurements*>(
      &::protocol::_flex_rrc_measurements_default_instance_);
}
inline const ::protocol::flex_rrc_measurements& flex_ue_stats_report::rrc_measurements() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.rrc_measurements)
  return _internal_rrc_measurements();
}
inline void flex_ue_stats_report::unsafe_arena_set_allocated_rrc_measurements(
    ::protocol::flex_rrc_measurements* rrc_measurements) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rrc_measurements_);
  }
  rrc_measurements_ = rrc_measurements;
  if (rrc_measurements) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_stats_report.rrc_measurements)
}
inline ::protocol::flex_rrc_measurements* flex_ue_stats_report::release_rrc_measurements() {
  _has_bits_[0] &= ~0x00000008u;
  ::protocol::flex_rrc_measurements* temp = rrc_measurements_;
  rrc_measurements_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_rrc_measurements* flex_ue_stats_report::unsafe_arena_release_rrc_measurements() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.rrc_measurements)
  _has_bits_[0] &= ~0x00000008u;
  ::protocol::flex_rrc_measurements* temp = rrc_measurements_;
  rrc_measurements_ = nullptr;
  return temp;
}
inline ::protocol::flex_rrc_measurements* flex_ue_stats_report::_internal_mutable_rrc_measurements() {
  _has_bits_[0] |= 0x00000008u;
  if (rrc_measurements_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_rrc_measurements>(GetArena());
    rrc_measurements_ = p;
  }
  return rrc_measurements_;
}
inline ::protocol::flex_rrc_measurements* flex_ue_stats_report::mutable_rrc_measurements() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.rrc_measurements)
  return _internal_mutable_rrc_measurements();
}
inline void flex_ue_stats_report::set_allocated_rrc_measurements(::protocol::flex_rrc_measurements* rrc_measurements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rrc_measurements_);
  }
  if (rrc_measurements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rrc_measurements)->GetArena();
    if (message_arena != submessage_arena) {
      rrc_measurements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rrc_measurements, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rrc_measurements_ = rrc_measurements;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.rrc_measurements)
}

// optional .protocol.flex_pdcp_stats pdcp_stats = 11;
inline bool flex_ue_stats_report::_internal_has_pdcp_stats() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || pdcp_stats_ != nullptr);
  return value;
}
inline bool flex_ue_stats_report::has_pdcp_stats() const {
  return _internal_has_pdcp_stats();
}
inline const ::protocol::flex_pdcp_stats& flex_ue_stats_report::_internal_pdcp_stats() const {
  const ::protocol::flex_pdcp_stats* p = pdcp_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_pdcp_stats*>(
      &::protocol::_flex_pdcp_stats_default_instance_);
}
inline const ::protocol::flex_pdcp_stats& flex_ue_stats_report::pdcp_stats() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.pdcp_stats)
  return _internal_pdcp_stats();
}
inline void flex_ue_stats_report::unsafe_arena_set_allocated_pdcp_stats(
    ::protocol::flex_pdcp_stats* pdcp_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdcp_stats_);
  }
  pdcp_stats_ = pdcp_stats;
  if (pdcp_stats) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_stats_report.pdcp_stats)
}
inline ::protocol::flex_pdcp_stats* flex_ue_stats_report::release_pdcp_stats() {
  _has_bits_[0] &= ~0x00000010u;
  ::protocol::flex_pdcp_stats* temp = pdcp_stats_;
  pdcp_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_pdcp_stats* flex_ue_stats_report::unsafe_arena_release_pdcp_stats() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.pdcp_stats)
  _has_bits_[0] &= ~0x00000010u;
  ::protocol::flex_pdcp_stats* temp = pdcp_stats_;
  pdcp_stats_ = nullptr;
  return temp;
}
inline ::protocol::flex_pdcp_stats* flex_ue_stats_report::_internal_mutable_pdcp_stats() {
  _has_bits_[0] |= 0x00000010u;
  if (pdcp_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_pdcp_stats>(GetArena());
    pdcp_stats_ = p;
  }
  return pdcp_stats_;
}
inline ::protocol::flex_pdcp_stats* flex_ue_stats_report::mutable_pdcp_stats() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.pdcp_stats)
  return _internal_mutable_pdcp_stats();
}
inline void flex_ue_stats_report::set_allocated_pdcp_stats(::protocol::flex_pdcp_stats* pdcp_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdcp_stats_);
  }
  if (pdcp_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pdcp_stats)->GetArena();
    if (message_arena != submessage_arena) {
      pdcp_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pdcp_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  pdcp_stats_ = pdcp_stats;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.pdcp_stats)
}

// optional .protocol.flex_mac_stats mac_stats = 12;
inline bool flex_ue_stats_report::_internal_has_mac_stats() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || mac_stats_ != nullptr);
  return value;
}
inline bool flex_ue_stats_report::has_mac_stats() const {
  return _internal_has_mac_stats();
}
inline const ::protocol::flex_mac_stats& flex_ue_stats_report::_internal_mac_stats() const {
  const ::protocol::flex_mac_stats* p = mac_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_mac_stats*>(
      &::protocol::_flex_mac_stats_default_instance_);
}
inline const ::protocol::flex_mac_stats& flex_ue_stats_report::mac_stats() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.mac_stats)
  return _internal_mac_stats();
}
inline void flex_ue_stats_report::unsafe_arena_set_allocated_mac_stats(
    ::protocol::flex_mac_stats* mac_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mac_stats_);
  }
  mac_stats_ = mac_stats;
  if (mac_stats) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_stats_report.mac_stats)
}
inline ::protocol::flex_mac_stats* flex_ue_stats_report::release_mac_stats() {
  _has_bits_[0] &= ~0x00000020u;
  ::protocol::flex_mac_stats* temp = mac_stats_;
  mac_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_mac_stats* flex_ue_stats_report::unsafe_arena_release_mac_stats() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.mac_stats)
  _has_bits_[0] &= ~0x00000020u;
  ::protocol::flex_mac_stats* temp = mac_stats_;
  mac_stats_ = nullptr;
  return temp;
}
inline ::protocol::flex_mac_stats* flex_ue_stats_report::_internal_mutable_mac_stats() {
  _has_bits_[0] |= 0x00000020u;
  if (mac_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_mac_stats>(GetArena());
    mac_stats_ = p;
  }
  return mac_stats_;
}
inline ::protocol::flex_mac_stats* flex_ue_stats_report::mutable_mac_stats() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.mac_stats)
  return _internal_mutable_mac_stats();
}
inline void flex_ue_stats_report::set_allocated_mac_stats(::protocol::flex_mac_stats* mac_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mac_stats_);
  }
  if (mac_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mac_stats)->GetArena();
    if (message_arena != submessage_arena) {
      mac_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mac_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  mac_stats_ = mac_stats;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.mac_stats)
}

// repeated .protocol.flex_gtp_stats gtp_stats = 13;
inline int flex_ue_stats_report::_internal_gtp_stats_size() const {
  return gtp_stats_.size();
}
inline int flex_ue_stats_report::gtp_stats_size() const {
  return _internal_gtp_stats_size();
}
inline ::protocol::flex_gtp_stats* flex_ue_stats_report::mutable_gtp_stats(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.gtp_stats)
  return gtp_stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gtp_stats >*
flex_ue_stats_report::mutable_gtp_stats() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_stats_report.gtp_stats)
  return &gtp_stats_;
}
inline const ::protocol::flex_gtp_stats& flex_ue_stats_report::_internal_gtp_stats(int index) const {
  return gtp_stats_.Get(index);
}
inline const ::protocol::flex_gtp_stats& flex_ue_stats_report::gtp_stats(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.gtp_stats)
  return _internal_gtp_stats(index);
}
inline ::protocol::flex_gtp_stats* flex_ue_stats_report::_internal_add_gtp_stats() {
  return gtp_stats_.Add();
}
inline ::protocol::flex_gtp_stats* flex_ue_stats_report::add_gtp_stats() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_stats_report.gtp_stats)
  return _internal_add_gtp_stats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_gtp_stats >&
flex_ue_stats_report::gtp_stats() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_stats_report.gtp_stats)
  return gtp_stats_;
}

// optional .protocol.flex_s1ap_ue s1ap_stats = 14;
inline bool flex_ue_stats_report::_internal_has_s1ap_stats() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || s1ap_stats_ != nullptr);
  return value;
}
inline bool flex_ue_stats_report::has_s1ap_stats() const {
  return _internal_has_s1ap_stats();
}
inline const ::protocol::flex_s1ap_ue& flex_ue_stats_report::_internal_s1ap_stats() const {
  const ::protocol::flex_s1ap_ue* p = s1ap_stats_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_s1ap_ue*>(
      &::protocol::_flex_s1ap_ue_default_instance_);
}
inline const ::protocol::flex_s1ap_ue& flex_ue_stats_report::s1ap_stats() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_stats_report.s1ap_stats)
  return _internal_s1ap_stats();
}
inline void flex_ue_stats_report::unsafe_arena_set_allocated_s1ap_stats(
    ::protocol::flex_s1ap_ue* s1ap_stats) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s1ap_stats_);
  }
  s1ap_stats_ = s1ap_stats;
  if (s1ap_stats) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_stats_report.s1ap_stats)
}
inline ::protocol::flex_s1ap_ue* flex_ue_stats_report::release_s1ap_stats() {
  _has_bits_[0] &= ~0x00000040u;
  ::protocol::flex_s1ap_ue* temp = s1ap_stats_;
  s1ap_stats_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_s1ap_ue* flex_ue_stats_report::unsafe_arena_release_s1ap_stats() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_stats_report.s1ap_stats)
  _has_bits_[0] &= ~0x00000040u;
  ::protocol::flex_s1ap_ue* temp = s1ap_stats_;
  s1ap_stats_ = nullptr;
  return temp;
}
inline ::protocol::flex_s1ap_ue* flex_ue_stats_report::_internal_mutable_s1ap_stats() {
  _has_bits_[0] |= 0x00000040u;
  if (s1ap_stats_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_s1ap_ue>(GetArena());
    s1ap_stats_ = p;
  }
  return s1ap_stats_;
}
inline ::protocol::flex_s1ap_ue* flex_ue_stats_report::mutable_s1ap_stats() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_stats_report.s1ap_stats)
  return _internal_mutable_s1ap_stats();
}
inline void flex_ue_stats_report::set_allocated_s1ap_stats(::protocol::flex_s1ap_ue* s1ap_stats) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(s1ap_stats_);
  }
  if (s1ap_stats) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(s1ap_stats)->GetArena();
    if (message_arena != submessage_arena) {
      s1ap_stats = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, s1ap_stats, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  s1ap_stats_ = s1ap_stats;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_stats_report.s1ap_stats)
}

// -------------------------------------------------------------------

// flex_complete_stats_request_repeated

// repeated .protocol.flex_complete_stats_request reports = 1;
inline int flex_complete_stats_request_repeated::_internal_reports_size() const {
  return reports_.size();
}
inline int flex_complete_stats_request_repeated::reports_size() const {
  return _internal_reports_size();
}
inline void flex_complete_stats_request_repeated::clear_reports() {
  reports_.Clear();
}
inline ::protocol::flex_complete_stats_request* flex_complete_stats_request_repeated::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_complete_stats_request_repeated.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_complete_stats_request >*
flex_complete_stats_request_repeated::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_complete_stats_request_repeated.reports)
  return &reports_;
}
inline const ::protocol::flex_complete_stats_request& flex_complete_stats_request_repeated::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::protocol::flex_complete_stats_request& flex_complete_stats_request_repeated::reports(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_complete_stats_request_repeated.reports)
  return _internal_reports(index);
}
inline ::protocol::flex_complete_stats_request* flex_complete_stats_request_repeated::_internal_add_reports() {
  return reports_.Add();
}
inline ::protocol::flex_complete_stats_request* flex_complete_stats_request_repeated::add_reports() {
  // @@protoc_insertion_point(field_add:protocol.flex_complete_stats_request_repeated.reports)
  return _internal_add_reports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_complete_stats_request >&
flex_complete_stats_request_repeated::reports() const {
  // @@protoc_insertion_point(field_list:protocol.flex_complete_stats_request_repeated.reports)
  return reports_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protocol::flex_stats_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_stats_type>() {
  return ::protocol::flex_stats_type_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_stats_report_freq> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_stats_report_freq>() {
  return ::protocol::flex_stats_report_freq_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_cell_stats_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_cell_stats_type>() {
  return ::protocol::flex_cell_stats_type_descriptor();
}
template <> struct is_proto_enum< ::protocol::flex_ue_stats_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::flex_ue_stats_type>() {
  return ::protocol::flex_ue_stats_type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stats_5fmessages_2eproto
