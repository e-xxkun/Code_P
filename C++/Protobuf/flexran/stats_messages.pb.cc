// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stats_messages.proto

#include "stats_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_stats_5fmessages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_complete_stats_request_stats_5fmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_dl_cqi_report_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_gtp_stats_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_mac_stats_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_noise_interference_report_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_paging_buffer_report_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_pdcp_stats_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_rlc_bsr_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_rrc_measurements_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_s1ap_ue_stats_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_stats_5fcommon_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_flex_ul_cqi_report_stats_5fcommon_2eproto;
namespace protocol {
class flex_complete_stats_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_complete_stats_request> _instance;
} _flex_complete_stats_request_default_instance_;
class flex_cell_stats_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_cell_stats_request> _instance;
} _flex_cell_stats_request_default_instance_;
class flex_ue_stats_requestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ue_stats_request> _instance;
} _flex_ue_stats_request_default_instance_;
class flex_cell_stats_reportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_cell_stats_report> _instance;
} _flex_cell_stats_report_default_instance_;
class flex_ue_stats_reportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_ue_stats_report> _instance;
} _flex_ue_stats_report_default_instance_;
class flex_complete_stats_request_repeatedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<flex_complete_stats_request_repeated> _instance;
} _flex_complete_stats_request_repeated_default_instance_;
}  // namespace protocol
static void InitDefaultsscc_info_flex_cell_stats_report_stats_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_cell_stats_report_default_instance_;
    new (ptr) ::protocol::flex_cell_stats_report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_cell_stats_report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_cell_stats_report_stats_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_cell_stats_report_stats_5fmessages_2eproto}, {
      &scc_info_flex_noise_interference_report_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_cell_stats_request_stats_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_cell_stats_request_default_instance_;
    new (ptr) ::protocol::flex_cell_stats_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_cell_stats_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_cell_stats_request_stats_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_cell_stats_request_stats_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_flex_complete_stats_request_stats_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_complete_stats_request_default_instance_;
    new (ptr) ::protocol::flex_complete_stats_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_complete_stats_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_complete_stats_request_stats_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_complete_stats_request_stats_5fmessages_2eproto}, {}};

static void InitDefaultsscc_info_flex_complete_stats_request_repeated_stats_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_complete_stats_request_repeated_default_instance_;
    new (ptr) ::protocol::flex_complete_stats_request_repeated();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_complete_stats_request_repeated::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_flex_complete_stats_request_repeated_stats_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_flex_complete_stats_request_repeated_stats_5fmessages_2eproto}, {
      &scc_info_flex_complete_stats_request_stats_5fmessages_2eproto.base,}};

static void InitDefaultsscc_info_flex_ue_stats_report_stats_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ue_stats_report_default_instance_;
    new (ptr) ::protocol::flex_ue_stats_report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ue_stats_report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_flex_ue_stats_report_stats_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_flex_ue_stats_report_stats_5fmessages_2eproto}, {
      &scc_info_flex_rlc_bsr_stats_5fcommon_2eproto.base,
      &scc_info_flex_dl_cqi_report_stats_5fcommon_2eproto.base,
      &scc_info_flex_paging_buffer_report_stats_5fcommon_2eproto.base,
      &scc_info_flex_ul_cqi_report_stats_5fcommon_2eproto.base,
      &scc_info_flex_rrc_measurements_stats_5fcommon_2eproto.base,
      &scc_info_flex_pdcp_stats_stats_5fcommon_2eproto.base,
      &scc_info_flex_mac_stats_stats_5fcommon_2eproto.base,
      &scc_info_flex_gtp_stats_stats_5fcommon_2eproto.base,
      &scc_info_flex_s1ap_ue_stats_5fcommon_2eproto.base,}};

static void InitDefaultsscc_info_flex_ue_stats_request_stats_5fmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protocol::_flex_ue_stats_request_default_instance_;
    new (ptr) ::protocol::flex_ue_stats_request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protocol::flex_ue_stats_request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_flex_ue_stats_request_stats_5fmessages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_flex_ue_stats_request_stats_5fmessages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_stats_5fmessages_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_stats_5fmessages_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_stats_5fmessages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_stats_5fmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, report_frequency_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, sf_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, cell_report_flags_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, ue_report_flags_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, cell_reports_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request, ue_reports_),
  0,
  1,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_request, cell_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_request, flags_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_request, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_request, flags_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_report, carrier_index_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_report, flags_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_cell_stats_report, noise_inter_report_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, rnti_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, flags_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, bsr_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, phr_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, rlc_report_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, pending_mac_ces_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, dl_cqi_report_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, pbr_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, ul_cqi_report_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, rrc_measurements_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, pdcp_stats_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, mac_stats_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, gtp_stats_),
  PROTOBUF_FIELD_OFFSET(::protocol::flex_ue_stats_report, s1ap_stats_),
  7,
  8,
  ~0u,
  9,
  ~0u,
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request_repeated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protocol::flex_complete_stats_request_repeated, reports_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::protocol::flex_complete_stats_request)},
  { 17, 24, sizeof(::protocol::flex_cell_stats_request)},
  { 26, 33, sizeof(::protocol::flex_ue_stats_request)},
  { 35, 43, sizeof(::protocol::flex_cell_stats_report)},
  { 46, 65, sizeof(::protocol::flex_ue_stats_report)},
  { 79, -1, sizeof(::protocol::flex_complete_stats_request_repeated)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_complete_stats_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_cell_stats_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ue_stats_request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_cell_stats_report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_ue_stats_report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protocol::_flex_complete_stats_request_repeated_default_instance_),
};

const char descriptor_table_protodef_stats_5fmessages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024stats_messages.proto\022\010protocol\032\022stats_"
  "common.proto\"\201\002\n\033flex_complete_stats_req"
  "uest\022:\n\020report_frequency\030\001 \001(\0162 .protoco"
  "l.flex_stats_report_freq\022\n\n\002sf\030\002 \001(\r\022\031\n\021"
  "cell_report_flags\030\003 \001(\r\022\027\n\017ue_report_fla"
  "gs\030\004 \001(\r\0224\n\014cell_reports\030\005 \003(\0162\036.protoco"
  "l.flex_cell_stats_type\0220\n\nue_reports\030\006 \003"
  "(\0162\034.protocol.flex_ue_stats_type\"6\n\027flex"
  "_cell_stats_request\022\014\n\004cell\030\001 \003(\r\022\r\n\005fla"
  "gs\030\002 \001(\r\"4\n\025flex_ue_stats_request\022\014\n\004rnt"
  "i\030\001 \003(\r\022\r\n\005flags\030\002 \001(\r\"\204\001\n\026flex_cell_sta"
  "ts_report\022\025\n\rcarrier_index\030\001 \001(\r\022\r\n\005flag"
  "s\030\002 \001(\r\022D\n\022noise_inter_report\030\003 \001(\0132(.pr"
  "otocol.flex_noise_interference_report\"\236\004"
  "\n\024flex_ue_stats_report\022\014\n\004rnti\030\001 \001(\r\022\r\n\005"
  "flags\030\002 \001(\r\022\013\n\003bsr\030\003 \003(\r\022\013\n\003phr\030\004 \001(\r\022*\n"
  "\nrlc_report\030\005 \003(\0132\026.protocol.flex_rlc_bs"
  "r\022\027\n\017pending_mac_ces\030\006 \001(\r\0223\n\rdl_cqi_rep"
  "ort\030\007 \001(\0132\034.protocol.flex_dl_cqi_report\022"
  "0\n\003pbr\030\010 \001(\0132#.protocol.flex_paging_buff"
  "er_report\0223\n\rul_cqi_report\030\t \001(\0132\034.proto"
  "col.flex_ul_cqi_report\0229\n\020rrc_measuremen"
  "ts\030\n \001(\0132\037.protocol.flex_rrc_measurement"
  "s\022-\n\npdcp_stats\030\013 \001(\0132\031.protocol.flex_pd"
  "cp_stats\022+\n\tmac_stats\030\014 \001(\0132\030.protocol.f"
  "lex_mac_stats\022+\n\tgtp_stats\030\r \003(\0132\030.proto"
  "col.flex_gtp_stats\022*\n\ns1ap_stats\030\016 \001(\0132\026"
  ".protocol.flex_s1ap_ue\"^\n$flex_complete_"
  "stats_request_repeated\0226\n\007reports\030\001 \003(\0132"
  "%.protocol.flex_complete_stats_request*R"
  "\n\017flex_stats_type\022\027\n\023FLST_COMPLETE_STATS"
  "\020\000\022\023\n\017FLST_CELL_STATS\020\001\022\021\n\rFLST_UE_STATS"
  "\020\002*c\n\026flex_stats_report_freq\022\016\n\nFLSRF_ON"
  "CE\020\000\022\024\n\020FLSRF_PERIODICAL\020\001\022\024\n\020FLSRF_CONT"
  "INUOUS\020\002\022\r\n\tFLSRF_OFF\020\003*4\n\024flex_cell_sta"
  "ts_type\022\034\n\030FLCST_NOISE_INTERFERENCE\020\001*\204\002"
  "\n\022flex_ue_stats_type\022\r\n\tFLUST_BSR\020\001\022\r\n\tF"
  "LUST_PHR\020\002\022\020\n\014FLUST_RLC_BS\020\004\022\023\n\017FLUST_MA"
  "C_CE_BS\020\010\022\020\n\014FLUST_DL_CQI\020\020\022\r\n\tFLUST_PBS"
  "\020 \022\020\n\014FLUST_UL_CQI\020@\022\024\n\017FLUST_MAC_STATS\020"
  "\200\001\022\025\n\020FLUST_PDCP_STATS\020\200\010\022\024\n\017FLUST_GTP_S"
  "TATS\020\200\020\022\025\n\020FLUST_S1AP_STATS\020\200 \022\034\n\026FLUST_"
  "RRC_MEASUREMENTS\020\200\200\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_stats_5fmessages_2eproto_deps[1] = {
  &::descriptor_table_stats_5fcommon_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_stats_5fmessages_2eproto_sccs[6] = {
  &scc_info_flex_cell_stats_report_stats_5fmessages_2eproto.base,
  &scc_info_flex_cell_stats_request_stats_5fmessages_2eproto.base,
  &scc_info_flex_complete_stats_request_stats_5fmessages_2eproto.base,
  &scc_info_flex_complete_stats_request_repeated_stats_5fmessages_2eproto.base,
  &scc_info_flex_ue_stats_report_stats_5fmessages_2eproto.base,
  &scc_info_flex_ue_stats_request_stats_5fmessages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_stats_5fmessages_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stats_5fmessages_2eproto = {
  false, false, descriptor_table_protodef_stats_5fmessages_2eproto, "stats_messages.proto", 1700,
  &descriptor_table_stats_5fmessages_2eproto_once, descriptor_table_stats_5fmessages_2eproto_sccs, descriptor_table_stats_5fmessages_2eproto_deps, 6, 1,
  schemas, file_default_instances, TableStruct_stats_5fmessages_2eproto::offsets,
  file_level_metadata_stats_5fmessages_2eproto, 6, file_level_enum_descriptors_stats_5fmessages_2eproto, file_level_service_descriptors_stats_5fmessages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_stats_5fmessages_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_stats_5fmessages_2eproto)), true);
namespace protocol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_stats_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_5fmessages_2eproto);
  return file_level_enum_descriptors_stats_5fmessages_2eproto[0];
}
bool flex_stats_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_stats_report_freq_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_5fmessages_2eproto);
  return file_level_enum_descriptors_stats_5fmessages_2eproto[1];
}
bool flex_stats_report_freq_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_cell_stats_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_5fmessages_2eproto);
  return file_level_enum_descriptors_stats_5fmessages_2eproto[2];
}
bool flex_cell_stats_type_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* flex_ue_stats_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_stats_5fmessages_2eproto);
  return file_level_enum_descriptors_stats_5fmessages_2eproto[3];
}
bool flex_ue_stats_type_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 1024:
    case 2048:
    case 4096:
    case 65536:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void flex_complete_stats_request::InitAsDefaultInstance() {
}
class flex_complete_stats_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_complete_stats_request>()._has_bits_);
  static void set_has_report_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cell_report_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ue_report_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

flex_complete_stats_request::flex_complete_stats_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_reports_(arena),
  ue_reports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_complete_stats_request)
}
flex_complete_stats_request::flex_complete_stats_request(const flex_complete_stats_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_reports_(from.cell_reports_),
      ue_reports_(from.ue_reports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&report_frequency_, &from.report_frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&ue_report_flags_) -
    reinterpret_cast<char*>(&report_frequency_)) + sizeof(ue_report_flags_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_complete_stats_request)
}

void flex_complete_stats_request::SharedCtor() {
  ::memset(&report_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ue_report_flags_) -
      reinterpret_cast<char*>(&report_frequency_)) + sizeof(ue_report_flags_));
}

flex_complete_stats_request::~flex_complete_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_complete_stats_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_complete_stats_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_complete_stats_request::ArenaDtor(void* object) {
  flex_complete_stats_request* _this = reinterpret_cast< flex_complete_stats_request* >(object);
  (void)_this;
}
void flex_complete_stats_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_complete_stats_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_complete_stats_request& flex_complete_stats_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_complete_stats_request_stats_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_complete_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_complete_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_reports_.Clear();
  ue_reports_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&report_frequency_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ue_report_flags_) -
        reinterpret_cast<char*>(&report_frequency_)) + sizeof(ue_report_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_complete_stats_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .protocol.flex_stats_report_freq report_frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protocol::flex_stats_report_freq_IsValid(val))) {
            _internal_set_report_frequency(static_cast<::protocol::flex_stats_report_freq>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 sf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_sf(&has_bits);
          sf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 cell_report_flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_cell_report_flags(&has_bits);
          cell_report_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ue_report_flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ue_report_flags(&has_bits);
          ue_report_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_cell_stats_type cell_reports = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protocol::flex_cell_stats_type_IsValid(val))) {
              _internal_add_cell_reports(static_cast<::protocol::flex_cell_stats_type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<40>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_cell_reports(), ptr, ctx, ::protocol::flex_cell_stats_type_IsValid, &_internal_metadata_, 5);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_ue_stats_type ue_reports = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protocol::flex_ue_stats_type_IsValid(val))) {
              _internal_add_ue_reports(static_cast<::protocol::flex_ue_stats_type>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<48>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_ue_reports(), ptr, ctx, ::protocol::flex_ue_stats_type_IsValid, &_internal_metadata_, 6);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_complete_stats_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_complete_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protocol.flex_stats_report_freq report_frequency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_report_frequency(), target);
  }

  // optional uint32 sf = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sf(), target);
  }

  // optional uint32 cell_report_flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_cell_report_flags(), target);
  }

  // optional uint32 ue_report_flags = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_ue_report_flags(), target);
  }

  // repeated .protocol.flex_cell_stats_type cell_reports = 5;
  for (int i = 0, n = this->_internal_cell_reports_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        5, this->_internal_cell_reports(i), target);
  }

  // repeated .protocol.flex_ue_stats_type ue_reports = 6;
  for (int i = 0, n = this->_internal_ue_reports_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        6, this->_internal_ue_reports(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_complete_stats_request)
  return target;
}

size_t flex_complete_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_complete_stats_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_cell_stats_type cell_reports = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_cell_reports_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_cell_reports(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .protocol.flex_ue_stats_type ue_reports = 6;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ue_reports_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ue_reports(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .protocol.flex_stats_report_freq report_frequency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_report_frequency());
    }

    // optional uint32 sf = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sf());
    }

    // optional uint32 cell_report_flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_cell_report_flags());
    }

    // optional uint32 ue_report_flags = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ue_report_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_complete_stats_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_complete_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_complete_stats_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_complete_stats_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_complete_stats_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_complete_stats_request)
    MergeFrom(*source);
  }
}

void flex_complete_stats_request::MergeFrom(const flex_complete_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_complete_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_reports_.MergeFrom(from.cell_reports_);
  ue_reports_.MergeFrom(from.ue_reports_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      report_frequency_ = from.report_frequency_;
    }
    if (cached_has_bits & 0x00000002u) {
      sf_ = from.sf_;
    }
    if (cached_has_bits & 0x00000004u) {
      cell_report_flags_ = from.cell_report_flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      ue_report_flags_ = from.ue_report_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_complete_stats_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_complete_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_complete_stats_request::CopyFrom(const flex_complete_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_complete_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_complete_stats_request::IsInitialized() const {
  return true;
}

void flex_complete_stats_request::InternalSwap(flex_complete_stats_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_reports_.InternalSwap(&other->cell_reports_);
  ue_reports_.InternalSwap(&other->ue_reports_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_complete_stats_request, ue_report_flags_)
      + sizeof(flex_complete_stats_request::ue_report_flags_)
      - PROTOBUF_FIELD_OFFSET(flex_complete_stats_request, report_frequency_)>(
          reinterpret_cast<char*>(&report_frequency_),
          reinterpret_cast<char*>(&other->report_frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_complete_stats_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_cell_stats_request::InitAsDefaultInstance() {
}
class flex_cell_stats_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_cell_stats_request>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_cell_stats_request::flex_cell_stats_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  cell_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_cell_stats_request)
}
flex_cell_stats_request::flex_cell_stats_request(const flex_cell_stats_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      cell_(from.cell_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_stats_request)
}

void flex_cell_stats_request::SharedCtor() {
  flags_ = 0u;
}

flex_cell_stats_request::~flex_cell_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_stats_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_cell_stats_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_cell_stats_request::ArenaDtor(void* object) {
  flex_cell_stats_request* _this = reinterpret_cast< flex_cell_stats_request* >(object);
  (void)_this;
}
void flex_cell_stats_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_cell_stats_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_cell_stats_request& flex_cell_stats_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_cell_stats_request_stats_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_cell_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_.Clear();
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_cell_stats_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_cell(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cell(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_cell_stats_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 cell = 1;
  for (int i = 0, n = this->_internal_cell_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_cell(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_stats_request)
  return target;
}

size_t flex_cell_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_stats_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cell = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->cell_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cell_size());
    total_size += data_size;
  }

  // optional uint32 flags = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_cell_stats_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_stats_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_cell_stats_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_stats_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_stats_request)
    MergeFrom(*source);
  }
}

void flex_cell_stats_request::MergeFrom(const flex_cell_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cell_.MergeFrom(from.cell_);
  if (from._internal_has_flags()) {
    _internal_set_flags(from._internal_flags());
  }
}

void flex_cell_stats_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_stats_request::CopyFrom(const flex_cell_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_stats_request::IsInitialized() const {
  return true;
}

void flex_cell_stats_request::InternalSwap(flex_cell_stats_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cell_.InternalSwap(&other->cell_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_cell_stats_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ue_stats_request::InitAsDefaultInstance() {
}
class flex_ue_stats_request::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ue_stats_request>()._has_bits_);
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

flex_ue_stats_request::flex_ue_stats_request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rnti_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ue_stats_request)
}
flex_ue_stats_request::flex_ue_stats_request(const flex_ue_stats_request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rnti_(from.rnti_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_stats_request)
}

void flex_ue_stats_request::SharedCtor() {
  flags_ = 0u;
}

flex_ue_stats_request::~flex_ue_stats_request() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_stats_request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ue_stats_request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_ue_stats_request::ArenaDtor(void* object) {
  flex_ue_stats_request* _this = reinterpret_cast< flex_ue_stats_request* >(object);
  (void)_this;
}
void flex_ue_stats_request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ue_stats_request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ue_stats_request& flex_ue_stats_request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ue_stats_request_stats_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_ue_stats_request::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rnti_.Clear();
  flags_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ue_stats_request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_rnti(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_rnti(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ue_stats_request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_stats_request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 rnti = 1;
  for (int i = 0, n = this->_internal_rnti_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_stats_request)
  return target;
}

size_t flex_ue_stats_request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_stats_request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 rnti = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->rnti_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_rnti_size());
    total_size += data_size;
  }

  // optional uint32 flags = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ue_stats_request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_stats_request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ue_stats_request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_stats_request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_stats_request)
    MergeFrom(*source);
  }
}

void flex_ue_stats_request::MergeFrom(const flex_ue_stats_request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_stats_request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rnti_.MergeFrom(from.rnti_);
  if (from._internal_has_flags()) {
    _internal_set_flags(from._internal_flags());
  }
}

void flex_ue_stats_request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_stats_request::CopyFrom(const flex_ue_stats_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_stats_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_stats_request::IsInitialized() const {
  return true;
}

void flex_ue_stats_request::InternalSwap(flex_ue_stats_request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rnti_.InternalSwap(&other->rnti_);
  swap(flags_, other->flags_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ue_stats_request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_cell_stats_report::InitAsDefaultInstance() {
  ::protocol::_flex_cell_stats_report_default_instance_._instance.get_mutable()->noise_inter_report_ = const_cast< ::protocol::flex_noise_interference_report*>(
      ::protocol::flex_noise_interference_report::internal_default_instance());
}
class flex_cell_stats_report::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_cell_stats_report>()._has_bits_);
  static void set_has_carrier_index(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_noise_interference_report& noise_inter_report(const flex_cell_stats_report* msg);
  static void set_has_noise_inter_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::protocol::flex_noise_interference_report&
flex_cell_stats_report::_Internal::noise_inter_report(const flex_cell_stats_report* msg) {
  return *msg->noise_inter_report_;
}
void flex_cell_stats_report::clear_noise_inter_report() {
  if (noise_inter_report_ != nullptr) noise_inter_report_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
flex_cell_stats_report::flex_cell_stats_report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_cell_stats_report)
}
flex_cell_stats_report::flex_cell_stats_report(const flex_cell_stats_report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_noise_inter_report()) {
    noise_inter_report_ = new ::protocol::flex_noise_interference_report(*from.noise_inter_report_);
  } else {
    noise_inter_report_ = nullptr;
  }
  ::memcpy(&carrier_index_, &from.carrier_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&carrier_index_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_cell_stats_report)
}

void flex_cell_stats_report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_cell_stats_report_stats_5fmessages_2eproto.base);
  ::memset(&noise_inter_report_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&noise_inter_report_)) + sizeof(flags_));
}

flex_cell_stats_report::~flex_cell_stats_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_cell_stats_report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_cell_stats_report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete noise_inter_report_;
}

void flex_cell_stats_report::ArenaDtor(void* object) {
  flex_cell_stats_report* _this = reinterpret_cast< flex_cell_stats_report* >(object);
  (void)_this;
}
void flex_cell_stats_report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_cell_stats_report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_cell_stats_report& flex_cell_stats_report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_cell_stats_report_stats_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_cell_stats_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_cell_stats_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(noise_inter_report_ != nullptr);
    noise_inter_report_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&carrier_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&carrier_index_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_cell_stats_report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 carrier_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_carrier_index(&has_bits);
          carrier_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_noise_inter_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_cell_stats_report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_cell_stats_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 carrier_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_carrier_index(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::noise_inter_report(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_cell_stats_report)
  return target;
}

size_t flex_cell_stats_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_cell_stats_report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .protocol.flex_noise_interference_report noise_inter_report = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *noise_inter_report_);
    }

    // optional uint32 carrier_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_carrier_index());
    }

    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_cell_stats_report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_cell_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_cell_stats_report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_cell_stats_report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_cell_stats_report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_cell_stats_report)
    MergeFrom(*source);
  }
}

void flex_cell_stats_report::MergeFrom(const flex_cell_stats_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_cell_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_noise_inter_report()->::protocol::flex_noise_interference_report::MergeFrom(from._internal_noise_inter_report());
    }
    if (cached_has_bits & 0x00000002u) {
      carrier_index_ = from.carrier_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_cell_stats_report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_cell_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_cell_stats_report::CopyFrom(const flex_cell_stats_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_cell_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_cell_stats_report::IsInitialized() const {
  return true;
}

void flex_cell_stats_report::InternalSwap(flex_cell_stats_report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_cell_stats_report, flags_)
      + sizeof(flex_cell_stats_report::flags_)
      - PROTOBUF_FIELD_OFFSET(flex_cell_stats_report, noise_inter_report_)>(
          reinterpret_cast<char*>(&noise_inter_report_),
          reinterpret_cast<char*>(&other->noise_inter_report_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_cell_stats_report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_ue_stats_report::InitAsDefaultInstance() {
  ::protocol::_flex_ue_stats_report_default_instance_._instance.get_mutable()->dl_cqi_report_ = const_cast< ::protocol::flex_dl_cqi_report*>(
      ::protocol::flex_dl_cqi_report::internal_default_instance());
  ::protocol::_flex_ue_stats_report_default_instance_._instance.get_mutable()->pbr_ = const_cast< ::protocol::flex_paging_buffer_report*>(
      ::protocol::flex_paging_buffer_report::internal_default_instance());
  ::protocol::_flex_ue_stats_report_default_instance_._instance.get_mutable()->ul_cqi_report_ = const_cast< ::protocol::flex_ul_cqi_report*>(
      ::protocol::flex_ul_cqi_report::internal_default_instance());
  ::protocol::_flex_ue_stats_report_default_instance_._instance.get_mutable()->rrc_measurements_ = const_cast< ::protocol::flex_rrc_measurements*>(
      ::protocol::flex_rrc_measurements::internal_default_instance());
  ::protocol::_flex_ue_stats_report_default_instance_._instance.get_mutable()->pdcp_stats_ = const_cast< ::protocol::flex_pdcp_stats*>(
      ::protocol::flex_pdcp_stats::internal_default_instance());
  ::protocol::_flex_ue_stats_report_default_instance_._instance.get_mutable()->mac_stats_ = const_cast< ::protocol::flex_mac_stats*>(
      ::protocol::flex_mac_stats::internal_default_instance());
  ::protocol::_flex_ue_stats_report_default_instance_._instance.get_mutable()->s1ap_stats_ = const_cast< ::protocol::flex_s1ap_ue*>(
      ::protocol::flex_s1ap_ue::internal_default_instance());
}
class flex_ue_stats_report::_Internal {
 public:
  using HasBits = decltype(std::declval<flex_ue_stats_report>()._has_bits_);
  static void set_has_rnti(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_phr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_pending_mac_ces(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::protocol::flex_dl_cqi_report& dl_cqi_report(const flex_ue_stats_report* msg);
  static void set_has_dl_cqi_report(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::protocol::flex_paging_buffer_report& pbr(const flex_ue_stats_report* msg);
  static void set_has_pbr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::protocol::flex_ul_cqi_report& ul_cqi_report(const flex_ue_stats_report* msg);
  static void set_has_ul_cqi_report(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::protocol::flex_rrc_measurements& rrc_measurements(const flex_ue_stats_report* msg);
  static void set_has_rrc_measurements(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::protocol::flex_pdcp_stats& pdcp_stats(const flex_ue_stats_report* msg);
  static void set_has_pdcp_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::protocol::flex_mac_stats& mac_stats(const flex_ue_stats_report* msg);
  static void set_has_mac_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::protocol::flex_s1ap_ue& s1ap_stats(const flex_ue_stats_report* msg);
  static void set_has_s1ap_stats(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::protocol::flex_dl_cqi_report&
flex_ue_stats_report::_Internal::dl_cqi_report(const flex_ue_stats_report* msg) {
  return *msg->dl_cqi_report_;
}
const ::protocol::flex_paging_buffer_report&
flex_ue_stats_report::_Internal::pbr(const flex_ue_stats_report* msg) {
  return *msg->pbr_;
}
const ::protocol::flex_ul_cqi_report&
flex_ue_stats_report::_Internal::ul_cqi_report(const flex_ue_stats_report* msg) {
  return *msg->ul_cqi_report_;
}
const ::protocol::flex_rrc_measurements&
flex_ue_stats_report::_Internal::rrc_measurements(const flex_ue_stats_report* msg) {
  return *msg->rrc_measurements_;
}
const ::protocol::flex_pdcp_stats&
flex_ue_stats_report::_Internal::pdcp_stats(const flex_ue_stats_report* msg) {
  return *msg->pdcp_stats_;
}
const ::protocol::flex_mac_stats&
flex_ue_stats_report::_Internal::mac_stats(const flex_ue_stats_report* msg) {
  return *msg->mac_stats_;
}
const ::protocol::flex_s1ap_ue&
flex_ue_stats_report::_Internal::s1ap_stats(const flex_ue_stats_report* msg) {
  return *msg->s1ap_stats_;
}
void flex_ue_stats_report::clear_rlc_report() {
  rlc_report_.Clear();
}
void flex_ue_stats_report::clear_dl_cqi_report() {
  if (dl_cqi_report_ != nullptr) dl_cqi_report_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void flex_ue_stats_report::clear_pbr() {
  if (pbr_ != nullptr) pbr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void flex_ue_stats_report::clear_ul_cqi_report() {
  if (ul_cqi_report_ != nullptr) ul_cqi_report_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void flex_ue_stats_report::clear_rrc_measurements() {
  if (rrc_measurements_ != nullptr) rrc_measurements_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void flex_ue_stats_report::clear_pdcp_stats() {
  if (pdcp_stats_ != nullptr) pdcp_stats_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void flex_ue_stats_report::clear_mac_stats() {
  if (mac_stats_ != nullptr) mac_stats_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void flex_ue_stats_report::clear_gtp_stats() {
  gtp_stats_.Clear();
}
void flex_ue_stats_report::clear_s1ap_stats() {
  if (s1ap_stats_ != nullptr) s1ap_stats_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
flex_ue_stats_report::flex_ue_stats_report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bsr_(arena),
  rlc_report_(arena),
  gtp_stats_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_ue_stats_report)
}
flex_ue_stats_report::flex_ue_stats_report(const flex_ue_stats_report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bsr_(from.bsr_),
      rlc_report_(from.rlc_report_),
      gtp_stats_(from.gtp_stats_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dl_cqi_report()) {
    dl_cqi_report_ = new ::protocol::flex_dl_cqi_report(*from.dl_cqi_report_);
  } else {
    dl_cqi_report_ = nullptr;
  }
  if (from._internal_has_pbr()) {
    pbr_ = new ::protocol::flex_paging_buffer_report(*from.pbr_);
  } else {
    pbr_ = nullptr;
  }
  if (from._internal_has_ul_cqi_report()) {
    ul_cqi_report_ = new ::protocol::flex_ul_cqi_report(*from.ul_cqi_report_);
  } else {
    ul_cqi_report_ = nullptr;
  }
  if (from._internal_has_rrc_measurements()) {
    rrc_measurements_ = new ::protocol::flex_rrc_measurements(*from.rrc_measurements_);
  } else {
    rrc_measurements_ = nullptr;
  }
  if (from._internal_has_pdcp_stats()) {
    pdcp_stats_ = new ::protocol::flex_pdcp_stats(*from.pdcp_stats_);
  } else {
    pdcp_stats_ = nullptr;
  }
  if (from._internal_has_mac_stats()) {
    mac_stats_ = new ::protocol::flex_mac_stats(*from.mac_stats_);
  } else {
    mac_stats_ = nullptr;
  }
  if (from._internal_has_s1ap_stats()) {
    s1ap_stats_ = new ::protocol::flex_s1ap_ue(*from.s1ap_stats_);
  } else {
    s1ap_stats_ = nullptr;
  }
  ::memcpy(&rnti_, &from.rnti_,
    static_cast<size_t>(reinterpret_cast<char*>(&pending_mac_ces_) -
    reinterpret_cast<char*>(&rnti_)) + sizeof(pending_mac_ces_));
  // @@protoc_insertion_point(copy_constructor:protocol.flex_ue_stats_report)
}

void flex_ue_stats_report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_ue_stats_report_stats_5fmessages_2eproto.base);
  ::memset(&dl_cqi_report_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pending_mac_ces_) -
      reinterpret_cast<char*>(&dl_cqi_report_)) + sizeof(pending_mac_ces_));
}

flex_ue_stats_report::~flex_ue_stats_report() {
  // @@protoc_insertion_point(destructor:protocol.flex_ue_stats_report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_ue_stats_report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dl_cqi_report_;
  if (this != internal_default_instance()) delete pbr_;
  if (this != internal_default_instance()) delete ul_cqi_report_;
  if (this != internal_default_instance()) delete rrc_measurements_;
  if (this != internal_default_instance()) delete pdcp_stats_;
  if (this != internal_default_instance()) delete mac_stats_;
  if (this != internal_default_instance()) delete s1ap_stats_;
}

void flex_ue_stats_report::ArenaDtor(void* object) {
  flex_ue_stats_report* _this = reinterpret_cast< flex_ue_stats_report* >(object);
  (void)_this;
}
void flex_ue_stats_report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_ue_stats_report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_ue_stats_report& flex_ue_stats_report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_ue_stats_report_stats_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_ue_stats_report::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_ue_stats_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bsr_.Clear();
  rlc_report_.Clear();
  gtp_stats_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dl_cqi_report_ != nullptr);
      dl_cqi_report_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pbr_ != nullptr);
      pbr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ul_cqi_report_ != nullptr);
      ul_cqi_report_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rrc_measurements_ != nullptr);
      rrc_measurements_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(pdcp_stats_ != nullptr);
      pdcp_stats_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(mac_stats_ != nullptr);
      mac_stats_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(s1ap_stats_ != nullptr);
      s1ap_stats_->Clear();
    }
  }
  rnti_ = 0u;
  if (cached_has_bits & 0x00000700u) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pending_mac_ces_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(pending_mac_ces_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_ue_stats_report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint32 rnti = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rnti(&has_bits);
          rnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 bsr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_bsr(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_bsr(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 phr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_phr(&has_bits);
          phr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_rlc_bsr rlc_report = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rlc_report(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 pending_mac_ces = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_pending_mac_ces(&has_bits);
          pending_mac_ces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_dl_cqi_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_paging_buffer_report pbr = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_pbr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ul_cqi_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_rrc_measurements(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pdcp_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_mac_stats mac_stats = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_mac_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protocol.flex_gtp_stats gtp_stats = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gtp_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_s1ap_stats(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_ue_stats_report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_ue_stats_report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 rnti = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rnti(), target);
  }

  // optional uint32 flags = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_flags(), target);
  }

  // repeated uint32 bsr = 3;
  for (int i = 0, n = this->_internal_bsr_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_bsr(i), target);
  }

  // optional uint32 phr = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_phr(), target);
  }

  // repeated .protocol.flex_rlc_bsr rlc_report = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rlc_report_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_rlc_report(i), target, stream);
  }

  // optional uint32 pending_mac_ces = 6;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pending_mac_ces(), target);
  }

  // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::dl_cqi_report(this), target, stream);
  }

  // optional .protocol.flex_paging_buffer_report pbr = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::pbr(this), target, stream);
  }

  // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ul_cqi_report(this), target, stream);
  }

  // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::rrc_measurements(this), target, stream);
  }

  // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::pdcp_stats(this), target, stream);
  }

  // optional .protocol.flex_mac_stats mac_stats = 12;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::mac_stats(this), target, stream);
  }

  // repeated .protocol.flex_gtp_stats gtp_stats = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_gtp_stats_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_gtp_stats(i), target, stream);
  }

  // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::s1ap_stats(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_ue_stats_report)
  return target;
}

size_t flex_ue_stats_report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_ue_stats_report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 bsr = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->bsr_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bsr_size());
    total_size += data_size;
  }

  // repeated .protocol.flex_rlc_bsr rlc_report = 5;
  total_size += 1UL * this->_internal_rlc_report_size();
  for (const auto& msg : this->rlc_report_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .protocol.flex_gtp_stats gtp_stats = 13;
  total_size += 1UL * this->_internal_gtp_stats_size();
  for (const auto& msg : this->gtp_stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .protocol.flex_dl_cqi_report dl_cqi_report = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dl_cqi_report_);
    }

    // optional .protocol.flex_paging_buffer_report pbr = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pbr_);
    }

    // optional .protocol.flex_ul_cqi_report ul_cqi_report = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ul_cqi_report_);
    }

    // optional .protocol.flex_rrc_measurements rrc_measurements = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rrc_measurements_);
    }

    // optional .protocol.flex_pdcp_stats pdcp_stats = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pdcp_stats_);
    }

    // optional .protocol.flex_mac_stats mac_stats = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *mac_stats_);
    }

    // optional .protocol.flex_s1ap_ue s1ap_stats = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *s1ap_stats_);
    }

    // optional uint32 rnti = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_rnti());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 flags = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flags());
    }

    // optional uint32 phr = 4;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_phr());
    }

    // optional uint32 pending_mac_ces = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pending_mac_ces());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_ue_stats_report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_ue_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_ue_stats_report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_ue_stats_report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_ue_stats_report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_ue_stats_report)
    MergeFrom(*source);
  }
}

void flex_ue_stats_report::MergeFrom(const flex_ue_stats_report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_ue_stats_report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bsr_.MergeFrom(from.bsr_);
  rlc_report_.MergeFrom(from.rlc_report_);
  gtp_stats_.MergeFrom(from.gtp_stats_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_dl_cqi_report()->::protocol::flex_dl_cqi_report::MergeFrom(from._internal_dl_cqi_report());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_pbr()->::protocol::flex_paging_buffer_report::MergeFrom(from._internal_pbr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_ul_cqi_report()->::protocol::flex_ul_cqi_report::MergeFrom(from._internal_ul_cqi_report());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rrc_measurements()->::protocol::flex_rrc_measurements::MergeFrom(from._internal_rrc_measurements());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_pdcp_stats()->::protocol::flex_pdcp_stats::MergeFrom(from._internal_pdcp_stats());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_mac_stats()->::protocol::flex_mac_stats::MergeFrom(from._internal_mac_stats());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_s1ap_stats()->::protocol::flex_s1ap_ue::MergeFrom(from._internal_s1ap_stats());
    }
    if (cached_has_bits & 0x00000080u) {
      rnti_ = from.rnti_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000200u) {
      phr_ = from.phr_;
    }
    if (cached_has_bits & 0x00000400u) {
      pending_mac_ces_ = from.pending_mac_ces_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void flex_ue_stats_report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_ue_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_ue_stats_report::CopyFrom(const flex_ue_stats_report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_ue_stats_report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_ue_stats_report::IsInitialized() const {
  return true;
}

void flex_ue_stats_report::InternalSwap(flex_ue_stats_report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bsr_.InternalSwap(&other->bsr_);
  rlc_report_.InternalSwap(&other->rlc_report_);
  gtp_stats_.InternalSwap(&other->gtp_stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(flex_ue_stats_report, pending_mac_ces_)
      + sizeof(flex_ue_stats_report::pending_mac_ces_)
      - PROTOBUF_FIELD_OFFSET(flex_ue_stats_report, dl_cqi_report_)>(
          reinterpret_cast<char*>(&dl_cqi_report_),
          reinterpret_cast<char*>(&other->dl_cqi_report_));
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_ue_stats_report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void flex_complete_stats_request_repeated::InitAsDefaultInstance() {
}
class flex_complete_stats_request_repeated::_Internal {
 public:
};

flex_complete_stats_request_repeated::flex_complete_stats_request_repeated(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:protocol.flex_complete_stats_request_repeated)
}
flex_complete_stats_request_repeated::flex_complete_stats_request_repeated(const flex_complete_stats_request_repeated& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protocol.flex_complete_stats_request_repeated)
}

void flex_complete_stats_request_repeated::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_flex_complete_stats_request_repeated_stats_5fmessages_2eproto.base);
}

flex_complete_stats_request_repeated::~flex_complete_stats_request_repeated() {
  // @@protoc_insertion_point(destructor:protocol.flex_complete_stats_request_repeated)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void flex_complete_stats_request_repeated::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void flex_complete_stats_request_repeated::ArenaDtor(void* object) {
  flex_complete_stats_request_repeated* _this = reinterpret_cast< flex_complete_stats_request_repeated* >(object);
  (void)_this;
}
void flex_complete_stats_request_repeated::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void flex_complete_stats_request_repeated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const flex_complete_stats_request_repeated& flex_complete_stats_request_repeated::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_flex_complete_stats_request_repeated_stats_5fmessages_2eproto.base);
  return *internal_default_instance();
}


void flex_complete_stats_request_repeated::Clear() {
// @@protoc_insertion_point(message_clear_start:protocol.flex_complete_stats_request_repeated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* flex_complete_stats_request_repeated::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .protocol.flex_complete_stats_request reports = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* flex_complete_stats_request_repeated::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protocol.flex_complete_stats_request_repeated)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protocol.flex_complete_stats_request reports = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reports(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protocol.flex_complete_stats_request_repeated)
  return target;
}

size_t flex_complete_stats_request_repeated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protocol.flex_complete_stats_request_repeated)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protocol.flex_complete_stats_request reports = 1;
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void flex_complete_stats_request_repeated::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protocol.flex_complete_stats_request_repeated)
  GOOGLE_DCHECK_NE(&from, this);
  const flex_complete_stats_request_repeated* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<flex_complete_stats_request_repeated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protocol.flex_complete_stats_request_repeated)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protocol.flex_complete_stats_request_repeated)
    MergeFrom(*source);
  }
}

void flex_complete_stats_request_repeated::MergeFrom(const flex_complete_stats_request_repeated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protocol.flex_complete_stats_request_repeated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
}

void flex_complete_stats_request_repeated::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protocol.flex_complete_stats_request_repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void flex_complete_stats_request_repeated::CopyFrom(const flex_complete_stats_request_repeated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protocol.flex_complete_stats_request_repeated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool flex_complete_stats_request_repeated::IsInitialized() const {
  return true;
}

void flex_complete_stats_request_repeated::InternalSwap(flex_complete_stats_request_repeated* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reports_.InternalSwap(&other->reports_);
}

::PROTOBUF_NAMESPACE_ID::Metadata flex_complete_stats_request_repeated::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protocol::flex_complete_stats_request* Arena::CreateMaybeMessage< ::protocol::flex_complete_stats_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_complete_stats_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_cell_stats_request* Arena::CreateMaybeMessage< ::protocol::flex_cell_stats_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_cell_stats_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ue_stats_request* Arena::CreateMaybeMessage< ::protocol::flex_ue_stats_request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ue_stats_request >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_cell_stats_report* Arena::CreateMaybeMessage< ::protocol::flex_cell_stats_report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_cell_stats_report >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_ue_stats_report* Arena::CreateMaybeMessage< ::protocol::flex_ue_stats_report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_ue_stats_report >(arena);
}
template<> PROTOBUF_NOINLINE ::protocol::flex_complete_stats_request_repeated* Arena::CreateMaybeMessage< ::protocol::flex_complete_stats_request_repeated >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protocol::flex_complete_stats_request_repeated >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
