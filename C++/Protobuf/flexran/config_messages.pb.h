// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "config_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_5fmessages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fmessages_2eproto;
namespace protocol {
class flex_cell_config;
class flex_cell_configDefaultTypeInternal;
extern flex_cell_configDefaultTypeInternal _flex_cell_config_default_instance_;
class flex_lc_ue_config;
class flex_lc_ue_configDefaultTypeInternal;
extern flex_lc_ue_configDefaultTypeInternal _flex_lc_ue_config_default_instance_;
class flex_s1ap_config;
class flex_s1ap_configDefaultTypeInternal;
extern flex_s1ap_configDefaultTypeInternal _flex_s1ap_config_default_instance_;
class flex_slice_config;
class flex_slice_configDefaultTypeInternal;
extern flex_slice_configDefaultTypeInternal _flex_slice_config_default_instance_;
class flex_ue_config;
class flex_ue_configDefaultTypeInternal;
extern flex_ue_configDefaultTypeInternal _flex_ue_config_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::flex_cell_config* Arena::CreateMaybeMessage<::protocol::flex_cell_config>(Arena*);
template<> ::protocol::flex_lc_ue_config* Arena::CreateMaybeMessage<::protocol::flex_lc_ue_config>(Arena*);
template<> ::protocol::flex_s1ap_config* Arena::CreateMaybeMessage<::protocol::flex_s1ap_config>(Arena*);
template<> ::protocol::flex_slice_config* Arena::CreateMaybeMessage<::protocol::flex_slice_config>(Arena*);
template<> ::protocol::flex_ue_config* Arena::CreateMaybeMessage<::protocol::flex_ue_config>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class flex_cell_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_cell_config) */ {
 public:
  inline flex_cell_config() : flex_cell_config(nullptr) {}
  virtual ~flex_cell_config();

  flex_cell_config(const flex_cell_config& from);
  flex_cell_config(flex_cell_config&& from) noexcept
    : flex_cell_config() {
    *this = ::std::move(from);
  }

  inline flex_cell_config& operator=(const flex_cell_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_cell_config& operator=(flex_cell_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_cell_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_cell_config* internal_default_instance() {
    return reinterpret_cast<const flex_cell_config*>(
               &_flex_cell_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(flex_cell_config& a, flex_cell_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_cell_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_cell_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_cell_config* New() const final {
    return CreateMaybeMessage<flex_cell_config>(nullptr);
  }

  flex_cell_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_cell_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_cell_config& from);
  void MergeFrom(const flex_cell_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_cell_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_cell_config";
  }
  protected:
  explicit flex_cell_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessages_2eproto);
    return ::descriptor_table_config_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMbsfnSubframeConfigRfperiodFieldNumber = 19,
    kMbsfnSubframeConfigRfoffsetFieldNumber = 20,
    kMbsfnSubframeConfigSfallocFieldNumber = 21,
    kPlmnIdFieldNumber = 40,
    kSiConfigFieldNumber = 9,
    kSliceConfigFieldNumber = 42,
    kPhyCellIdFieldNumber = 1,
    kPuschHoppingOffsetFieldNumber = 3,
    kHoppingModeFieldNumber = 4,
    kNSbFieldNumber = 5,
    kPhichResourceFieldNumber = 6,
    kPhichDurationFieldNumber = 7,
    kInitNrPDCCHOFDMSymFieldNumber = 8,
    kDlBandwidthFieldNumber = 10,
    kUlBandwidthFieldNumber = 11,
    kUlCyclicPrefixLengthFieldNumber = 13,
    kDlCyclicPrefixLengthFieldNumber = 14,
    kAntennaPortsCountFieldNumber = 15,
    kDuplexModeFieldNumber = 16,
    kSubframeAssignmentFieldNumber = 17,
    kSpecialSubframePatternsFieldNumber = 18,
    kPrachConfigIndexFieldNumber = 22,
    kPrachFreqOffsetFieldNumber = 23,
    kRaResponseWindowSizeFieldNumber = 24,
    kMacContentionResolutionTimerFieldNumber = 25,
    kMaxHARQMsg3TxFieldNumber = 26,
    kN1PUCCHANFieldNumber = 27,
    kDeltaPUCCHShiftFieldNumber = 28,
    kNRBCqiFieldNumber = 29,
    kSrsSubframeConfigFieldNumber = 30,
    kSrsBwConfigFieldNumber = 31,
    kSrsMacUpPtsFieldNumber = 32,
    kEnable64QAMFieldNumber = 33,
    kCarrierIndexFieldNumber = 34,
    kDlFreqFieldNumber = 35,
    kUlFreqFieldNumber = 36,
    kEutraBandFieldNumber = 37,
    kDlPdschPowerFieldNumber = 38,
    kUlPuschPowerFieldNumber = 39,
    kX2HoNetControlFieldNumber = 43,
  };
  // repeated uint32 mbsfn_subframe_config_rfperiod = 19;
  int mbsfn_subframe_config_rfperiod_size() const;
  private:
  int _internal_mbsfn_subframe_config_rfperiod_size() const;
  public:
  void clear_mbsfn_subframe_config_rfperiod();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mbsfn_subframe_config_rfperiod(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_mbsfn_subframe_config_rfperiod() const;
  void _internal_add_mbsfn_subframe_config_rfperiod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_mbsfn_subframe_config_rfperiod();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_subframe_config_rfperiod(int index) const;
  void set_mbsfn_subframe_config_rfperiod(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_mbsfn_subframe_config_rfperiod(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      mbsfn_subframe_config_rfperiod() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_mbsfn_subframe_config_rfperiod();

  // repeated uint32 mbsfn_subframe_config_rfoffset = 20;
  int mbsfn_subframe_config_rfoffset_size() const;
  private:
  int _internal_mbsfn_subframe_config_rfoffset_size() const;
  public:
  void clear_mbsfn_subframe_config_rfoffset();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mbsfn_subframe_config_rfoffset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_mbsfn_subframe_config_rfoffset() const;
  void _internal_add_mbsfn_subframe_config_rfoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_mbsfn_subframe_config_rfoffset();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_subframe_config_rfoffset(int index) const;
  void set_mbsfn_subframe_config_rfoffset(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_mbsfn_subframe_config_rfoffset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      mbsfn_subframe_config_rfoffset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_mbsfn_subframe_config_rfoffset();

  // repeated uint32 mbsfn_subframe_config_sfalloc = 21;
  int mbsfn_subframe_config_sfalloc_size() const;
  private:
  int _internal_mbsfn_subframe_config_sfalloc_size() const;
  public:
  void clear_mbsfn_subframe_config_sfalloc();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mbsfn_subframe_config_sfalloc(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_mbsfn_subframe_config_sfalloc() const;
  void _internal_add_mbsfn_subframe_config_sfalloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_mbsfn_subframe_config_sfalloc();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 mbsfn_subframe_config_sfalloc(int index) const;
  void set_mbsfn_subframe_config_sfalloc(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_mbsfn_subframe_config_sfalloc(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      mbsfn_subframe_config_sfalloc() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_mbsfn_subframe_config_sfalloc();

  // repeated .protocol.flex_plmn plmn_id = 40;
  int plmn_id_size() const;
  private:
  int _internal_plmn_id_size() const;
  public:
  void clear_plmn_id();
  ::protocol::flex_plmn* mutable_plmn_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >*
      mutable_plmn_id();
  private:
  const ::protocol::flex_plmn& _internal_plmn_id(int index) const;
  ::protocol::flex_plmn* _internal_add_plmn_id();
  public:
  const ::protocol::flex_plmn& plmn_id(int index) const;
  ::protocol::flex_plmn* add_plmn_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >&
      plmn_id() const;

  // optional .protocol.flex_si_config si_config = 9;
  bool has_si_config() const;
  private:
  bool _internal_has_si_config() const;
  public:
  void clear_si_config();
  const ::protocol::flex_si_config& si_config() const;
  ::protocol::flex_si_config* release_si_config();
  ::protocol::flex_si_config* mutable_si_config();
  void set_allocated_si_config(::protocol::flex_si_config* si_config);
  private:
  const ::protocol::flex_si_config& _internal_si_config() const;
  ::protocol::flex_si_config* _internal_mutable_si_config();
  public:
  void unsafe_arena_set_allocated_si_config(
      ::protocol::flex_si_config* si_config);
  ::protocol::flex_si_config* unsafe_arena_release_si_config();

  // optional .protocol.flex_slice_config slice_config = 42;
  bool has_slice_config() const;
  private:
  bool _internal_has_slice_config() const;
  public:
  void clear_slice_config();
  const ::protocol::flex_slice_config& slice_config() const;
  ::protocol::flex_slice_config* release_slice_config();
  ::protocol::flex_slice_config* mutable_slice_config();
  void set_allocated_slice_config(::protocol::flex_slice_config* slice_config);
  private:
  const ::protocol::flex_slice_config& _internal_slice_config() const;
  ::protocol::flex_slice_config* _internal_mutable_slice_config();
  public:
  void unsafe_arena_set_allocated_slice_config(
      ::protocol::flex_slice_config* slice_config);
  ::protocol::flex_slice_config* unsafe_arena_release_slice_config();

  // optional uint32 phy_cell_id = 1;
  bool has_phy_cell_id() const;
  private:
  bool _internal_has_phy_cell_id() const;
  public:
  void clear_phy_cell_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 phy_cell_id() const;
  void set_phy_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phy_cell_id() const;
  void _internal_set_phy_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pusch_hopping_offset = 3;
  bool has_pusch_hopping_offset() const;
  private:
  bool _internal_has_pusch_hopping_offset() const;
  public:
  void clear_pusch_hopping_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 pusch_hopping_offset() const;
  void set_pusch_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pusch_hopping_offset() const;
  void _internal_set_pusch_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hopping_mode = 4;
  bool has_hopping_mode() const;
  private:
  bool _internal_has_hopping_mode() const;
  public:
  void clear_hopping_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 hopping_mode() const;
  void set_hopping_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hopping_mode() const;
  void _internal_set_hopping_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 n_sb = 5;
  bool has_n_sb() const;
  private:
  bool _internal_has_n_sb() const;
  public:
  void clear_n_sb();
  ::PROTOBUF_NAMESPACE_ID::uint32 n_sb() const;
  void set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n_sb() const;
  void _internal_set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 phich_resource = 6;
  bool has_phich_resource() const;
  private:
  bool _internal_has_phich_resource() const;
  public:
  void clear_phich_resource();
  ::PROTOBUF_NAMESPACE_ID::uint32 phich_resource() const;
  void set_phich_resource(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phich_resource() const;
  void _internal_set_phich_resource(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 phich_duration = 7;
  bool has_phich_duration() const;
  private:
  bool _internal_has_phich_duration() const;
  public:
  void clear_phich_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 phich_duration() const;
  void set_phich_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_phich_duration() const;
  void _internal_set_phich_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 init_nr_PDCCH_OFDM_sym = 8;
  bool has_init_nr_pdcch_ofdm_sym() const;
  private:
  bool _internal_has_init_nr_pdcch_ofdm_sym() const;
  public:
  void clear_init_nr_pdcch_ofdm_sym();
  ::PROTOBUF_NAMESPACE_ID::uint32 init_nr_pdcch_ofdm_sym() const;
  void set_init_nr_pdcch_ofdm_sym(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_init_nr_pdcch_ofdm_sym() const;
  void _internal_set_init_nr_pdcch_ofdm_sym(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dl_bandwidth = 10;
  bool has_dl_bandwidth() const;
  private:
  bool _internal_has_dl_bandwidth() const;
  public:
  void clear_dl_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_bandwidth() const;
  void set_dl_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dl_bandwidth() const;
  void _internal_set_dl_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ul_bandwidth = 11;
  bool has_ul_bandwidth() const;
  private:
  bool _internal_has_ul_bandwidth() const;
  public:
  void clear_ul_bandwidth();
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_bandwidth() const;
  void set_ul_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ul_bandwidth() const;
  void _internal_set_ul_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ul_cyclic_prefix_length = 13;
  bool has_ul_cyclic_prefix_length() const;
  private:
  bool _internal_has_ul_cyclic_prefix_length() const;
  public:
  void clear_ul_cyclic_prefix_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_cyclic_prefix_length() const;
  void set_ul_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ul_cyclic_prefix_length() const;
  void _internal_set_ul_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dl_cyclic_prefix_length = 14;
  bool has_dl_cyclic_prefix_length() const;
  private:
  bool _internal_has_dl_cyclic_prefix_length() const;
  public:
  void clear_dl_cyclic_prefix_length();
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_cyclic_prefix_length() const;
  void set_dl_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dl_cyclic_prefix_length() const;
  void _internal_set_dl_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 antenna_ports_count = 15;
  bool has_antenna_ports_count() const;
  private:
  bool _internal_has_antenna_ports_count() const;
  public:
  void clear_antenna_ports_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_ports_count() const;
  void set_antenna_ports_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_antenna_ports_count() const;
  void _internal_set_antenna_ports_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 duplex_mode = 16;
  bool has_duplex_mode() const;
  private:
  bool _internal_has_duplex_mode() const;
  public:
  void clear_duplex_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 duplex_mode() const;
  void set_duplex_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duplex_mode() const;
  void _internal_set_duplex_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 subframe_assignment = 17;
  bool has_subframe_assignment() const;
  private:
  bool _internal_has_subframe_assignment() const;
  public:
  void clear_subframe_assignment();
  ::PROTOBUF_NAMESPACE_ID::uint32 subframe_assignment() const;
  void set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_subframe_assignment() const;
  void _internal_set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 special_subframe_patterns = 18;
  bool has_special_subframe_patterns() const;
  private:
  bool _internal_has_special_subframe_patterns() const;
  public:
  void clear_special_subframe_patterns();
  ::PROTOBUF_NAMESPACE_ID::uint32 special_subframe_patterns() const;
  void set_special_subframe_patterns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_special_subframe_patterns() const;
  void _internal_set_special_subframe_patterns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 prach_config_index = 22;
  bool has_prach_config_index() const;
  private:
  bool _internal_has_prach_config_index() const;
  public:
  void clear_prach_config_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_config_index() const;
  void set_prach_config_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_config_index() const;
  void _internal_set_prach_config_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 prach_freq_offset = 23;
  bool has_prach_freq_offset() const;
  private:
  bool _internal_has_prach_freq_offset() const;
  public:
  void clear_prach_freq_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_freq_offset() const;
  void set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_prach_freq_offset() const;
  void _internal_set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ra_response_window_size = 24;
  bool has_ra_response_window_size() const;
  private:
  bool _internal_has_ra_response_window_size() const;
  public:
  void clear_ra_response_window_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 ra_response_window_size() const;
  void set_ra_response_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ra_response_window_size() const;
  void _internal_set_ra_response_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 mac_contention_resolution_timer = 25;
  bool has_mac_contention_resolution_timer() const;
  private:
  bool _internal_has_mac_contention_resolution_timer() const;
  public:
  void clear_mac_contention_resolution_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 mac_contention_resolution_timer() const;
  void set_mac_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mac_contention_resolution_timer() const;
  void _internal_set_mac_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_HARQ_Msg3Tx = 26;
  bool has_max_harq_msg3tx() const;
  private:
  bool _internal_has_max_harq_msg3tx() const;
  public:
  void clear_max_harq_msg3tx();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_harq_msg3tx() const;
  void set_max_harq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_harq_msg3tx() const;
  void _internal_set_max_harq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 n1PUCCH_AN = 27;
  bool has_n1pucch_an() const;
  private:
  bool _internal_has_n1pucch_an() const;
  public:
  void clear_n1pucch_an();
  ::PROTOBUF_NAMESPACE_ID::uint32 n1pucch_an() const;
  void set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_n1pucch_an() const;
  void _internal_set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 deltaPUCCH_shift = 28;
  bool has_deltapucch_shift() const;
  private:
  bool _internal_has_deltapucch_shift() const;
  public:
  void clear_deltapucch_shift();
  ::PROTOBUF_NAMESPACE_ID::uint32 deltapucch_shift() const;
  void set_deltapucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deltapucch_shift() const;
  void _internal_set_deltapucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 nRB_cqi = 29;
  bool has_nrb_cqi() const;
  private:
  bool _internal_has_nrb_cqi() const;
  public:
  void clear_nrb_cqi();
  ::PROTOBUF_NAMESPACE_ID::uint32 nrb_cqi() const;
  void set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nrb_cqi() const;
  void _internal_set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 srs_subframe_config = 30;
  bool has_srs_subframe_config() const;
  private:
  bool _internal_has_srs_subframe_config() const;
  public:
  void clear_srs_subframe_config();
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_subframe_config() const;
  void set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srs_subframe_config() const;
  void _internal_set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 srs_bw_config = 31;
  bool has_srs_bw_config() const;
  private:
  bool _internal_has_srs_bw_config() const;
  public:
  void clear_srs_bw_config();
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_bw_config() const;
  void set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srs_bw_config() const;
  void _internal_set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 srs_mac_up_pts = 32;
  bool has_srs_mac_up_pts() const;
  private:
  bool _internal_has_srs_mac_up_pts() const;
  public:
  void clear_srs_mac_up_pts();
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_mac_up_pts() const;
  void set_srs_mac_up_pts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_srs_mac_up_pts() const;
  void _internal_set_srs_mac_up_pts(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 enable_64QAM = 33;
  bool has_enable_64qam() const;
  private:
  bool _internal_has_enable_64qam() const;
  public:
  void clear_enable_64qam();
  ::PROTOBUF_NAMESPACE_ID::uint32 enable_64qam() const;
  void set_enable_64qam(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_enable_64qam() const;
  void _internal_set_enable_64qam(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 carrier_index = 34;
  bool has_carrier_index() const;
  private:
  bool _internal_has_carrier_index() const;
  public:
  void clear_carrier_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index() const;
  void set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_carrier_index() const;
  void _internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dl_freq = 35;
  bool has_dl_freq() const;
  private:
  bool _internal_has_dl_freq() const;
  public:
  void clear_dl_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_freq() const;
  void set_dl_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dl_freq() const;
  void _internal_set_dl_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ul_freq = 36;
  bool has_ul_freq() const;
  private:
  bool _internal_has_ul_freq() const;
  public:
  void clear_ul_freq();
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_freq() const;
  void set_ul_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ul_freq() const;
  void _internal_set_ul_freq(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 eutra_band = 37;
  bool has_eutra_band() const;
  private:
  bool _internal_has_eutra_band() const;
  public:
  void clear_eutra_band();
  ::PROTOBUF_NAMESPACE_ID::uint32 eutra_band() const;
  void set_eutra_band(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_eutra_band() const;
  void _internal_set_eutra_band(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 dl_pdsch_power = 38;
  bool has_dl_pdsch_power() const;
  private:
  bool _internal_has_dl_pdsch_power() const;
  public:
  void clear_dl_pdsch_power();
  ::PROTOBUF_NAMESPACE_ID::int32 dl_pdsch_power() const;
  void set_dl_pdsch_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dl_pdsch_power() const;
  void _internal_set_dl_pdsch_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 ul_pusch_power = 39;
  bool has_ul_pusch_power() const;
  private:
  bool _internal_has_ul_pusch_power() const;
  public:
  void clear_ul_pusch_power();
  ::PROTOBUF_NAMESPACE_ID::int32 ul_pusch_power() const;
  void set_ul_pusch_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ul_pusch_power() const;
  void _internal_set_ul_pusch_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool x2_ho_net_control = 43;
  bool has_x2_ho_net_control() const;
  private:
  bool _internal_has_x2_ho_net_control() const;
  public:
  void clear_x2_ho_net_control();
  bool x2_ho_net_control() const;
  void set_x2_ho_net_control(bool value);
  private:
  bool _internal_x2_ho_net_control() const;
  void _internal_set_x2_ho_net_control(bool value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_cell_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > mbsfn_subframe_config_rfperiod_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > mbsfn_subframe_config_rfoffset_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > mbsfn_subframe_config_sfalloc_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn > plmn_id_;
  ::protocol::flex_si_config* si_config_;
  ::protocol::flex_slice_config* slice_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phy_cell_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pusch_hopping_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hopping_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n_sb_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phich_resource_;
  ::PROTOBUF_NAMESPACE_ID::uint32 phich_duration_;
  ::PROTOBUF_NAMESPACE_ID::uint32 init_nr_pdcch_ofdm_sym_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_bandwidth_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_cyclic_prefix_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_cyclic_prefix_length_;
  ::PROTOBUF_NAMESPACE_ID::uint32 antenna_ports_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duplex_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 subframe_assignment_;
  ::PROTOBUF_NAMESPACE_ID::uint32 special_subframe_patterns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_config_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prach_freq_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ra_response_window_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mac_contention_resolution_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_harq_msg3tx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 n1pucch_an_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deltapucch_shift_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nrb_cqi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_subframe_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_bw_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 srs_mac_up_pts_;
  ::PROTOBUF_NAMESPACE_ID::uint32 enable_64qam_;
  ::PROTOBUF_NAMESPACE_ID::uint32 carrier_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_freq_;
  ::PROTOBUF_NAMESPACE_ID::uint32 eutra_band_;
  ::PROTOBUF_NAMESPACE_ID::int32 dl_pdsch_power_;
  ::PROTOBUF_NAMESPACE_ID::int32 ul_pusch_power_;
  bool x2_ho_net_control_;
  friend struct ::TableStruct_config_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_slice_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_slice_config) */ {
 public:
  inline flex_slice_config() : flex_slice_config(nullptr) {}
  virtual ~flex_slice_config();

  flex_slice_config(const flex_slice_config& from);
  flex_slice_config(flex_slice_config&& from) noexcept
    : flex_slice_config() {
    *this = ::std::move(from);
  }

  inline flex_slice_config& operator=(const flex_slice_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_slice_config& operator=(flex_slice_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_slice_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_slice_config* internal_default_instance() {
    return reinterpret_cast<const flex_slice_config*>(
               &_flex_slice_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(flex_slice_config& a, flex_slice_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_slice_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_slice_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_slice_config* New() const final {
    return CreateMaybeMessage<flex_slice_config>(nullptr);
  }

  flex_slice_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_slice_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_slice_config& from);
  void MergeFrom(const flex_slice_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_slice_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_slice_config";
  }
  protected:
  explicit flex_slice_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessages_2eproto);
    return ::descriptor_table_config_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDlFieldNumber = 6,
    kUlFieldNumber = 7,
  };
  // optional .protocol.flex_slice_dl_ul_config dl = 6;
  bool has_dl() const;
  private:
  bool _internal_has_dl() const;
  public:
  void clear_dl();
  const ::protocol::flex_slice_dl_ul_config& dl() const;
  ::protocol::flex_slice_dl_ul_config* release_dl();
  ::protocol::flex_slice_dl_ul_config* mutable_dl();
  void set_allocated_dl(::protocol::flex_slice_dl_ul_config* dl);
  private:
  const ::protocol::flex_slice_dl_ul_config& _internal_dl() const;
  ::protocol::flex_slice_dl_ul_config* _internal_mutable_dl();
  public:
  void unsafe_arena_set_allocated_dl(
      ::protocol::flex_slice_dl_ul_config* dl);
  ::protocol::flex_slice_dl_ul_config* unsafe_arena_release_dl();

  // optional .protocol.flex_slice_dl_ul_config ul = 7;
  bool has_ul() const;
  private:
  bool _internal_has_ul() const;
  public:
  void clear_ul();
  const ::protocol::flex_slice_dl_ul_config& ul() const;
  ::protocol::flex_slice_dl_ul_config* release_ul();
  ::protocol::flex_slice_dl_ul_config* mutable_ul();
  void set_allocated_ul(::protocol::flex_slice_dl_ul_config* ul);
  private:
  const ::protocol::flex_slice_dl_ul_config& _internal_ul() const;
  ::protocol::flex_slice_dl_ul_config* _internal_mutable_ul();
  public:
  void unsafe_arena_set_allocated_ul(
      ::protocol::flex_slice_dl_ul_config* ul);
  ::protocol::flex_slice_dl_ul_config* unsafe_arena_release_ul();

  // @@protoc_insertion_point(class_scope:protocol.flex_slice_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::protocol::flex_slice_dl_ul_config* dl_;
  ::protocol::flex_slice_dl_ul_config* ul_;
  friend struct ::TableStruct_config_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_ue_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_ue_config) */ {
 public:
  inline flex_ue_config() : flex_ue_config(nullptr) {}
  virtual ~flex_ue_config();

  flex_ue_config(const flex_ue_config& from);
  flex_ue_config(flex_ue_config&& from) noexcept
    : flex_ue_config() {
    *this = ::std::move(from);
  }

  inline flex_ue_config& operator=(const flex_ue_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_ue_config& operator=(flex_ue_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_ue_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_ue_config* internal_default_instance() {
    return reinterpret_cast<const flex_ue_config*>(
               &_flex_ue_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(flex_ue_config& a, flex_ue_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_ue_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_ue_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_ue_config* New() const final {
    return CreateMaybeMessage<flex_ue_config>(nullptr);
  }

  flex_ue_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_ue_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_ue_config& from);
  void MergeFrom(const flex_ue_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_ue_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_ue_config";
  }
  protected:
  explicit flex_ue_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessages_2eproto);
    return ::descriptor_table_config_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScellConfigFieldNumber = 28,
    kDrxConfigFieldNumber = 2,
    kSpsConfigFieldNumber = 6,
    kSrConfigFieldNumber = 7,
    kCqiConfigFieldNumber = 8,
    kCapabilitiesFieldNumber = 12,
    kInfoFieldNumber = 33,
    kRntiFieldNumber = 1,
    kTimeAlignmentTimerFieldNumber = 3,
    kMeasGapConfigPatternFieldNumber = 4,
    kMeasGapConfigSfOffsetFieldNumber = 5,
    kUeAggregatedMaxBitrateULFieldNumber = 10,
    kUeAggregatedMaxBitrateDLFieldNumber = 11,
    kTransmissionModeFieldNumber = 9,
    kUeTransmissionAntennaFieldNumber = 13,
    kTtiBundlingFieldNumber = 14,
    kMaxHARQTxFieldNumber = 15,
    kBetaOffsetACKIndexFieldNumber = 16,
    kBetaOffsetRIIndexFieldNumber = 17,
    kBetaOffsetCQIIndexFieldNumber = 18,
    kAckNackSimultaneousTransFieldNumber = 19,
    kSimultaneousAckNackCqiFieldNumber = 20,
    kAperiodicCqiRepModeFieldNumber = 21,
    kTddAckNackFeedbackFieldNumber = 22,
    kAckNackRepetitionFactorFieldNumber = 23,
    kExtendedBsrSizeFieldNumber = 24,
    kCaSupportFieldNumber = 25,
    kCrossCarrierSchedSupportFieldNumber = 26,
    kPcellCarrierIndexFieldNumber = 27,
    kImsiFieldNumber = 30,
    kScellDeactivationTimerFieldNumber = 29,
    kDlSliceIdFieldNumber = 31,
    kUlSliceIdFieldNumber = 32,
  };
  // repeated .protocol.flex_scell_config scell_config = 28;
  int scell_config_size() const;
  private:
  int _internal_scell_config_size() const;
  public:
  void clear_scell_config();
  ::protocol::flex_scell_config* mutable_scell_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_scell_config >*
      mutable_scell_config();
  private:
  const ::protocol::flex_scell_config& _internal_scell_config(int index) const;
  ::protocol::flex_scell_config* _internal_add_scell_config();
  public:
  const ::protocol::flex_scell_config& scell_config(int index) const;
  ::protocol::flex_scell_config* add_scell_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_scell_config >&
      scell_config() const;

  // optional .protocol.flex_drx_config drx_config = 2;
  bool has_drx_config() const;
  private:
  bool _internal_has_drx_config() const;
  public:
  void clear_drx_config();
  const ::protocol::flex_drx_config& drx_config() const;
  ::protocol::flex_drx_config* release_drx_config();
  ::protocol::flex_drx_config* mutable_drx_config();
  void set_allocated_drx_config(::protocol::flex_drx_config* drx_config);
  private:
  const ::protocol::flex_drx_config& _internal_drx_config() const;
  ::protocol::flex_drx_config* _internal_mutable_drx_config();
  public:
  void unsafe_arena_set_allocated_drx_config(
      ::protocol::flex_drx_config* drx_config);
  ::protocol::flex_drx_config* unsafe_arena_release_drx_config();

  // optional .protocol.flex_sps_config sps_config = 6;
  bool has_sps_config() const;
  private:
  bool _internal_has_sps_config() const;
  public:
  void clear_sps_config();
  const ::protocol::flex_sps_config& sps_config() const;
  ::protocol::flex_sps_config* release_sps_config();
  ::protocol::flex_sps_config* mutable_sps_config();
  void set_allocated_sps_config(::protocol::flex_sps_config* sps_config);
  private:
  const ::protocol::flex_sps_config& _internal_sps_config() const;
  ::protocol::flex_sps_config* _internal_mutable_sps_config();
  public:
  void unsafe_arena_set_allocated_sps_config(
      ::protocol::flex_sps_config* sps_config);
  ::protocol::flex_sps_config* unsafe_arena_release_sps_config();

  // optional .protocol.flex_sr_config sr_config = 7;
  bool has_sr_config() const;
  private:
  bool _internal_has_sr_config() const;
  public:
  void clear_sr_config();
  const ::protocol::flex_sr_config& sr_config() const;
  ::protocol::flex_sr_config* release_sr_config();
  ::protocol::flex_sr_config* mutable_sr_config();
  void set_allocated_sr_config(::protocol::flex_sr_config* sr_config);
  private:
  const ::protocol::flex_sr_config& _internal_sr_config() const;
  ::protocol::flex_sr_config* _internal_mutable_sr_config();
  public:
  void unsafe_arena_set_allocated_sr_config(
      ::protocol::flex_sr_config* sr_config);
  ::protocol::flex_sr_config* unsafe_arena_release_sr_config();

  // optional .protocol.flex_cqi_config cqi_config = 8;
  bool has_cqi_config() const;
  private:
  bool _internal_has_cqi_config() const;
  public:
  void clear_cqi_config();
  const ::protocol::flex_cqi_config& cqi_config() const;
  ::protocol::flex_cqi_config* release_cqi_config();
  ::protocol::flex_cqi_config* mutable_cqi_config();
  void set_allocated_cqi_config(::protocol::flex_cqi_config* cqi_config);
  private:
  const ::protocol::flex_cqi_config& _internal_cqi_config() const;
  ::protocol::flex_cqi_config* _internal_mutable_cqi_config();
  public:
  void unsafe_arena_set_allocated_cqi_config(
      ::protocol::flex_cqi_config* cqi_config);
  ::protocol::flex_cqi_config* unsafe_arena_release_cqi_config();

  // optional .protocol.flex_ue_capabilities capabilities = 12;
  bool has_capabilities() const;
  private:
  bool _internal_has_capabilities() const;
  public:
  void clear_capabilities();
  const ::protocol::flex_ue_capabilities& capabilities() const;
  ::protocol::flex_ue_capabilities* release_capabilities();
  ::protocol::flex_ue_capabilities* mutable_capabilities();
  void set_allocated_capabilities(::protocol::flex_ue_capabilities* capabilities);
  private:
  const ::protocol::flex_ue_capabilities& _internal_capabilities() const;
  ::protocol::flex_ue_capabilities* _internal_mutable_capabilities();
  public:
  void unsafe_arena_set_allocated_capabilities(
      ::protocol::flex_ue_capabilities* capabilities);
  ::protocol::flex_ue_capabilities* unsafe_arena_release_capabilities();

  // optional .protocol.flex_measurement_info info = 33;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::protocol::flex_measurement_info& info() const;
  ::protocol::flex_measurement_info* release_info();
  ::protocol::flex_measurement_info* mutable_info();
  void set_allocated_info(::protocol::flex_measurement_info* info);
  private:
  const ::protocol::flex_measurement_info& _internal_info() const;
  ::protocol::flex_measurement_info* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::protocol::flex_measurement_info* info);
  ::protocol::flex_measurement_info* unsafe_arena_release_info();

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 time_alignment_timer = 3;
  bool has_time_alignment_timer() const;
  private:
  bool _internal_has_time_alignment_timer() const;
  public:
  void clear_time_alignment_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_alignment_timer() const;
  void set_time_alignment_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_alignment_timer() const;
  void _internal_set_time_alignment_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 meas_gap_config_pattern = 4;
  bool has_meas_gap_config_pattern() const;
  private:
  bool _internal_has_meas_gap_config_pattern() const;
  public:
  void clear_meas_gap_config_pattern();
  ::PROTOBUF_NAMESPACE_ID::uint32 meas_gap_config_pattern() const;
  void set_meas_gap_config_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meas_gap_config_pattern() const;
  void _internal_set_meas_gap_config_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 meas_gap_config_sf_offset = 5;
  bool has_meas_gap_config_sf_offset() const;
  private:
  bool _internal_has_meas_gap_config_sf_offset() const;
  public:
  void clear_meas_gap_config_sf_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 meas_gap_config_sf_offset() const;
  void set_meas_gap_config_sf_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_meas_gap_config_sf_offset() const;
  void _internal_set_meas_gap_config_sf_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 ue_aggregated_max_bitrate_UL = 10;
  bool has_ue_aggregated_max_bitrate_ul() const;
  private:
  bool _internal_has_ue_aggregated_max_bitrate_ul() const;
  public:
  void clear_ue_aggregated_max_bitrate_ul();
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_aggregated_max_bitrate_ul() const;
  void set_ue_aggregated_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ue_aggregated_max_bitrate_ul() const;
  void _internal_set_ue_aggregated_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint64 ue_aggregated_max_bitrate_DL = 11;
  bool has_ue_aggregated_max_bitrate_dl() const;
  private:
  bool _internal_has_ue_aggregated_max_bitrate_dl() const;
  public:
  void clear_ue_aggregated_max_bitrate_dl();
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_aggregated_max_bitrate_dl() const;
  void set_ue_aggregated_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ue_aggregated_max_bitrate_dl() const;
  void _internal_set_ue_aggregated_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 transmission_mode = 9;
  bool has_transmission_mode() const;
  private:
  bool _internal_has_transmission_mode() const;
  public:
  void clear_transmission_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 transmission_mode() const;
  void set_transmission_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_transmission_mode() const;
  void _internal_set_transmission_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ue_transmission_antenna = 13;
  bool has_ue_transmission_antenna() const;
  private:
  bool _internal_has_ue_transmission_antenna() const;
  public:
  void clear_ue_transmission_antenna();
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_transmission_antenna() const;
  void set_ue_transmission_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ue_transmission_antenna() const;
  void _internal_set_ue_transmission_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tti_bundling = 14;
  bool has_tti_bundling() const;
  private:
  bool _internal_has_tti_bundling() const;
  public:
  void clear_tti_bundling();
  ::PROTOBUF_NAMESPACE_ID::uint32 tti_bundling() const;
  void set_tti_bundling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tti_bundling() const;
  void _internal_set_tti_bundling(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 max_HARQ_tx = 15;
  bool has_max_harq_tx() const;
  private:
  bool _internal_has_max_harq_tx() const;
  public:
  void clear_max_harq_tx();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_harq_tx() const;
  void set_max_harq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_harq_tx() const;
  void _internal_set_max_harq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 beta_offset_ACK_index = 16;
  bool has_beta_offset_ack_index() const;
  private:
  bool _internal_has_beta_offset_ack_index() const;
  public:
  void clear_beta_offset_ack_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 beta_offset_ack_index() const;
  void set_beta_offset_ack_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_beta_offset_ack_index() const;
  void _internal_set_beta_offset_ack_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 beta_offset_RI_index = 17;
  bool has_beta_offset_ri_index() const;
  private:
  bool _internal_has_beta_offset_ri_index() const;
  public:
  void clear_beta_offset_ri_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 beta_offset_ri_index() const;
  void set_beta_offset_ri_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_beta_offset_ri_index() const;
  void _internal_set_beta_offset_ri_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 beta_offset_CQI_index = 18;
  bool has_beta_offset_cqi_index() const;
  private:
  bool _internal_has_beta_offset_cqi_index() const;
  public:
  void clear_beta_offset_cqi_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 beta_offset_cqi_index() const;
  void set_beta_offset_cqi_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_beta_offset_cqi_index() const;
  void _internal_set_beta_offset_cqi_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ack_nack_simultaneous_trans = 19;
  bool has_ack_nack_simultaneous_trans() const;
  private:
  bool _internal_has_ack_nack_simultaneous_trans() const;
  public:
  void clear_ack_nack_simultaneous_trans();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_nack_simultaneous_trans() const;
  void set_ack_nack_simultaneous_trans(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack_nack_simultaneous_trans() const;
  void _internal_set_ack_nack_simultaneous_trans(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 simultaneous_ack_nack_cqi = 20;
  bool has_simultaneous_ack_nack_cqi() const;
  private:
  bool _internal_has_simultaneous_ack_nack_cqi() const;
  public:
  void clear_simultaneous_ack_nack_cqi();
  ::PROTOBUF_NAMESPACE_ID::uint32 simultaneous_ack_nack_cqi() const;
  void set_simultaneous_ack_nack_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_simultaneous_ack_nack_cqi() const;
  void _internal_set_simultaneous_ack_nack_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 aperiodic_cqi_rep_mode = 21;
  bool has_aperiodic_cqi_rep_mode() const;
  private:
  bool _internal_has_aperiodic_cqi_rep_mode() const;
  public:
  void clear_aperiodic_cqi_rep_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 aperiodic_cqi_rep_mode() const;
  void set_aperiodic_cqi_rep_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_aperiodic_cqi_rep_mode() const;
  void _internal_set_aperiodic_cqi_rep_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tdd_ack_nack_feedback = 22;
  bool has_tdd_ack_nack_feedback() const;
  private:
  bool _internal_has_tdd_ack_nack_feedback() const;
  public:
  void clear_tdd_ack_nack_feedback();
  ::PROTOBUF_NAMESPACE_ID::uint32 tdd_ack_nack_feedback() const;
  void set_tdd_ack_nack_feedback(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tdd_ack_nack_feedback() const;
  void _internal_set_tdd_ack_nack_feedback(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ack_nack_repetition_factor = 23;
  bool has_ack_nack_repetition_factor() const;
  private:
  bool _internal_has_ack_nack_repetition_factor() const;
  public:
  void clear_ack_nack_repetition_factor();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_nack_repetition_factor() const;
  void set_ack_nack_repetition_factor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack_nack_repetition_factor() const;
  void _internal_set_ack_nack_repetition_factor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 extended_bsr_size = 24;
  bool has_extended_bsr_size() const;
  private:
  bool _internal_has_extended_bsr_size() const;
  public:
  void clear_extended_bsr_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_bsr_size() const;
  void set_extended_bsr_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_extended_bsr_size() const;
  void _internal_set_extended_bsr_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ca_support = 25;
  bool has_ca_support() const;
  private:
  bool _internal_has_ca_support() const;
  public:
  void clear_ca_support();
  ::PROTOBUF_NAMESPACE_ID::uint32 ca_support() const;
  void set_ca_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ca_support() const;
  void _internal_set_ca_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 cross_carrier_sched_support = 26;
  bool has_cross_carrier_sched_support() const;
  private:
  bool _internal_has_cross_carrier_sched_support() const;
  public:
  void clear_cross_carrier_sched_support();
  ::PROTOBUF_NAMESPACE_ID::uint32 cross_carrier_sched_support() const;
  void set_cross_carrier_sched_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cross_carrier_sched_support() const;
  void _internal_set_cross_carrier_sched_support(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pcell_carrier_index = 27;
  bool has_pcell_carrier_index() const;
  private:
  bool _internal_has_pcell_carrier_index() const;
  public:
  void clear_pcell_carrier_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 pcell_carrier_index() const;
  void set_pcell_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pcell_carrier_index() const;
  void _internal_set_pcell_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint64 imsi = 30;
  bool has_imsi() const;
  private:
  bool _internal_has_imsi() const;
  public:
  void clear_imsi();
  ::PROTOBUF_NAMESPACE_ID::uint64 imsi() const;
  void set_imsi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_imsi() const;
  void _internal_set_imsi(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 scell_deactivation_timer = 29;
  bool has_scell_deactivation_timer() const;
  private:
  bool _internal_has_scell_deactivation_timer() const;
  public:
  void clear_scell_deactivation_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 scell_deactivation_timer() const;
  void set_scell_deactivation_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_scell_deactivation_timer() const;
  void _internal_set_scell_deactivation_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 dl_slice_id = 31;
  bool has_dl_slice_id() const;
  private:
  bool _internal_has_dl_slice_id() const;
  public:
  void clear_dl_slice_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_slice_id() const;
  void set_dl_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dl_slice_id() const;
  void _internal_set_dl_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ul_slice_id = 32;
  bool has_ul_slice_id() const;
  private:
  bool _internal_has_ul_slice_id() const;
  public:
  void clear_ul_slice_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_slice_id() const;
  void set_ul_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ul_slice_id() const;
  void _internal_set_ul_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_ue_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_scell_config > scell_config_;
  ::protocol::flex_drx_config* drx_config_;
  ::protocol::flex_sps_config* sps_config_;
  ::protocol::flex_sr_config* sr_config_;
  ::protocol::flex_cqi_config* cqi_config_;
  ::protocol::flex_ue_capabilities* capabilities_;
  ::protocol::flex_measurement_info* info_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_alignment_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meas_gap_config_pattern_;
  ::PROTOBUF_NAMESPACE_ID::uint32 meas_gap_config_sf_offset_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_aggregated_max_bitrate_ul_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ue_aggregated_max_bitrate_dl_;
  ::PROTOBUF_NAMESPACE_ID::uint32 transmission_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ue_transmission_antenna_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tti_bundling_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_harq_tx_;
  ::PROTOBUF_NAMESPACE_ID::uint32 beta_offset_ack_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 beta_offset_ri_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 beta_offset_cqi_index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_nack_simultaneous_trans_;
  ::PROTOBUF_NAMESPACE_ID::uint32 simultaneous_ack_nack_cqi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 aperiodic_cqi_rep_mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tdd_ack_nack_feedback_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_nack_repetition_factor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 extended_bsr_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ca_support_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cross_carrier_sched_support_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pcell_carrier_index_;
  ::PROTOBUF_NAMESPACE_ID::uint64 imsi_;
  ::PROTOBUF_NAMESPACE_ID::uint32 scell_deactivation_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dl_slice_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ul_slice_id_;
  friend struct ::TableStruct_config_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_lc_ue_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_lc_ue_config) */ {
 public:
  inline flex_lc_ue_config() : flex_lc_ue_config(nullptr) {}
  virtual ~flex_lc_ue_config();

  flex_lc_ue_config(const flex_lc_ue_config& from);
  flex_lc_ue_config(flex_lc_ue_config&& from) noexcept
    : flex_lc_ue_config() {
    *this = ::std::move(from);
  }

  inline flex_lc_ue_config& operator=(const flex_lc_ue_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_lc_ue_config& operator=(flex_lc_ue_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_lc_ue_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_lc_ue_config* internal_default_instance() {
    return reinterpret_cast<const flex_lc_ue_config*>(
               &_flex_lc_ue_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(flex_lc_ue_config& a, flex_lc_ue_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_lc_ue_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_lc_ue_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_lc_ue_config* New() const final {
    return CreateMaybeMessage<flex_lc_ue_config>(nullptr);
  }

  flex_lc_ue_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_lc_ue_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_lc_ue_config& from);
  void MergeFrom(const flex_lc_ue_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_lc_ue_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_lc_ue_config";
  }
  protected:
  explicit flex_lc_ue_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessages_2eproto);
    return ::descriptor_table_config_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLcConfigFieldNumber = 2,
    kRntiFieldNumber = 1,
  };
  // repeated .protocol.flex_lc_config lc_config = 2;
  int lc_config_size() const;
  private:
  int _internal_lc_config_size() const;
  public:
  void clear_lc_config();
  ::protocol::flex_lc_config* mutable_lc_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_lc_config >*
      mutable_lc_config();
  private:
  const ::protocol::flex_lc_config& _internal_lc_config(int index) const;
  ::protocol::flex_lc_config* _internal_add_lc_config();
  public:
  const ::protocol::flex_lc_config& lc_config(int index) const;
  ::protocol::flex_lc_config* add_lc_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_lc_config >&
      lc_config() const;

  // optional uint32 rnti = 1;
  bool has_rnti() const;
  private:
  bool _internal_has_rnti() const;
  public:
  void clear_rnti();
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti() const;
  void set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rnti() const;
  void _internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_lc_ue_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_lc_config > lc_config_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rnti_;
  friend struct ::TableStruct_config_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class flex_s1ap_config PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.flex_s1ap_config) */ {
 public:
  inline flex_s1ap_config() : flex_s1ap_config(nullptr) {}
  virtual ~flex_s1ap_config();

  flex_s1ap_config(const flex_s1ap_config& from);
  flex_s1ap_config(flex_s1ap_config&& from) noexcept
    : flex_s1ap_config() {
    *this = ::std::move(from);
  }

  inline flex_s1ap_config& operator=(const flex_s1ap_config& from) {
    CopyFrom(from);
    return *this;
  }
  inline flex_s1ap_config& operator=(flex_s1ap_config&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const flex_s1ap_config& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const flex_s1ap_config* internal_default_instance() {
    return reinterpret_cast<const flex_s1ap_config*>(
               &_flex_s1ap_config_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(flex_s1ap_config& a, flex_s1ap_config& b) {
    a.Swap(&b);
  }
  inline void Swap(flex_s1ap_config* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(flex_s1ap_config* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline flex_s1ap_config* New() const final {
    return CreateMaybeMessage<flex_s1ap_config>(nullptr);
  }

  flex_s1ap_config* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<flex_s1ap_config>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const flex_s1ap_config& from);
  void MergeFrom(const flex_s1ap_config& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(flex_s1ap_config* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.flex_s1ap_config";
  }
  protected:
  explicit flex_s1ap_config(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_5fmessages_2eproto);
    return ::descriptor_table_config_5fmessages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMmeFieldNumber = 5,
    kEnbS1IpFieldNumber = 3,
    kEnbNameFieldNumber = 4,
    kPendingFieldNumber = 1,
    kConnectedFieldNumber = 2,
  };
  // repeated .protocol.flex_s1ap_mme mme = 5;
  int mme_size() const;
  private:
  int _internal_mme_size() const;
  public:
  void clear_mme();
  ::protocol::flex_s1ap_mme* mutable_mme(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_s1ap_mme >*
      mutable_mme();
  private:
  const ::protocol::flex_s1ap_mme& _internal_mme(int index) const;
  ::protocol::flex_s1ap_mme* _internal_add_mme();
  public:
  const ::protocol::flex_s1ap_mme& mme(int index) const;
  ::protocol::flex_s1ap_mme* add_mme();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_s1ap_mme >&
      mme() const;

  // optional string enb_s1_ip = 3;
  bool has_enb_s1_ip() const;
  private:
  bool _internal_has_enb_s1_ip() const;
  public:
  void clear_enb_s1_ip();
  const std::string& enb_s1_ip() const;
  void set_enb_s1_ip(const std::string& value);
  void set_enb_s1_ip(std::string&& value);
  void set_enb_s1_ip(const char* value);
  void set_enb_s1_ip(const char* value, size_t size);
  std::string* mutable_enb_s1_ip();
  std::string* release_enb_s1_ip();
  void set_allocated_enb_s1_ip(std::string* enb_s1_ip);
  private:
  const std::string& _internal_enb_s1_ip() const;
  void _internal_set_enb_s1_ip(const std::string& value);
  std::string* _internal_mutable_enb_s1_ip();
  public:

  // optional string enb_name = 4;
  bool has_enb_name() const;
  private:
  bool _internal_has_enb_name() const;
  public:
  void clear_enb_name();
  const std::string& enb_name() const;
  void set_enb_name(const std::string& value);
  void set_enb_name(std::string&& value);
  void set_enb_name(const char* value);
  void set_enb_name(const char* value, size_t size);
  std::string* mutable_enb_name();
  std::string* release_enb_name();
  void set_allocated_enb_name(std::string* enb_name);
  private:
  const std::string& _internal_enb_name() const;
  void _internal_set_enb_name(const std::string& value);
  std::string* _internal_mutable_enb_name();
  public:

  // optional uint32 pending = 1;
  bool has_pending() const;
  private:
  bool _internal_has_pending() const;
  public:
  void clear_pending();
  ::PROTOBUF_NAMESPACE_ID::uint32 pending() const;
  void set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pending() const;
  void _internal_set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 connected = 2;
  bool has_connected() const;
  private:
  bool _internal_has_connected() const;
  public:
  void clear_connected();
  ::PROTOBUF_NAMESPACE_ID::uint32 connected() const;
  void set_connected(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_connected() const;
  void _internal_set_connected(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.flex_s1ap_config)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_s1ap_mme > mme_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enb_s1_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enb_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pending_;
  ::PROTOBUF_NAMESPACE_ID::uint32 connected_;
  friend struct ::TableStruct_config_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// flex_cell_config

// optional uint32 phy_cell_id = 1;
inline bool flex_cell_config::_internal_has_phy_cell_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_cell_config::has_phy_cell_id() const {
  return _internal_has_phy_cell_id();
}
inline void flex_cell_config::clear_phy_cell_id() {
  phy_cell_id_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_phy_cell_id() const {
  return phy_cell_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::phy_cell_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phy_cell_id)
  return _internal_phy_cell_id();
}
inline void flex_cell_config::_internal_set_phy_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  phy_cell_id_ = value;
}
inline void flex_cell_config::set_phy_cell_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phy_cell_id(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phy_cell_id)
}

// optional uint32 pusch_hopping_offset = 3;
inline bool flex_cell_config::_internal_has_pusch_hopping_offset() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_cell_config::has_pusch_hopping_offset() const {
  return _internal_has_pusch_hopping_offset();
}
inline void flex_cell_config::clear_pusch_hopping_offset() {
  pusch_hopping_offset_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_pusch_hopping_offset() const {
  return pusch_hopping_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::pusch_hopping_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.pusch_hopping_offset)
  return _internal_pusch_hopping_offset();
}
inline void flex_cell_config::_internal_set_pusch_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  pusch_hopping_offset_ = value;
}
inline void flex_cell_config::set_pusch_hopping_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pusch_hopping_offset(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.pusch_hopping_offset)
}

// optional uint32 hopping_mode = 4;
inline bool flex_cell_config::_internal_has_hopping_mode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool flex_cell_config::has_hopping_mode() const {
  return _internal_has_hopping_mode();
}
inline void flex_cell_config::clear_hopping_mode() {
  hopping_mode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_hopping_mode() const {
  return hopping_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::hopping_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.hopping_mode)
  return _internal_hopping_mode();
}
inline void flex_cell_config::_internal_set_hopping_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hopping_mode_ = value;
}
inline void flex_cell_config::set_hopping_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hopping_mode(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.hopping_mode)
}

// optional uint32 n_sb = 5;
inline bool flex_cell_config::_internal_has_n_sb() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool flex_cell_config::has_n_sb() const {
  return _internal_has_n_sb();
}
inline void flex_cell_config::clear_n_sb() {
  n_sb_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_n_sb() const {
  return n_sb_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::n_sb() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.n_sb)
  return _internal_n_sb();
}
inline void flex_cell_config::_internal_set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  n_sb_ = value;
}
inline void flex_cell_config::set_n_sb(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n_sb(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.n_sb)
}

// optional uint32 phich_resource = 6;
inline bool flex_cell_config::_internal_has_phich_resource() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool flex_cell_config::has_phich_resource() const {
  return _internal_has_phich_resource();
}
inline void flex_cell_config::clear_phich_resource() {
  phich_resource_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_phich_resource() const {
  return phich_resource_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::phich_resource() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phich_resource)
  return _internal_phich_resource();
}
inline void flex_cell_config::_internal_set_phich_resource(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  phich_resource_ = value;
}
inline void flex_cell_config::set_phich_resource(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phich_resource(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phich_resource)
}

// optional uint32 phich_duration = 7;
inline bool flex_cell_config::_internal_has_phich_duration() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool flex_cell_config::has_phich_duration() const {
  return _internal_has_phich_duration();
}
inline void flex_cell_config::clear_phich_duration() {
  phich_duration_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_phich_duration() const {
  return phich_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::phich_duration() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.phich_duration)
  return _internal_phich_duration();
}
inline void flex_cell_config::_internal_set_phich_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  phich_duration_ = value;
}
inline void flex_cell_config::set_phich_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_phich_duration(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.phich_duration)
}

// optional uint32 init_nr_PDCCH_OFDM_sym = 8;
inline bool flex_cell_config::_internal_has_init_nr_pdcch_ofdm_sym() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool flex_cell_config::has_init_nr_pdcch_ofdm_sym() const {
  return _internal_has_init_nr_pdcch_ofdm_sym();
}
inline void flex_cell_config::clear_init_nr_pdcch_ofdm_sym() {
  init_nr_pdcch_ofdm_sym_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_init_nr_pdcch_ofdm_sym() const {
  return init_nr_pdcch_ofdm_sym_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::init_nr_pdcch_ofdm_sym() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.init_nr_PDCCH_OFDM_sym)
  return _internal_init_nr_pdcch_ofdm_sym();
}
inline void flex_cell_config::_internal_set_init_nr_pdcch_ofdm_sym(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  init_nr_pdcch_ofdm_sym_ = value;
}
inline void flex_cell_config::set_init_nr_pdcch_ofdm_sym(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_init_nr_pdcch_ofdm_sym(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.init_nr_PDCCH_OFDM_sym)
}

// optional .protocol.flex_si_config si_config = 9;
inline bool flex_cell_config::_internal_has_si_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || si_config_ != nullptr);
  return value;
}
inline bool flex_cell_config::has_si_config() const {
  return _internal_has_si_config();
}
inline const ::protocol::flex_si_config& flex_cell_config::_internal_si_config() const {
  const ::protocol::flex_si_config* p = si_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_si_config*>(
      &::protocol::_flex_si_config_default_instance_);
}
inline const ::protocol::flex_si_config& flex_cell_config::si_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.si_config)
  return _internal_si_config();
}
inline void flex_cell_config::unsafe_arena_set_allocated_si_config(
    ::protocol::flex_si_config* si_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(si_config_);
  }
  si_config_ = si_config;
  if (si_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_cell_config.si_config)
}
inline ::protocol::flex_si_config* flex_cell_config::release_si_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_si_config* temp = si_config_;
  si_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_si_config* flex_cell_config::unsafe_arena_release_si_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_config.si_config)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_si_config* temp = si_config_;
  si_config_ = nullptr;
  return temp;
}
inline ::protocol::flex_si_config* flex_cell_config::_internal_mutable_si_config() {
  _has_bits_[0] |= 0x00000001u;
  if (si_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_si_config>(GetArena());
    si_config_ = p;
  }
  return si_config_;
}
inline ::protocol::flex_si_config* flex_cell_config::mutable_si_config() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.si_config)
  return _internal_mutable_si_config();
}
inline void flex_cell_config::set_allocated_si_config(::protocol::flex_si_config* si_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(si_config_);
  }
  if (si_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(si_config)->GetArena();
    if (message_arena != submessage_arena) {
      si_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, si_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  si_config_ = si_config;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_config.si_config)
}

// optional uint32 dl_bandwidth = 10;
inline bool flex_cell_config::_internal_has_dl_bandwidth() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool flex_cell_config::has_dl_bandwidth() const {
  return _internal_has_dl_bandwidth();
}
inline void flex_cell_config::clear_dl_bandwidth() {
  dl_bandwidth_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_dl_bandwidth() const {
  return dl_bandwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::dl_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_bandwidth)
  return _internal_dl_bandwidth();
}
inline void flex_cell_config::_internal_set_dl_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  dl_bandwidth_ = value;
}
inline void flex_cell_config::set_dl_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dl_bandwidth(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_bandwidth)
}

// optional uint32 ul_bandwidth = 11;
inline bool flex_cell_config::_internal_has_ul_bandwidth() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool flex_cell_config::has_ul_bandwidth() const {
  return _internal_has_ul_bandwidth();
}
inline void flex_cell_config::clear_ul_bandwidth() {
  ul_bandwidth_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_ul_bandwidth() const {
  return ul_bandwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::ul_bandwidth() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_bandwidth)
  return _internal_ul_bandwidth();
}
inline void flex_cell_config::_internal_set_ul_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  ul_bandwidth_ = value;
}
inline void flex_cell_config::set_ul_bandwidth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ul_bandwidth(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_bandwidth)
}

// optional uint32 ul_cyclic_prefix_length = 13;
inline bool flex_cell_config::_internal_has_ul_cyclic_prefix_length() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool flex_cell_config::has_ul_cyclic_prefix_length() const {
  return _internal_has_ul_cyclic_prefix_length();
}
inline void flex_cell_config::clear_ul_cyclic_prefix_length() {
  ul_cyclic_prefix_length_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_ul_cyclic_prefix_length() const {
  return ul_cyclic_prefix_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::ul_cyclic_prefix_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_cyclic_prefix_length)
  return _internal_ul_cyclic_prefix_length();
}
inline void flex_cell_config::_internal_set_ul_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  ul_cyclic_prefix_length_ = value;
}
inline void flex_cell_config::set_ul_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ul_cyclic_prefix_length(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_cyclic_prefix_length)
}

// optional uint32 dl_cyclic_prefix_length = 14;
inline bool flex_cell_config::_internal_has_dl_cyclic_prefix_length() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool flex_cell_config::has_dl_cyclic_prefix_length() const {
  return _internal_has_dl_cyclic_prefix_length();
}
inline void flex_cell_config::clear_dl_cyclic_prefix_length() {
  dl_cyclic_prefix_length_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_dl_cyclic_prefix_length() const {
  return dl_cyclic_prefix_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::dl_cyclic_prefix_length() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_cyclic_prefix_length)
  return _internal_dl_cyclic_prefix_length();
}
inline void flex_cell_config::_internal_set_dl_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  dl_cyclic_prefix_length_ = value;
}
inline void flex_cell_config::set_dl_cyclic_prefix_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dl_cyclic_prefix_length(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_cyclic_prefix_length)
}

// optional uint32 antenna_ports_count = 15;
inline bool flex_cell_config::_internal_has_antenna_ports_count() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool flex_cell_config::has_antenna_ports_count() const {
  return _internal_has_antenna_ports_count();
}
inline void flex_cell_config::clear_antenna_ports_count() {
  antenna_ports_count_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_antenna_ports_count() const {
  return antenna_ports_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::antenna_ports_count() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.antenna_ports_count)
  return _internal_antenna_ports_count();
}
inline void flex_cell_config::_internal_set_antenna_ports_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  antenna_ports_count_ = value;
}
inline void flex_cell_config::set_antenna_ports_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_antenna_ports_count(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.antenna_ports_count)
}

// optional uint32 duplex_mode = 16;
inline bool flex_cell_config::_internal_has_duplex_mode() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool flex_cell_config::has_duplex_mode() const {
  return _internal_has_duplex_mode();
}
inline void flex_cell_config::clear_duplex_mode() {
  duplex_mode_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_duplex_mode() const {
  return duplex_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::duplex_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.duplex_mode)
  return _internal_duplex_mode();
}
inline void flex_cell_config::_internal_set_duplex_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  duplex_mode_ = value;
}
inline void flex_cell_config::set_duplex_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duplex_mode(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.duplex_mode)
}

// optional uint32 subframe_assignment = 17;
inline bool flex_cell_config::_internal_has_subframe_assignment() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool flex_cell_config::has_subframe_assignment() const {
  return _internal_has_subframe_assignment();
}
inline void flex_cell_config::clear_subframe_assignment() {
  subframe_assignment_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_subframe_assignment() const {
  return subframe_assignment_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::subframe_assignment() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.subframe_assignment)
  return _internal_subframe_assignment();
}
inline void flex_cell_config::_internal_set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  subframe_assignment_ = value;
}
inline void flex_cell_config::set_subframe_assignment(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_subframe_assignment(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.subframe_assignment)
}

// optional uint32 special_subframe_patterns = 18;
inline bool flex_cell_config::_internal_has_special_subframe_patterns() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool flex_cell_config::has_special_subframe_patterns() const {
  return _internal_has_special_subframe_patterns();
}
inline void flex_cell_config::clear_special_subframe_patterns() {
  special_subframe_patterns_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_special_subframe_patterns() const {
  return special_subframe_patterns_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::special_subframe_patterns() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.special_subframe_patterns)
  return _internal_special_subframe_patterns();
}
inline void flex_cell_config::_internal_set_special_subframe_patterns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  special_subframe_patterns_ = value;
}
inline void flex_cell_config::set_special_subframe_patterns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_special_subframe_patterns(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.special_subframe_patterns)
}

// repeated uint32 mbsfn_subframe_config_rfperiod = 19;
inline int flex_cell_config::_internal_mbsfn_subframe_config_rfperiod_size() const {
  return mbsfn_subframe_config_rfperiod_.size();
}
inline int flex_cell_config::mbsfn_subframe_config_rfperiod_size() const {
  return _internal_mbsfn_subframe_config_rfperiod_size();
}
inline void flex_cell_config::clear_mbsfn_subframe_config_rfperiod() {
  mbsfn_subframe_config_rfperiod_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_mbsfn_subframe_config_rfperiod(int index) const {
  return mbsfn_subframe_config_rfperiod_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::mbsfn_subframe_config_rfperiod(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return _internal_mbsfn_subframe_config_rfperiod(index);
}
inline void flex_cell_config::set_mbsfn_subframe_config_rfperiod(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mbsfn_subframe_config_rfperiod_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
}
inline void flex_cell_config::_internal_add_mbsfn_subframe_config_rfperiod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mbsfn_subframe_config_rfperiod_.Add(value);
}
inline void flex_cell_config::add_mbsfn_subframe_config_rfperiod(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_mbsfn_subframe_config_rfperiod(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_config::_internal_mbsfn_subframe_config_rfperiod() const {
  return mbsfn_subframe_config_rfperiod_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_config::mbsfn_subframe_config_rfperiod() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return _internal_mbsfn_subframe_config_rfperiod();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_config::_internal_mutable_mbsfn_subframe_config_rfperiod() {
  return &mbsfn_subframe_config_rfperiod_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_rfperiod() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_rfperiod)
  return _internal_mutable_mbsfn_subframe_config_rfperiod();
}

// repeated uint32 mbsfn_subframe_config_rfoffset = 20;
inline int flex_cell_config::_internal_mbsfn_subframe_config_rfoffset_size() const {
  return mbsfn_subframe_config_rfoffset_.size();
}
inline int flex_cell_config::mbsfn_subframe_config_rfoffset_size() const {
  return _internal_mbsfn_subframe_config_rfoffset_size();
}
inline void flex_cell_config::clear_mbsfn_subframe_config_rfoffset() {
  mbsfn_subframe_config_rfoffset_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_mbsfn_subframe_config_rfoffset(int index) const {
  return mbsfn_subframe_config_rfoffset_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::mbsfn_subframe_config_rfoffset(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return _internal_mbsfn_subframe_config_rfoffset(index);
}
inline void flex_cell_config::set_mbsfn_subframe_config_rfoffset(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mbsfn_subframe_config_rfoffset_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
}
inline void flex_cell_config::_internal_add_mbsfn_subframe_config_rfoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mbsfn_subframe_config_rfoffset_.Add(value);
}
inline void flex_cell_config::add_mbsfn_subframe_config_rfoffset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_mbsfn_subframe_config_rfoffset(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_config::_internal_mbsfn_subframe_config_rfoffset() const {
  return mbsfn_subframe_config_rfoffset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_config::mbsfn_subframe_config_rfoffset() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return _internal_mbsfn_subframe_config_rfoffset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_config::_internal_mutable_mbsfn_subframe_config_rfoffset() {
  return &mbsfn_subframe_config_rfoffset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_rfoffset() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_rfoffset)
  return _internal_mutable_mbsfn_subframe_config_rfoffset();
}

// repeated uint32 mbsfn_subframe_config_sfalloc = 21;
inline int flex_cell_config::_internal_mbsfn_subframe_config_sfalloc_size() const {
  return mbsfn_subframe_config_sfalloc_.size();
}
inline int flex_cell_config::mbsfn_subframe_config_sfalloc_size() const {
  return _internal_mbsfn_subframe_config_sfalloc_size();
}
inline void flex_cell_config::clear_mbsfn_subframe_config_sfalloc() {
  mbsfn_subframe_config_sfalloc_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_mbsfn_subframe_config_sfalloc(int index) const {
  return mbsfn_subframe_config_sfalloc_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::mbsfn_subframe_config_sfalloc(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return _internal_mbsfn_subframe_config_sfalloc(index);
}
inline void flex_cell_config::set_mbsfn_subframe_config_sfalloc(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mbsfn_subframe_config_sfalloc_.Set(index, value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
}
inline void flex_cell_config::_internal_add_mbsfn_subframe_config_sfalloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  mbsfn_subframe_config_sfalloc_.Add(value);
}
inline void flex_cell_config::add_mbsfn_subframe_config_sfalloc(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_mbsfn_subframe_config_sfalloc(value);
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_config::_internal_mbsfn_subframe_config_sfalloc() const {
  return mbsfn_subframe_config_sfalloc_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
flex_cell_config::mbsfn_subframe_config_sfalloc() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return _internal_mbsfn_subframe_config_sfalloc();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_config::_internal_mutable_mbsfn_subframe_config_sfalloc() {
  return &mbsfn_subframe_config_sfalloc_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
flex_cell_config::mutable_mbsfn_subframe_config_sfalloc() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.mbsfn_subframe_config_sfalloc)
  return _internal_mutable_mbsfn_subframe_config_sfalloc();
}

// optional uint32 prach_config_index = 22;
inline bool flex_cell_config::_internal_has_prach_config_index() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool flex_cell_config::has_prach_config_index() const {
  return _internal_has_prach_config_index();
}
inline void flex_cell_config::clear_prach_config_index() {
  prach_config_index_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_prach_config_index() const {
  return prach_config_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::prach_config_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.prach_config_index)
  return _internal_prach_config_index();
}
inline void flex_cell_config::_internal_set_prach_config_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  prach_config_index_ = value;
}
inline void flex_cell_config::set_prach_config_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_config_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.prach_config_index)
}

// optional uint32 prach_freq_offset = 23;
inline bool flex_cell_config::_internal_has_prach_freq_offset() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool flex_cell_config::has_prach_freq_offset() const {
  return _internal_has_prach_freq_offset();
}
inline void flex_cell_config::clear_prach_freq_offset() {
  prach_freq_offset_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_prach_freq_offset() const {
  return prach_freq_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::prach_freq_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.prach_freq_offset)
  return _internal_prach_freq_offset();
}
inline void flex_cell_config::_internal_set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  prach_freq_offset_ = value;
}
inline void flex_cell_config::set_prach_freq_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_prach_freq_offset(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.prach_freq_offset)
}

// optional uint32 ra_response_window_size = 24;
inline bool flex_cell_config::_internal_has_ra_response_window_size() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool flex_cell_config::has_ra_response_window_size() const {
  return _internal_has_ra_response_window_size();
}
inline void flex_cell_config::clear_ra_response_window_size() {
  ra_response_window_size_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_ra_response_window_size() const {
  return ra_response_window_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::ra_response_window_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ra_response_window_size)
  return _internal_ra_response_window_size();
}
inline void flex_cell_config::_internal_set_ra_response_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  ra_response_window_size_ = value;
}
inline void flex_cell_config::set_ra_response_window_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ra_response_window_size(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ra_response_window_size)
}

// optional uint32 mac_contention_resolution_timer = 25;
inline bool flex_cell_config::_internal_has_mac_contention_resolution_timer() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool flex_cell_config::has_mac_contention_resolution_timer() const {
  return _internal_has_mac_contention_resolution_timer();
}
inline void flex_cell_config::clear_mac_contention_resolution_timer() {
  mac_contention_resolution_timer_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_mac_contention_resolution_timer() const {
  return mac_contention_resolution_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::mac_contention_resolution_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.mac_contention_resolution_timer)
  return _internal_mac_contention_resolution_timer();
}
inline void flex_cell_config::_internal_set_mac_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  mac_contention_resolution_timer_ = value;
}
inline void flex_cell_config::set_mac_contention_resolution_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mac_contention_resolution_timer(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.mac_contention_resolution_timer)
}

// optional uint32 max_HARQ_Msg3Tx = 26;
inline bool flex_cell_config::_internal_has_max_harq_msg3tx() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool flex_cell_config::has_max_harq_msg3tx() const {
  return _internal_has_max_harq_msg3tx();
}
inline void flex_cell_config::clear_max_harq_msg3tx() {
  max_harq_msg3tx_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_max_harq_msg3tx() const {
  return max_harq_msg3tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::max_harq_msg3tx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.max_HARQ_Msg3Tx)
  return _internal_max_harq_msg3tx();
}
inline void flex_cell_config::_internal_set_max_harq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  max_harq_msg3tx_ = value;
}
inline void flex_cell_config::set_max_harq_msg3tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_harq_msg3tx(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.max_HARQ_Msg3Tx)
}

// optional uint32 n1PUCCH_AN = 27;
inline bool flex_cell_config::_internal_has_n1pucch_an() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool flex_cell_config::has_n1pucch_an() const {
  return _internal_has_n1pucch_an();
}
inline void flex_cell_config::clear_n1pucch_an() {
  n1pucch_an_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_n1pucch_an() const {
  return n1pucch_an_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::n1pucch_an() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.n1PUCCH_AN)
  return _internal_n1pucch_an();
}
inline void flex_cell_config::_internal_set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  n1pucch_an_ = value;
}
inline void flex_cell_config::set_n1pucch_an(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_n1pucch_an(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.n1PUCCH_AN)
}

// optional uint32 deltaPUCCH_shift = 28;
inline bool flex_cell_config::_internal_has_deltapucch_shift() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool flex_cell_config::has_deltapucch_shift() const {
  return _internal_has_deltapucch_shift();
}
inline void flex_cell_config::clear_deltapucch_shift() {
  deltapucch_shift_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_deltapucch_shift() const {
  return deltapucch_shift_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::deltapucch_shift() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.deltaPUCCH_shift)
  return _internal_deltapucch_shift();
}
inline void flex_cell_config::_internal_set_deltapucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  deltapucch_shift_ = value;
}
inline void flex_cell_config::set_deltapucch_shift(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deltapucch_shift(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.deltaPUCCH_shift)
}

// optional uint32 nRB_cqi = 29;
inline bool flex_cell_config::_internal_has_nrb_cqi() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_nrb_cqi() const {
  return _internal_has_nrb_cqi();
}
inline void flex_cell_config::clear_nrb_cqi() {
  nrb_cqi_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_nrb_cqi() const {
  return nrb_cqi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::nrb_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.nRB_cqi)
  return _internal_nrb_cqi();
}
inline void flex_cell_config::_internal_set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  nrb_cqi_ = value;
}
inline void flex_cell_config::set_nrb_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nrb_cqi(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.nRB_cqi)
}

// optional uint32 srs_subframe_config = 30;
inline bool flex_cell_config::_internal_has_srs_subframe_config() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_srs_subframe_config() const {
  return _internal_has_srs_subframe_config();
}
inline void flex_cell_config::clear_srs_subframe_config() {
  srs_subframe_config_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_srs_subframe_config() const {
  return srs_subframe_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::srs_subframe_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_subframe_config)
  return _internal_srs_subframe_config();
}
inline void flex_cell_config::_internal_set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  srs_subframe_config_ = value;
}
inline void flex_cell_config::set_srs_subframe_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srs_subframe_config(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_subframe_config)
}

// optional uint32 srs_bw_config = 31;
inline bool flex_cell_config::_internal_has_srs_bw_config() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_srs_bw_config() const {
  return _internal_has_srs_bw_config();
}
inline void flex_cell_config::clear_srs_bw_config() {
  srs_bw_config_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_srs_bw_config() const {
  return srs_bw_config_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::srs_bw_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_bw_config)
  return _internal_srs_bw_config();
}
inline void flex_cell_config::_internal_set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  srs_bw_config_ = value;
}
inline void flex_cell_config::set_srs_bw_config(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srs_bw_config(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_bw_config)
}

// optional uint32 srs_mac_up_pts = 32;
inline bool flex_cell_config::_internal_has_srs_mac_up_pts() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_srs_mac_up_pts() const {
  return _internal_has_srs_mac_up_pts();
}
inline void flex_cell_config::clear_srs_mac_up_pts() {
  srs_mac_up_pts_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_srs_mac_up_pts() const {
  return srs_mac_up_pts_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::srs_mac_up_pts() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.srs_mac_up_pts)
  return _internal_srs_mac_up_pts();
}
inline void flex_cell_config::_internal_set_srs_mac_up_pts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  srs_mac_up_pts_ = value;
}
inline void flex_cell_config::set_srs_mac_up_pts(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_srs_mac_up_pts(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.srs_mac_up_pts)
}

// optional uint32 enable_64QAM = 33;
inline bool flex_cell_config::_internal_has_enable_64qam() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_enable_64qam() const {
  return _internal_has_enable_64qam();
}
inline void flex_cell_config::clear_enable_64qam() {
  enable_64qam_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_enable_64qam() const {
  return enable_64qam_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::enable_64qam() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.enable_64QAM)
  return _internal_enable_64qam();
}
inline void flex_cell_config::_internal_set_enable_64qam(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  enable_64qam_ = value;
}
inline void flex_cell_config::set_enable_64qam(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_enable_64qam(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.enable_64QAM)
}

// optional uint32 carrier_index = 34;
inline bool flex_cell_config::_internal_has_carrier_index() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_carrier_index() const {
  return _internal_has_carrier_index();
}
inline void flex_cell_config::clear_carrier_index() {
  carrier_index_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_carrier_index() const {
  return carrier_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.carrier_index)
  return _internal_carrier_index();
}
inline void flex_cell_config::_internal_set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  carrier_index_ = value;
}
inline void flex_cell_config::set_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_carrier_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.carrier_index)
}

// optional uint32 dl_freq = 35;
inline bool flex_cell_config::_internal_has_dl_freq() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_dl_freq() const {
  return _internal_has_dl_freq();
}
inline void flex_cell_config::clear_dl_freq() {
  dl_freq_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_dl_freq() const {
  return dl_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::dl_freq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_freq)
  return _internal_dl_freq();
}
inline void flex_cell_config::_internal_set_dl_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  dl_freq_ = value;
}
inline void flex_cell_config::set_dl_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dl_freq(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_freq)
}

// optional uint32 ul_freq = 36;
inline bool flex_cell_config::_internal_has_ul_freq() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool flex_cell_config::has_ul_freq() const {
  return _internal_has_ul_freq();
}
inline void flex_cell_config::clear_ul_freq() {
  ul_freq_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_ul_freq() const {
  return ul_freq_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::ul_freq() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_freq)
  return _internal_ul_freq();
}
inline void flex_cell_config::_internal_set_ul_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  ul_freq_ = value;
}
inline void flex_cell_config::set_ul_freq(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ul_freq(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_freq)
}

// optional uint32 eutra_band = 37;
inline bool flex_cell_config::_internal_has_eutra_band() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool flex_cell_config::has_eutra_band() const {
  return _internal_has_eutra_band();
}
inline void flex_cell_config::clear_eutra_band() {
  eutra_band_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::_internal_eutra_band() const {
  return eutra_band_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_cell_config::eutra_band() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.eutra_band)
  return _internal_eutra_band();
}
inline void flex_cell_config::_internal_set_eutra_band(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  eutra_band_ = value;
}
inline void flex_cell_config::set_eutra_band(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_eutra_band(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.eutra_band)
}

// optional int32 dl_pdsch_power = 38;
inline bool flex_cell_config::_internal_has_dl_pdsch_power() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool flex_cell_config::has_dl_pdsch_power() const {
  return _internal_has_dl_pdsch_power();
}
inline void flex_cell_config::clear_dl_pdsch_power() {
  dl_pdsch_power_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 flex_cell_config::_internal_dl_pdsch_power() const {
  return dl_pdsch_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 flex_cell_config::dl_pdsch_power() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.dl_pdsch_power)
  return _internal_dl_pdsch_power();
}
inline void flex_cell_config::_internal_set_dl_pdsch_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000002u;
  dl_pdsch_power_ = value;
}
inline void flex_cell_config::set_dl_pdsch_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dl_pdsch_power(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.dl_pdsch_power)
}

// optional int32 ul_pusch_power = 39;
inline bool flex_cell_config::_internal_has_ul_pusch_power() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool flex_cell_config::has_ul_pusch_power() const {
  return _internal_has_ul_pusch_power();
}
inline void flex_cell_config::clear_ul_pusch_power() {
  ul_pusch_power_ = 0;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 flex_cell_config::_internal_ul_pusch_power() const {
  return ul_pusch_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 flex_cell_config::ul_pusch_power() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.ul_pusch_power)
  return _internal_ul_pusch_power();
}
inline void flex_cell_config::_internal_set_ul_pusch_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[1] |= 0x00000004u;
  ul_pusch_power_ = value;
}
inline void flex_cell_config::set_ul_pusch_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ul_pusch_power(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.ul_pusch_power)
}

// repeated .protocol.flex_plmn plmn_id = 40;
inline int flex_cell_config::_internal_plmn_id_size() const {
  return plmn_id_.size();
}
inline int flex_cell_config::plmn_id_size() const {
  return _internal_plmn_id_size();
}
inline ::protocol::flex_plmn* flex_cell_config::mutable_plmn_id(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.plmn_id)
  return plmn_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >*
flex_cell_config::mutable_plmn_id() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_cell_config.plmn_id)
  return &plmn_id_;
}
inline const ::protocol::flex_plmn& flex_cell_config::_internal_plmn_id(int index) const {
  return plmn_id_.Get(index);
}
inline const ::protocol::flex_plmn& flex_cell_config::plmn_id(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.plmn_id)
  return _internal_plmn_id(index);
}
inline ::protocol::flex_plmn* flex_cell_config::_internal_add_plmn_id() {
  return plmn_id_.Add();
}
inline ::protocol::flex_plmn* flex_cell_config::add_plmn_id() {
  // @@protoc_insertion_point(field_add:protocol.flex_cell_config.plmn_id)
  return _internal_add_plmn_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_plmn >&
flex_cell_config::plmn_id() const {
  // @@protoc_insertion_point(field_list:protocol.flex_cell_config.plmn_id)
  return plmn_id_;
}

// optional .protocol.flex_slice_config slice_config = 42;
inline bool flex_cell_config::_internal_has_slice_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || slice_config_ != nullptr);
  return value;
}
inline bool flex_cell_config::has_slice_config() const {
  return _internal_has_slice_config();
}
inline void flex_cell_config::clear_slice_config() {
  if (slice_config_ != nullptr) slice_config_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protocol::flex_slice_config& flex_cell_config::_internal_slice_config() const {
  const ::protocol::flex_slice_config* p = slice_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_slice_config*>(
      &::protocol::_flex_slice_config_default_instance_);
}
inline const ::protocol::flex_slice_config& flex_cell_config::slice_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.slice_config)
  return _internal_slice_config();
}
inline void flex_cell_config::unsafe_arena_set_allocated_slice_config(
    ::protocol::flex_slice_config* slice_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slice_config_);
  }
  slice_config_ = slice_config;
  if (slice_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_cell_config.slice_config)
}
inline ::protocol::flex_slice_config* flex_cell_config::release_slice_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_slice_config* temp = slice_config_;
  slice_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_slice_config* flex_cell_config::unsafe_arena_release_slice_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_cell_config.slice_config)
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_slice_config* temp = slice_config_;
  slice_config_ = nullptr;
  return temp;
}
inline ::protocol::flex_slice_config* flex_cell_config::_internal_mutable_slice_config() {
  _has_bits_[0] |= 0x00000002u;
  if (slice_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_slice_config>(GetArena());
    slice_config_ = p;
  }
  return slice_config_;
}
inline ::protocol::flex_slice_config* flex_cell_config::mutable_slice_config() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_cell_config.slice_config)
  return _internal_mutable_slice_config();
}
inline void flex_cell_config::set_allocated_slice_config(::protocol::flex_slice_config* slice_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete slice_config_;
  }
  if (slice_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(slice_config);
    if (message_arena != submessage_arena) {
      slice_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  slice_config_ = slice_config;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_cell_config.slice_config)
}

// optional bool x2_ho_net_control = 43;
inline bool flex_cell_config::_internal_has_x2_ho_net_control() const {
  bool value = (_has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline bool flex_cell_config::has_x2_ho_net_control() const {
  return _internal_has_x2_ho_net_control();
}
inline void flex_cell_config::clear_x2_ho_net_control() {
  x2_ho_net_control_ = false;
  _has_bits_[1] &= ~0x00000008u;
}
inline bool flex_cell_config::_internal_x2_ho_net_control() const {
  return x2_ho_net_control_;
}
inline bool flex_cell_config::x2_ho_net_control() const {
  // @@protoc_insertion_point(field_get:protocol.flex_cell_config.x2_ho_net_control)
  return _internal_x2_ho_net_control();
}
inline void flex_cell_config::_internal_set_x2_ho_net_control(bool value) {
  _has_bits_[1] |= 0x00000008u;
  x2_ho_net_control_ = value;
}
inline void flex_cell_config::set_x2_ho_net_control(bool value) {
  _internal_set_x2_ho_net_control(value);
  // @@protoc_insertion_point(field_set:protocol.flex_cell_config.x2_ho_net_control)
}

// -------------------------------------------------------------------

// flex_slice_config

// optional .protocol.flex_slice_dl_ul_config dl = 6;
inline bool flex_slice_config::_internal_has_dl() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || dl_ != nullptr);
  return value;
}
inline bool flex_slice_config::has_dl() const {
  return _internal_has_dl();
}
inline const ::protocol::flex_slice_dl_ul_config& flex_slice_config::_internal_dl() const {
  const ::protocol::flex_slice_dl_ul_config* p = dl_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_slice_dl_ul_config*>(
      &::protocol::_flex_slice_dl_ul_config_default_instance_);
}
inline const ::protocol::flex_slice_dl_ul_config& flex_slice_config::dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_config.dl)
  return _internal_dl();
}
inline void flex_slice_config::unsafe_arena_set_allocated_dl(
    ::protocol::flex_slice_dl_ul_config* dl) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_);
  }
  dl_ = dl;
  if (dl) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_slice_config.dl)
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::release_dl() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_slice_dl_ul_config* temp = dl_;
  dl_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::unsafe_arena_release_dl() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_config.dl)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_slice_dl_ul_config* temp = dl_;
  dl_ = nullptr;
  return temp;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::_internal_mutable_dl() {
  _has_bits_[0] |= 0x00000001u;
  if (dl_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_slice_dl_ul_config>(GetArena());
    dl_ = p;
  }
  return dl_;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::mutable_dl() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_config.dl)
  return _internal_mutable_dl();
}
inline void flex_slice_config::set_allocated_dl(::protocol::flex_slice_dl_ul_config* dl) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl_);
  }
  if (dl) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dl)->GetArena();
    if (message_arena != submessage_arena) {
      dl = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dl, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dl_ = dl;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_config.dl)
}

// optional .protocol.flex_slice_dl_ul_config ul = 7;
inline bool flex_slice_config::_internal_has_ul() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || ul_ != nullptr);
  return value;
}
inline bool flex_slice_config::has_ul() const {
  return _internal_has_ul();
}
inline const ::protocol::flex_slice_dl_ul_config& flex_slice_config::_internal_ul() const {
  const ::protocol::flex_slice_dl_ul_config* p = ul_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_slice_dl_ul_config*>(
      &::protocol::_flex_slice_dl_ul_config_default_instance_);
}
inline const ::protocol::flex_slice_dl_ul_config& flex_slice_config::ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_slice_config.ul)
  return _internal_ul();
}
inline void flex_slice_config::unsafe_arena_set_allocated_ul(
    ::protocol::flex_slice_dl_ul_config* ul) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_);
  }
  ul_ = ul;
  if (ul) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_slice_config.ul)
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::release_ul() {
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_slice_dl_ul_config* temp = ul_;
  ul_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::unsafe_arena_release_ul() {
  // @@protoc_insertion_point(field_release:protocol.flex_slice_config.ul)
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_slice_dl_ul_config* temp = ul_;
  ul_ = nullptr;
  return temp;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::_internal_mutable_ul() {
  _has_bits_[0] |= 0x00000002u;
  if (ul_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_slice_dl_ul_config>(GetArena());
    ul_ = p;
  }
  return ul_;
}
inline ::protocol::flex_slice_dl_ul_config* flex_slice_config::mutable_ul() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_slice_config.ul)
  return _internal_mutable_ul();
}
inline void flex_slice_config::set_allocated_ul(::protocol::flex_slice_dl_ul_config* ul) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul_);
  }
  if (ul) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ul)->GetArena();
    if (message_arena != submessage_arena) {
      ul = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ul, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  ul_ = ul;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_slice_config.ul)
}

// -------------------------------------------------------------------

// flex_ue_config

// optional uint32 rnti = 1;
inline bool flex_ue_config::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool flex_ue_config::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_ue_config::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.rnti)
  return _internal_rnti();
}
inline void flex_ue_config::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  rnti_ = value;
}
inline void flex_ue_config::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.rnti)
}

// optional .protocol.flex_drx_config drx_config = 2;
inline bool flex_ue_config::_internal_has_drx_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || drx_config_ != nullptr);
  return value;
}
inline bool flex_ue_config::has_drx_config() const {
  return _internal_has_drx_config();
}
inline const ::protocol::flex_drx_config& flex_ue_config::_internal_drx_config() const {
  const ::protocol::flex_drx_config* p = drx_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_drx_config*>(
      &::protocol::_flex_drx_config_default_instance_);
}
inline const ::protocol::flex_drx_config& flex_ue_config::drx_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.drx_config)
  return _internal_drx_config();
}
inline void flex_ue_config::unsafe_arena_set_allocated_drx_config(
    ::protocol::flex_drx_config* drx_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drx_config_);
  }
  drx_config_ = drx_config;
  if (drx_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_config.drx_config)
}
inline ::protocol::flex_drx_config* flex_ue_config::release_drx_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_drx_config* temp = drx_config_;
  drx_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_drx_config* flex_ue_config::unsafe_arena_release_drx_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.drx_config)
  _has_bits_[0] &= ~0x00000001u;
  ::protocol::flex_drx_config* temp = drx_config_;
  drx_config_ = nullptr;
  return temp;
}
inline ::protocol::flex_drx_config* flex_ue_config::_internal_mutable_drx_config() {
  _has_bits_[0] |= 0x00000001u;
  if (drx_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_drx_config>(GetArena());
    drx_config_ = p;
  }
  return drx_config_;
}
inline ::protocol::flex_drx_config* flex_ue_config::mutable_drx_config() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.drx_config)
  return _internal_mutable_drx_config();
}
inline void flex_ue_config::set_allocated_drx_config(::protocol::flex_drx_config* drx_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(drx_config_);
  }
  if (drx_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drx_config)->GetArena();
    if (message_arena != submessage_arena) {
      drx_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drx_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  drx_config_ = drx_config;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.drx_config)
}

// optional uint32 time_alignment_timer = 3;
inline bool flex_ue_config::_internal_has_time_alignment_timer() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool flex_ue_config::has_time_alignment_timer() const {
  return _internal_has_time_alignment_timer();
}
inline void flex_ue_config::clear_time_alignment_timer() {
  time_alignment_timer_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_time_alignment_timer() const {
  return time_alignment_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::time_alignment_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.time_alignment_timer)
  return _internal_time_alignment_timer();
}
inline void flex_ue_config::_internal_set_time_alignment_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  time_alignment_timer_ = value;
}
inline void flex_ue_config::set_time_alignment_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_alignment_timer(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.time_alignment_timer)
}

// optional uint32 meas_gap_config_pattern = 4;
inline bool flex_ue_config::_internal_has_meas_gap_config_pattern() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool flex_ue_config::has_meas_gap_config_pattern() const {
  return _internal_has_meas_gap_config_pattern();
}
inline void flex_ue_config::clear_meas_gap_config_pattern() {
  meas_gap_config_pattern_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_meas_gap_config_pattern() const {
  return meas_gap_config_pattern_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::meas_gap_config_pattern() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.meas_gap_config_pattern)
  return _internal_meas_gap_config_pattern();
}
inline void flex_ue_config::_internal_set_meas_gap_config_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  meas_gap_config_pattern_ = value;
}
inline void flex_ue_config::set_meas_gap_config_pattern(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meas_gap_config_pattern(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.meas_gap_config_pattern)
}

// optional uint32 meas_gap_config_sf_offset = 5;
inline bool flex_ue_config::_internal_has_meas_gap_config_sf_offset() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool flex_ue_config::has_meas_gap_config_sf_offset() const {
  return _internal_has_meas_gap_config_sf_offset();
}
inline void flex_ue_config::clear_meas_gap_config_sf_offset() {
  meas_gap_config_sf_offset_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_meas_gap_config_sf_offset() const {
  return meas_gap_config_sf_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::meas_gap_config_sf_offset() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.meas_gap_config_sf_offset)
  return _internal_meas_gap_config_sf_offset();
}
inline void flex_ue_config::_internal_set_meas_gap_config_sf_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  meas_gap_config_sf_offset_ = value;
}
inline void flex_ue_config::set_meas_gap_config_sf_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_meas_gap_config_sf_offset(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.meas_gap_config_sf_offset)
}

// optional .protocol.flex_sps_config sps_config = 6;
inline bool flex_ue_config::_internal_has_sps_config() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || sps_config_ != nullptr);
  return value;
}
inline bool flex_ue_config::has_sps_config() const {
  return _internal_has_sps_config();
}
inline const ::protocol::flex_sps_config& flex_ue_config::_internal_sps_config() const {
  const ::protocol::flex_sps_config* p = sps_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_sps_config*>(
      &::protocol::_flex_sps_config_default_instance_);
}
inline const ::protocol::flex_sps_config& flex_ue_config::sps_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.sps_config)
  return _internal_sps_config();
}
inline void flex_ue_config::unsafe_arena_set_allocated_sps_config(
    ::protocol::flex_sps_config* sps_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sps_config_);
  }
  sps_config_ = sps_config;
  if (sps_config) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_config.sps_config)
}
inline ::protocol::flex_sps_config* flex_ue_config::release_sps_config() {
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_sps_config* temp = sps_config_;
  sps_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_sps_config* flex_ue_config::unsafe_arena_release_sps_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.sps_config)
  _has_bits_[0] &= ~0x00000002u;
  ::protocol::flex_sps_config* temp = sps_config_;
  sps_config_ = nullptr;
  return temp;
}
inline ::protocol::flex_sps_config* flex_ue_config::_internal_mutable_sps_config() {
  _has_bits_[0] |= 0x00000002u;
  if (sps_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_sps_config>(GetArena());
    sps_config_ = p;
  }
  return sps_config_;
}
inline ::protocol::flex_sps_config* flex_ue_config::mutable_sps_config() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.sps_config)
  return _internal_mutable_sps_config();
}
inline void flex_ue_config::set_allocated_sps_config(::protocol::flex_sps_config* sps_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sps_config_);
  }
  if (sps_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sps_config)->GetArena();
    if (message_arena != submessage_arena) {
      sps_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sps_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sps_config_ = sps_config;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.sps_config)
}

// optional .protocol.flex_sr_config sr_config = 7;
inline bool flex_ue_config::_internal_has_sr_config() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || sr_config_ != nullptr);
  return value;
}
inline bool flex_ue_config::has_sr_config() const {
  return _internal_has_sr_config();
}
inline const ::protocol::flex_sr_config& flex_ue_config::_internal_sr_config() const {
  const ::protocol::flex_sr_config* p = sr_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_sr_config*>(
      &::protocol::_flex_sr_config_default_instance_);
}
inline const ::protocol::flex_sr_config& flex_ue_config::sr_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.sr_config)
  return _internal_sr_config();
}
inline void flex_ue_config::unsafe_arena_set_allocated_sr_config(
    ::protocol::flex_sr_config* sr_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sr_config_);
  }
  sr_config_ = sr_config;
  if (sr_config) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_config.sr_config)
}
inline ::protocol::flex_sr_config* flex_ue_config::release_sr_config() {
  _has_bits_[0] &= ~0x00000004u;
  ::protocol::flex_sr_config* temp = sr_config_;
  sr_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_sr_config* flex_ue_config::unsafe_arena_release_sr_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.sr_config)
  _has_bits_[0] &= ~0x00000004u;
  ::protocol::flex_sr_config* temp = sr_config_;
  sr_config_ = nullptr;
  return temp;
}
inline ::protocol::flex_sr_config* flex_ue_config::_internal_mutable_sr_config() {
  _has_bits_[0] |= 0x00000004u;
  if (sr_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_sr_config>(GetArena());
    sr_config_ = p;
  }
  return sr_config_;
}
inline ::protocol::flex_sr_config* flex_ue_config::mutable_sr_config() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.sr_config)
  return _internal_mutable_sr_config();
}
inline void flex_ue_config::set_allocated_sr_config(::protocol::flex_sr_config* sr_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sr_config_);
  }
  if (sr_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sr_config)->GetArena();
    if (message_arena != submessage_arena) {
      sr_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sr_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  sr_config_ = sr_config;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.sr_config)
}

// optional .protocol.flex_cqi_config cqi_config = 8;
inline bool flex_ue_config::_internal_has_cqi_config() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || cqi_config_ != nullptr);
  return value;
}
inline bool flex_ue_config::has_cqi_config() const {
  return _internal_has_cqi_config();
}
inline const ::protocol::flex_cqi_config& flex_ue_config::_internal_cqi_config() const {
  const ::protocol::flex_cqi_config* p = cqi_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_cqi_config*>(
      &::protocol::_flex_cqi_config_default_instance_);
}
inline const ::protocol::flex_cqi_config& flex_ue_config::cqi_config() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.cqi_config)
  return _internal_cqi_config();
}
inline void flex_ue_config::unsafe_arena_set_allocated_cqi_config(
    ::protocol::flex_cqi_config* cqi_config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cqi_config_);
  }
  cqi_config_ = cqi_config;
  if (cqi_config) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_config.cqi_config)
}
inline ::protocol::flex_cqi_config* flex_ue_config::release_cqi_config() {
  _has_bits_[0] &= ~0x00000008u;
  ::protocol::flex_cqi_config* temp = cqi_config_;
  cqi_config_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_cqi_config* flex_ue_config::unsafe_arena_release_cqi_config() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.cqi_config)
  _has_bits_[0] &= ~0x00000008u;
  ::protocol::flex_cqi_config* temp = cqi_config_;
  cqi_config_ = nullptr;
  return temp;
}
inline ::protocol::flex_cqi_config* flex_ue_config::_internal_mutable_cqi_config() {
  _has_bits_[0] |= 0x00000008u;
  if (cqi_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_cqi_config>(GetArena());
    cqi_config_ = p;
  }
  return cqi_config_;
}
inline ::protocol::flex_cqi_config* flex_ue_config::mutable_cqi_config() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.cqi_config)
  return _internal_mutable_cqi_config();
}
inline void flex_ue_config::set_allocated_cqi_config(::protocol::flex_cqi_config* cqi_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cqi_config_);
  }
  if (cqi_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cqi_config)->GetArena();
    if (message_arena != submessage_arena) {
      cqi_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cqi_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  cqi_config_ = cqi_config;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.cqi_config)
}

// optional uint32 transmission_mode = 9;
inline bool flex_ue_config::_internal_has_transmission_mode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool flex_ue_config::has_transmission_mode() const {
  return _internal_has_transmission_mode();
}
inline void flex_ue_config::clear_transmission_mode() {
  transmission_mode_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_transmission_mode() const {
  return transmission_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::transmission_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.transmission_mode)
  return _internal_transmission_mode();
}
inline void flex_ue_config::_internal_set_transmission_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  transmission_mode_ = value;
}
inline void flex_ue_config::set_transmission_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_transmission_mode(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.transmission_mode)
}

// optional uint64 ue_aggregated_max_bitrate_UL = 10;
inline bool flex_ue_config::_internal_has_ue_aggregated_max_bitrate_ul() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool flex_ue_config::has_ue_aggregated_max_bitrate_ul() const {
  return _internal_has_ue_aggregated_max_bitrate_ul();
}
inline void flex_ue_config::clear_ue_aggregated_max_bitrate_ul() {
  ue_aggregated_max_bitrate_ul_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_ue_config::_internal_ue_aggregated_max_bitrate_ul() const {
  return ue_aggregated_max_bitrate_ul_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_ue_config::ue_aggregated_max_bitrate_ul() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_aggregated_max_bitrate_UL)
  return _internal_ue_aggregated_max_bitrate_ul();
}
inline void flex_ue_config::_internal_set_ue_aggregated_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  ue_aggregated_max_bitrate_ul_ = value;
}
inline void flex_ue_config::set_ue_aggregated_max_bitrate_ul(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ue_aggregated_max_bitrate_ul(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_aggregated_max_bitrate_UL)
}

// optional uint64 ue_aggregated_max_bitrate_DL = 11;
inline bool flex_ue_config::_internal_has_ue_aggregated_max_bitrate_dl() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool flex_ue_config::has_ue_aggregated_max_bitrate_dl() const {
  return _internal_has_ue_aggregated_max_bitrate_dl();
}
inline void flex_ue_config::clear_ue_aggregated_max_bitrate_dl() {
  ue_aggregated_max_bitrate_dl_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_ue_config::_internal_ue_aggregated_max_bitrate_dl() const {
  return ue_aggregated_max_bitrate_dl_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_ue_config::ue_aggregated_max_bitrate_dl() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_aggregated_max_bitrate_DL)
  return _internal_ue_aggregated_max_bitrate_dl();
}
inline void flex_ue_config::_internal_set_ue_aggregated_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000800u;
  ue_aggregated_max_bitrate_dl_ = value;
}
inline void flex_ue_config::set_ue_aggregated_max_bitrate_dl(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ue_aggregated_max_bitrate_dl(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_aggregated_max_bitrate_DL)
}

// optional .protocol.flex_ue_capabilities capabilities = 12;
inline bool flex_ue_config::_internal_has_capabilities() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || capabilities_ != nullptr);
  return value;
}
inline bool flex_ue_config::has_capabilities() const {
  return _internal_has_capabilities();
}
inline const ::protocol::flex_ue_capabilities& flex_ue_config::_internal_capabilities() const {
  const ::protocol::flex_ue_capabilities* p = capabilities_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_ue_capabilities*>(
      &::protocol::_flex_ue_capabilities_default_instance_);
}
inline const ::protocol::flex_ue_capabilities& flex_ue_config::capabilities() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.capabilities)
  return _internal_capabilities();
}
inline void flex_ue_config::unsafe_arena_set_allocated_capabilities(
    ::protocol::flex_ue_capabilities* capabilities) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_);
  }
  capabilities_ = capabilities;
  if (capabilities) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_config.capabilities)
}
inline ::protocol::flex_ue_capabilities* flex_ue_config::release_capabilities() {
  _has_bits_[0] &= ~0x00000010u;
  ::protocol::flex_ue_capabilities* temp = capabilities_;
  capabilities_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_ue_capabilities* flex_ue_config::unsafe_arena_release_capabilities() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.capabilities)
  _has_bits_[0] &= ~0x00000010u;
  ::protocol::flex_ue_capabilities* temp = capabilities_;
  capabilities_ = nullptr;
  return temp;
}
inline ::protocol::flex_ue_capabilities* flex_ue_config::_internal_mutable_capabilities() {
  _has_bits_[0] |= 0x00000010u;
  if (capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_ue_capabilities>(GetArena());
    capabilities_ = p;
  }
  return capabilities_;
}
inline ::protocol::flex_ue_capabilities* flex_ue_config::mutable_capabilities() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.capabilities)
  return _internal_mutable_capabilities();
}
inline void flex_ue_config::set_allocated_capabilities(::protocol::flex_ue_capabilities* capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities_);
  }
  if (capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(capabilities)->GetArena();
    if (message_arena != submessage_arena) {
      capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capabilities, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  capabilities_ = capabilities;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.capabilities)
}

// optional uint32 ue_transmission_antenna = 13;
inline bool flex_ue_config::_internal_has_ue_transmission_antenna() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool flex_ue_config::has_ue_transmission_antenna() const {
  return _internal_has_ue_transmission_antenna();
}
inline void flex_ue_config::clear_ue_transmission_antenna() {
  ue_transmission_antenna_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_ue_transmission_antenna() const {
  return ue_transmission_antenna_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::ue_transmission_antenna() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ue_transmission_antenna)
  return _internal_ue_transmission_antenna();
}
inline void flex_ue_config::_internal_set_ue_transmission_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  ue_transmission_antenna_ = value;
}
inline void flex_ue_config::set_ue_transmission_antenna(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ue_transmission_antenna(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ue_transmission_antenna)
}

// optional uint32 tti_bundling = 14;
inline bool flex_ue_config::_internal_has_tti_bundling() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool flex_ue_config::has_tti_bundling() const {
  return _internal_has_tti_bundling();
}
inline void flex_ue_config::clear_tti_bundling() {
  tti_bundling_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_tti_bundling() const {
  return tti_bundling_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::tti_bundling() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.tti_bundling)
  return _internal_tti_bundling();
}
inline void flex_ue_config::_internal_set_tti_bundling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  tti_bundling_ = value;
}
inline void flex_ue_config::set_tti_bundling(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tti_bundling(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.tti_bundling)
}

// optional uint32 max_HARQ_tx = 15;
inline bool flex_ue_config::_internal_has_max_harq_tx() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool flex_ue_config::has_max_harq_tx() const {
  return _internal_has_max_harq_tx();
}
inline void flex_ue_config::clear_max_harq_tx() {
  max_harq_tx_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_max_harq_tx() const {
  return max_harq_tx_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::max_harq_tx() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.max_HARQ_tx)
  return _internal_max_harq_tx();
}
inline void flex_ue_config::_internal_set_max_harq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  max_harq_tx_ = value;
}
inline void flex_ue_config::set_max_harq_tx(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_harq_tx(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.max_HARQ_tx)
}

// optional uint32 beta_offset_ACK_index = 16;
inline bool flex_ue_config::_internal_has_beta_offset_ack_index() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool flex_ue_config::has_beta_offset_ack_index() const {
  return _internal_has_beta_offset_ack_index();
}
inline void flex_ue_config::clear_beta_offset_ack_index() {
  beta_offset_ack_index_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_beta_offset_ack_index() const {
  return beta_offset_ack_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::beta_offset_ack_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_ACK_index)
  return _internal_beta_offset_ack_index();
}
inline void flex_ue_config::_internal_set_beta_offset_ack_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  beta_offset_ack_index_ = value;
}
inline void flex_ue_config::set_beta_offset_ack_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_beta_offset_ack_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_ACK_index)
}

// optional uint32 beta_offset_RI_index = 17;
inline bool flex_ue_config::_internal_has_beta_offset_ri_index() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool flex_ue_config::has_beta_offset_ri_index() const {
  return _internal_has_beta_offset_ri_index();
}
inline void flex_ue_config::clear_beta_offset_ri_index() {
  beta_offset_ri_index_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_beta_offset_ri_index() const {
  return beta_offset_ri_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::beta_offset_ri_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_RI_index)
  return _internal_beta_offset_ri_index();
}
inline void flex_ue_config::_internal_set_beta_offset_ri_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  beta_offset_ri_index_ = value;
}
inline void flex_ue_config::set_beta_offset_ri_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_beta_offset_ri_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_RI_index)
}

// optional uint32 beta_offset_CQI_index = 18;
inline bool flex_ue_config::_internal_has_beta_offset_cqi_index() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool flex_ue_config::has_beta_offset_cqi_index() const {
  return _internal_has_beta_offset_cqi_index();
}
inline void flex_ue_config::clear_beta_offset_cqi_index() {
  beta_offset_cqi_index_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_beta_offset_cqi_index() const {
  return beta_offset_cqi_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::beta_offset_cqi_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.beta_offset_CQI_index)
  return _internal_beta_offset_cqi_index();
}
inline void flex_ue_config::_internal_set_beta_offset_cqi_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  beta_offset_cqi_index_ = value;
}
inline void flex_ue_config::set_beta_offset_cqi_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_beta_offset_cqi_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.beta_offset_CQI_index)
}

// optional uint32 ack_nack_simultaneous_trans = 19;
inline bool flex_ue_config::_internal_has_ack_nack_simultaneous_trans() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool flex_ue_config::has_ack_nack_simultaneous_trans() const {
  return _internal_has_ack_nack_simultaneous_trans();
}
inline void flex_ue_config::clear_ack_nack_simultaneous_trans() {
  ack_nack_simultaneous_trans_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_ack_nack_simultaneous_trans() const {
  return ack_nack_simultaneous_trans_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::ack_nack_simultaneous_trans() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ack_nack_simultaneous_trans)
  return _internal_ack_nack_simultaneous_trans();
}
inline void flex_ue_config::_internal_set_ack_nack_simultaneous_trans(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  ack_nack_simultaneous_trans_ = value;
}
inline void flex_ue_config::set_ack_nack_simultaneous_trans(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack_nack_simultaneous_trans(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ack_nack_simultaneous_trans)
}

// optional uint32 simultaneous_ack_nack_cqi = 20;
inline bool flex_ue_config::_internal_has_simultaneous_ack_nack_cqi() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool flex_ue_config::has_simultaneous_ack_nack_cqi() const {
  return _internal_has_simultaneous_ack_nack_cqi();
}
inline void flex_ue_config::clear_simultaneous_ack_nack_cqi() {
  simultaneous_ack_nack_cqi_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_simultaneous_ack_nack_cqi() const {
  return simultaneous_ack_nack_cqi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::simultaneous_ack_nack_cqi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.simultaneous_ack_nack_cqi)
  return _internal_simultaneous_ack_nack_cqi();
}
inline void flex_ue_config::_internal_set_simultaneous_ack_nack_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  simultaneous_ack_nack_cqi_ = value;
}
inline void flex_ue_config::set_simultaneous_ack_nack_cqi(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_simultaneous_ack_nack_cqi(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.simultaneous_ack_nack_cqi)
}

// optional uint32 aperiodic_cqi_rep_mode = 21;
inline bool flex_ue_config::_internal_has_aperiodic_cqi_rep_mode() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool flex_ue_config::has_aperiodic_cqi_rep_mode() const {
  return _internal_has_aperiodic_cqi_rep_mode();
}
inline void flex_ue_config::clear_aperiodic_cqi_rep_mode() {
  aperiodic_cqi_rep_mode_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_aperiodic_cqi_rep_mode() const {
  return aperiodic_cqi_rep_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::aperiodic_cqi_rep_mode() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.aperiodic_cqi_rep_mode)
  return _internal_aperiodic_cqi_rep_mode();
}
inline void flex_ue_config::_internal_set_aperiodic_cqi_rep_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  aperiodic_cqi_rep_mode_ = value;
}
inline void flex_ue_config::set_aperiodic_cqi_rep_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_aperiodic_cqi_rep_mode(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.aperiodic_cqi_rep_mode)
}

// optional uint32 tdd_ack_nack_feedback = 22;
inline bool flex_ue_config::_internal_has_tdd_ack_nack_feedback() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool flex_ue_config::has_tdd_ack_nack_feedback() const {
  return _internal_has_tdd_ack_nack_feedback();
}
inline void flex_ue_config::clear_tdd_ack_nack_feedback() {
  tdd_ack_nack_feedback_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_tdd_ack_nack_feedback() const {
  return tdd_ack_nack_feedback_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::tdd_ack_nack_feedback() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.tdd_ack_nack_feedback)
  return _internal_tdd_ack_nack_feedback();
}
inline void flex_ue_config::_internal_set_tdd_ack_nack_feedback(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  tdd_ack_nack_feedback_ = value;
}
inline void flex_ue_config::set_tdd_ack_nack_feedback(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tdd_ack_nack_feedback(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.tdd_ack_nack_feedback)
}

// optional uint32 ack_nack_repetition_factor = 23;
inline bool flex_ue_config::_internal_has_ack_nack_repetition_factor() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool flex_ue_config::has_ack_nack_repetition_factor() const {
  return _internal_has_ack_nack_repetition_factor();
}
inline void flex_ue_config::clear_ack_nack_repetition_factor() {
  ack_nack_repetition_factor_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_ack_nack_repetition_factor() const {
  return ack_nack_repetition_factor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::ack_nack_repetition_factor() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ack_nack_repetition_factor)
  return _internal_ack_nack_repetition_factor();
}
inline void flex_ue_config::_internal_set_ack_nack_repetition_factor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  ack_nack_repetition_factor_ = value;
}
inline void flex_ue_config::set_ack_nack_repetition_factor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack_nack_repetition_factor(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ack_nack_repetition_factor)
}

// optional uint32 extended_bsr_size = 24;
inline bool flex_ue_config::_internal_has_extended_bsr_size() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_extended_bsr_size() const {
  return _internal_has_extended_bsr_size();
}
inline void flex_ue_config::clear_extended_bsr_size() {
  extended_bsr_size_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_extended_bsr_size() const {
  return extended_bsr_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::extended_bsr_size() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.extended_bsr_size)
  return _internal_extended_bsr_size();
}
inline void flex_ue_config::_internal_set_extended_bsr_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  extended_bsr_size_ = value;
}
inline void flex_ue_config::set_extended_bsr_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_extended_bsr_size(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.extended_bsr_size)
}

// optional uint32 ca_support = 25;
inline bool flex_ue_config::_internal_has_ca_support() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_ca_support() const {
  return _internal_has_ca_support();
}
inline void flex_ue_config::clear_ca_support() {
  ca_support_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_ca_support() const {
  return ca_support_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::ca_support() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ca_support)
  return _internal_ca_support();
}
inline void flex_ue_config::_internal_set_ca_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  ca_support_ = value;
}
inline void flex_ue_config::set_ca_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ca_support(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ca_support)
}

// optional uint32 cross_carrier_sched_support = 26;
inline bool flex_ue_config::_internal_has_cross_carrier_sched_support() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_cross_carrier_sched_support() const {
  return _internal_has_cross_carrier_sched_support();
}
inline void flex_ue_config::clear_cross_carrier_sched_support() {
  cross_carrier_sched_support_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_cross_carrier_sched_support() const {
  return cross_carrier_sched_support_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::cross_carrier_sched_support() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.cross_carrier_sched_support)
  return _internal_cross_carrier_sched_support();
}
inline void flex_ue_config::_internal_set_cross_carrier_sched_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  cross_carrier_sched_support_ = value;
}
inline void flex_ue_config::set_cross_carrier_sched_support(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cross_carrier_sched_support(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.cross_carrier_sched_support)
}

// optional uint32 pcell_carrier_index = 27;
inline bool flex_ue_config::_internal_has_pcell_carrier_index() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_pcell_carrier_index() const {
  return _internal_has_pcell_carrier_index();
}
inline void flex_ue_config::clear_pcell_carrier_index() {
  pcell_carrier_index_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_pcell_carrier_index() const {
  return pcell_carrier_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::pcell_carrier_index() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.pcell_carrier_index)
  return _internal_pcell_carrier_index();
}
inline void flex_ue_config::_internal_set_pcell_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  pcell_carrier_index_ = value;
}
inline void flex_ue_config::set_pcell_carrier_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pcell_carrier_index(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.pcell_carrier_index)
}

// repeated .protocol.flex_scell_config scell_config = 28;
inline int flex_ue_config::_internal_scell_config_size() const {
  return scell_config_.size();
}
inline int flex_ue_config::scell_config_size() const {
  return _internal_scell_config_size();
}
inline ::protocol::flex_scell_config* flex_ue_config::mutable_scell_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.scell_config)
  return scell_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_scell_config >*
flex_ue_config::mutable_scell_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_ue_config.scell_config)
  return &scell_config_;
}
inline const ::protocol::flex_scell_config& flex_ue_config::_internal_scell_config(int index) const {
  return scell_config_.Get(index);
}
inline const ::protocol::flex_scell_config& flex_ue_config::scell_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.scell_config)
  return _internal_scell_config(index);
}
inline ::protocol::flex_scell_config* flex_ue_config::_internal_add_scell_config() {
  return scell_config_.Add();
}
inline ::protocol::flex_scell_config* flex_ue_config::add_scell_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_ue_config.scell_config)
  return _internal_add_scell_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_scell_config >&
flex_ue_config::scell_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_ue_config.scell_config)
  return scell_config_;
}

// optional uint32 scell_deactivation_timer = 29;
inline bool flex_ue_config::_internal_has_scell_deactivation_timer() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_scell_deactivation_timer() const {
  return _internal_has_scell_deactivation_timer();
}
inline void flex_ue_config::clear_scell_deactivation_timer() {
  scell_deactivation_timer_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_scell_deactivation_timer() const {
  return scell_deactivation_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::scell_deactivation_timer() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.scell_deactivation_timer)
  return _internal_scell_deactivation_timer();
}
inline void flex_ue_config::_internal_set_scell_deactivation_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  scell_deactivation_timer_ = value;
}
inline void flex_ue_config::set_scell_deactivation_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_scell_deactivation_timer(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.scell_deactivation_timer)
}

// optional uint64 imsi = 30;
inline bool flex_ue_config::_internal_has_imsi() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_imsi() const {
  return _internal_has_imsi();
}
inline void flex_ue_config::clear_imsi() {
  imsi_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_ue_config::_internal_imsi() const {
  return imsi_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 flex_ue_config::imsi() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.imsi)
  return _internal_imsi();
}
inline void flex_ue_config::_internal_set_imsi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x10000000u;
  imsi_ = value;
}
inline void flex_ue_config::set_imsi(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.imsi)
}

// optional uint32 dl_slice_id = 31;
inline bool flex_ue_config::_internal_has_dl_slice_id() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_dl_slice_id() const {
  return _internal_has_dl_slice_id();
}
inline void flex_ue_config::clear_dl_slice_id() {
  dl_slice_id_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_dl_slice_id() const {
  return dl_slice_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::dl_slice_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.dl_slice_id)
  return _internal_dl_slice_id();
}
inline void flex_ue_config::_internal_set_dl_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  dl_slice_id_ = value;
}
inline void flex_ue_config::set_dl_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dl_slice_id(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.dl_slice_id)
}

// optional uint32 ul_slice_id = 32;
inline bool flex_ue_config::_internal_has_ul_slice_id() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool flex_ue_config::has_ul_slice_id() const {
  return _internal_has_ul_slice_id();
}
inline void flex_ue_config::clear_ul_slice_id() {
  ul_slice_id_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::_internal_ul_slice_id() const {
  return ul_slice_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_ue_config::ul_slice_id() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.ul_slice_id)
  return _internal_ul_slice_id();
}
inline void flex_ue_config::_internal_set_ul_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  ul_slice_id_ = value;
}
inline void flex_ue_config::set_ul_slice_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ul_slice_id(value);
  // @@protoc_insertion_point(field_set:protocol.flex_ue_config.ul_slice_id)
}

// optional .protocol.flex_measurement_info info = 33;
inline bool flex_ue_config::_internal_has_info() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || info_ != nullptr);
  return value;
}
inline bool flex_ue_config::has_info() const {
  return _internal_has_info();
}
inline const ::protocol::flex_measurement_info& flex_ue_config::_internal_info() const {
  const ::protocol::flex_measurement_info* p = info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::flex_measurement_info*>(
      &::protocol::_flex_measurement_info_default_instance_);
}
inline const ::protocol::flex_measurement_info& flex_ue_config::info() const {
  // @@protoc_insertion_point(field_get:protocol.flex_ue_config.info)
  return _internal_info();
}
inline void flex_ue_config::unsafe_arena_set_allocated_info(
    ::protocol::flex_measurement_info* info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.flex_ue_config.info)
}
inline ::protocol::flex_measurement_info* flex_ue_config::release_info() {
  _has_bits_[0] &= ~0x00000020u;
  ::protocol::flex_measurement_info* temp = info_;
  info_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::flex_measurement_info* flex_ue_config::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:protocol.flex_ue_config.info)
  _has_bits_[0] &= ~0x00000020u;
  ::protocol::flex_measurement_info* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::protocol::flex_measurement_info* flex_ue_config::_internal_mutable_info() {
  _has_bits_[0] |= 0x00000020u;
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::flex_measurement_info>(GetArena());
    info_ = p;
  }
  return info_;
}
inline ::protocol::flex_measurement_info* flex_ue_config::mutable_info() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_ue_config.info)
  return _internal_mutable_info();
}
inline void flex_ue_config::set_allocated_info(::protocol::flex_measurement_info* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info)->GetArena();
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_ue_config.info)
}

// -------------------------------------------------------------------

// flex_lc_ue_config

// optional uint32 rnti = 1;
inline bool flex_lc_ue_config::_internal_has_rnti() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_lc_ue_config::has_rnti() const {
  return _internal_has_rnti();
}
inline void flex_lc_ue_config::clear_rnti() {
  rnti_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_ue_config::_internal_rnti() const {
  return rnti_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_lc_ue_config::rnti() const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_ue_config.rnti)
  return _internal_rnti();
}
inline void flex_lc_ue_config::_internal_set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  rnti_ = value;
}
inline void flex_lc_ue_config::set_rnti(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rnti(value);
  // @@protoc_insertion_point(field_set:protocol.flex_lc_ue_config.rnti)
}

// repeated .protocol.flex_lc_config lc_config = 2;
inline int flex_lc_ue_config::_internal_lc_config_size() const {
  return lc_config_.size();
}
inline int flex_lc_ue_config::lc_config_size() const {
  return _internal_lc_config_size();
}
inline ::protocol::flex_lc_config* flex_lc_ue_config::mutable_lc_config(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_lc_ue_config.lc_config)
  return lc_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_lc_config >*
flex_lc_ue_config::mutable_lc_config() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_lc_ue_config.lc_config)
  return &lc_config_;
}
inline const ::protocol::flex_lc_config& flex_lc_ue_config::_internal_lc_config(int index) const {
  return lc_config_.Get(index);
}
inline const ::protocol::flex_lc_config& flex_lc_ue_config::lc_config(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_lc_ue_config.lc_config)
  return _internal_lc_config(index);
}
inline ::protocol::flex_lc_config* flex_lc_ue_config::_internal_add_lc_config() {
  return lc_config_.Add();
}
inline ::protocol::flex_lc_config* flex_lc_ue_config::add_lc_config() {
  // @@protoc_insertion_point(field_add:protocol.flex_lc_ue_config.lc_config)
  return _internal_add_lc_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_lc_config >&
flex_lc_ue_config::lc_config() const {
  // @@protoc_insertion_point(field_list:protocol.flex_lc_ue_config.lc_config)
  return lc_config_;
}

// -------------------------------------------------------------------

// flex_s1ap_config

// optional uint32 pending = 1;
inline bool flex_s1ap_config::_internal_has_pending() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool flex_s1ap_config::has_pending() const {
  return _internal_has_pending();
}
inline void flex_s1ap_config::clear_pending() {
  pending_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_s1ap_config::_internal_pending() const {
  return pending_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_s1ap_config::pending() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.pending)
  return _internal_pending();
}
inline void flex_s1ap_config::_internal_set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pending_ = value;
}
inline void flex_s1ap_config::set_pending(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pending(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.pending)
}

// optional uint32 connected = 2;
inline bool flex_s1ap_config::_internal_has_connected() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool flex_s1ap_config::has_connected() const {
  return _internal_has_connected();
}
inline void flex_s1ap_config::clear_connected() {
  connected_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_s1ap_config::_internal_connected() const {
  return connected_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 flex_s1ap_config::connected() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.connected)
  return _internal_connected();
}
inline void flex_s1ap_config::_internal_set_connected(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  connected_ = value;
}
inline void flex_s1ap_config::set_connected(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_connected(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.connected)
}

// optional string enb_s1_ip = 3;
inline bool flex_s1ap_config::_internal_has_enb_s1_ip() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool flex_s1ap_config::has_enb_s1_ip() const {
  return _internal_has_enb_s1_ip();
}
inline void flex_s1ap_config::clear_enb_s1_ip() {
  enb_s1_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& flex_s1ap_config::enb_s1_ip() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.enb_s1_ip)
  return _internal_enb_s1_ip();
}
inline void flex_s1ap_config::set_enb_s1_ip(const std::string& value) {
  _internal_set_enb_s1_ip(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.enb_s1_ip)
}
inline std::string* flex_s1ap_config::mutable_enb_s1_ip() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.enb_s1_ip)
  return _internal_mutable_enb_s1_ip();
}
inline const std::string& flex_s1ap_config::_internal_enb_s1_ip() const {
  return enb_s1_ip_.Get();
}
inline void flex_s1ap_config::_internal_set_enb_s1_ip(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  enb_s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void flex_s1ap_config::set_enb_s1_ip(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  enb_s1_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_config.enb_s1_ip)
}
inline void flex_s1ap_config::set_enb_s1_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  enb_s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_config.enb_s1_ip)
}
inline void flex_s1ap_config::set_enb_s1_ip(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  enb_s1_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_config.enb_s1_ip)
}
inline std::string* flex_s1ap_config::_internal_mutable_enb_s1_ip() {
  _has_bits_[0] |= 0x00000001u;
  return enb_s1_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* flex_s1ap_config::release_enb_s1_ip() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_config.enb_s1_ip)
  if (!_internal_has_enb_s1_ip()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return enb_s1_ip_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void flex_s1ap_config::set_allocated_enb_s1_ip(std::string* enb_s1_ip) {
  if (enb_s1_ip != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  enb_s1_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enb_s1_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_config.enb_s1_ip)
}

// optional string enb_name = 4;
inline bool flex_s1ap_config::_internal_has_enb_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool flex_s1ap_config::has_enb_name() const {
  return _internal_has_enb_name();
}
inline void flex_s1ap_config::clear_enb_name() {
  enb_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& flex_s1ap_config::enb_name() const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.enb_name)
  return _internal_enb_name();
}
inline void flex_s1ap_config::set_enb_name(const std::string& value) {
  _internal_set_enb_name(value);
  // @@protoc_insertion_point(field_set:protocol.flex_s1ap_config.enb_name)
}
inline std::string* flex_s1ap_config::mutable_enb_name() {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.enb_name)
  return _internal_mutable_enb_name();
}
inline const std::string& flex_s1ap_config::_internal_enb_name() const {
  return enb_name_.Get();
}
inline void flex_s1ap_config::_internal_set_enb_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  enb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void flex_s1ap_config::set_enb_name(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  enb_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.flex_s1ap_config.enb_name)
}
inline void flex_s1ap_config::set_enb_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  enb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.flex_s1ap_config.enb_name)
}
inline void flex_s1ap_config::set_enb_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  enb_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.flex_s1ap_config.enb_name)
}
inline std::string* flex_s1ap_config::_internal_mutable_enb_name() {
  _has_bits_[0] |= 0x00000002u;
  return enb_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* flex_s1ap_config::release_enb_name() {
  // @@protoc_insertion_point(field_release:protocol.flex_s1ap_config.enb_name)
  if (!_internal_has_enb_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return enb_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void flex_s1ap_config::set_allocated_enb_name(std::string* enb_name) {
  if (enb_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  enb_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enb_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.flex_s1ap_config.enb_name)
}

// repeated .protocol.flex_s1ap_mme mme = 5;
inline int flex_s1ap_config::_internal_mme_size() const {
  return mme_.size();
}
inline int flex_s1ap_config::mme_size() const {
  return _internal_mme_size();
}
inline ::protocol::flex_s1ap_mme* flex_s1ap_config::mutable_mme(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.flex_s1ap_config.mme)
  return mme_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_s1ap_mme >*
flex_s1ap_config::mutable_mme() {
  // @@protoc_insertion_point(field_mutable_list:protocol.flex_s1ap_config.mme)
  return &mme_;
}
inline const ::protocol::flex_s1ap_mme& flex_s1ap_config::_internal_mme(int index) const {
  return mme_.Get(index);
}
inline const ::protocol::flex_s1ap_mme& flex_s1ap_config::mme(int index) const {
  // @@protoc_insertion_point(field_get:protocol.flex_s1ap_config.mme)
  return _internal_mme(index);
}
inline ::protocol::flex_s1ap_mme* flex_s1ap_config::_internal_add_mme() {
  return mme_.Add();
}
inline ::protocol::flex_s1ap_mme* flex_s1ap_config::add_mme() {
  // @@protoc_insertion_point(field_add:protocol.flex_s1ap_config.mme)
  return _internal_add_mme();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::flex_s1ap_mme >&
flex_s1ap_config::mme() const {
  // @@protoc_insertion_point(field_list:protocol.flex_s1ap_config.mme)
  return mme_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_5fmessages_2eproto
